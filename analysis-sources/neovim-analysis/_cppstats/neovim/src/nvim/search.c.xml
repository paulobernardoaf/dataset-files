<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\search.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/search.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/indent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"search.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>spat</name></name></type> <name><name>spats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <block>{<expr><name>NULL</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="char">'/'</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0L</literal></expr>}</block></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <block>{<expr><name>NULL</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="char">'/'</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0L</literal></expr>}</block></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>lastc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NUL</name></expr>, <expr><name>NUL</name></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lastcdir</name> <init>= <expr><name>FORWARD</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_t_cmd</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>lastc_bytes</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lastc_bytelen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>spat</name></name></type> <name><name>saved_spats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>spat</name></name></type> <name>saved_last_search_spat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>saved_last_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>saved_no_hlsearch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>mr_pattern</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mr_pattern_alloced</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<typedef>typedef <type><struct>struct <name>SearchedFile</name> <block>{

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>;</decl_stmt> 

}</block></struct></type> <name>SearchedFile</name>;</typedef>

<function><type><name>int</name></type>

<name>search_regcomp</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pat_save</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pat_use</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc_did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>magic</name> <operator>=</operator> <name>p_magic</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pat</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pat_use</name> <operator>==</operator> <name>RE_LAST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>last_idx</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>pat_use</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>pat_use</name> <operator>==</operator> <name>RE_SUBST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nopresub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noprevre</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>rc_did_emsg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name><name>spats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pat</name></expr>;</expr_stmt>

<expr_stmt><expr><name>magic</name> <operator>=</operator> <name><name>spats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>magic</name></expr>;</expr_stmt>

<expr_stmt><expr><name>no_smartcase</name> <operator>=</operator> <name><name>spats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>no_scs</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SEARCH_HIS</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>add_to_history</name><argument_list>(<argument><expr><name>HIST_SEARCH</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mr_pattern_alloced</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mr_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mr_pattern_alloced</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rlc</name></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mr_pattern</name> <operator>=</operator> <call><name>reverse_text</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mr_pattern_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mr_pattern</name> <operator>=</operator> <name>pat</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_KEEP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>keeppatterns</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pat_save</name> <operator>==</operator> <name>RE_SEARCH</name> <operator>||</operator> <name>pat_save</name> <operator>==</operator> <name>RE_BOTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>save_re_pat</name><argument_list>(<argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pat_save</name> <operator>==</operator> <name>RE_SUBST</name> <operator>||</operator> <name>pat_save</name> <operator>==</operator> <name>RE_BOTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>save_re_pat</name><argument_list>(<argument><expr><name>RE_SUBST</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>-&gt;</operator><name>rmm_ic</name></name> <operator>=</operator> <call><name>ignorecase</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>-&gt;</operator><name>rmm_maxcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>-&gt;</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><ternary><condition><expr><name>magic</name></expr> ?</condition><then> <expr><name>RE_MAGIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>-&gt;</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_search_pat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>mr_pattern</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>reverse_text</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_RET

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rev</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>rev_i</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>s_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s_i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>s_i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_len</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>s_i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rev_i</name> <operator>-=</operator> <name>mb_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>rev</name> <operator>+</operator> <name>rev_i</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>s_i</name></expr></argument>, <argument><expr><name>mb_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_i</name> <operator>+=</operator> <name>mb_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rev</name><index>[<expr><operator>--</operator><name>rev_i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>s_i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rev</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>rev</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>save_re_pat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>!=</operator> <name>pat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>magic</name> <operator>=</operator> <name>magic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>no_scs</name> <operator>=</operator> <name>no_smartcase</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>os_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>additional_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_hls</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>save_search_patterns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>save_level</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>saved_spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>saved_spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pat</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>saved_spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>saved_spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pat</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>saved_last_idx</name> <operator>=</operator> <name>last_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_no_hlsearch</name> <operator>=</operator> <name>no_hlsearch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>restore_search_patterns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>save_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>saved_spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vv_searchforward</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>saved_spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_idx</name> <operator>=</operator> <name>saved_last_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>saved_no_hlsearch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free_spat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>spat</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>spat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>spat</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name><name>spat</name><operator>-&gt;</operator><name>additional_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>free_search_patterns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>spats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mr_pattern_alloced</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mr_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mr_pattern_alloced</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mr_pattern</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>save_last_search_pattern</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>saved_last_search_spat</name> <operator>=</operator> <name><name>spats</name><index>[<expr><name>RE_SEARCH</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><name>RE_SEARCH</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>saved_last_search_spat</name><operator>.</operator><name>pat</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>spats</name><index>[<expr><name>RE_SEARCH</name></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>saved_last_idx</name> <operator>=</operator> <name>last_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_no_hlsearch</name> <operator>=</operator> <name>no_hlsearch</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>restore_last_search_pattern</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>spats</name><index>[<expr><name>RE_SEARCH</name></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>RE_SEARCH</name></expr>]</index></name> <operator>=</operator> <name>saved_last_search_spat</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vv_searchforward</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_idx</name> <operator>=</operator> <name>saved_last_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>saved_no_hlsearch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>last_search_pattern</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>spats</name><index>[<expr><name>RE_SEARCH</name></expr>]</index></name><operator>.</operator><name>pat</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ignorecase</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ignorecase_opt</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>p_ic</name></expr></argument>, <argument><expr><name>p_scs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ignorecase_opt</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ic_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ic</name> <init>= <expr><name>ic_in</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ic</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_smartcase</name> <operator>&amp;&amp;</operator> <name>scs</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>ctrl_x_mode_not_default</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inf</name></name><operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>ic</name> <operator>=</operator> <operator>!</operator><call><name>pat_has_uppercase</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>no_smartcase</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>ic</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>pat_has_uppercase</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pat</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l</name> <init>= <expr><call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mb_isupper</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mb_isupper</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_csearch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>lastc_bytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>last_csearch_forward</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>lastcdir</name> <operator>==</operator> <name>FORWARD</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>last_csearch_until</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>last_t_cmd</name> <operator>==</operator> <name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_last_csearch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lastc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lastc_bytelen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lastc_bytes</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lastc_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lastc_bytes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_csearch_direction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cdir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>lastcdir</name> <operator>=</operator> <name>cdir</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_csearch_until</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t_cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>last_t_cmd</name> <operator>=</operator> <name>t_cmd</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>last_search_pat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_search_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vv_searchforward</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_last_search_pat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setlast</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>os_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>additional_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>magic</name> <operator>=</operator> <name>magic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>no_scs</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vv_searchforward</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>setlast</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>saved_spats</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saved_spats</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>saved_spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>saved_spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>spats</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>saved_last_idx</name> <operator>=</operator> <name>last_idx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_hls</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>==</operator> <name>last_idx</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_hlsearch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>last_pat_prog</name><parameter_list>(<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>-&gt;</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>search_regcomp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>last_idx</name></expr></argument>, <argument><expr><name>SEARCH_KEEP</name></expr></argument>, <argument><expr><name>regmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>searchit</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, 

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>end_pos</name></decl></parameter>, 

<parameter><decl><type><name>Direction</name></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pat_use</name></decl></parameter>, 

<parameter><decl><type><name>searchit_arg_T</name> <modifier>*</modifier></type><name>extra_arg</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>matchcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>matchpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>at_first_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_char_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match_ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nmatched</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>submatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_match</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_called_emsg</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>break_loop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>stop_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>extra_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stop_lnum</name> <operator>=</operator> <name><name>extra_arg</name><operator>-&gt;</operator><name>sa_stop_lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <name><name>extra_arg</name><operator>-&gt;</operator><name>sa_tm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>timed_out</name> <operator>=</operator> <operator>&amp;</operator><name><name>extra_arg</name><operator>-&gt;</operator><name>sa_timed_out</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><name>pat_use</name></expr></argument>,

<argument><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <operator>(</operator><name>SEARCH_HIS</name> <operator>+</operator> <name>SEARCH_KEEP</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_MSG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>rc_did_emsg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E383: Invalid search string: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mr_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<do>do <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_char_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_mbyte</name>

<operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name>MAXCOL</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_char_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start_char_len</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start_char_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>extra_col</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_START</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>start_char_len</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>extra_col</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_START</name><operator>)</operator></expr> ?</condition><then> <expr><name>start_char_len</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>at_first_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>at_first_line</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name> <operator>&amp;&amp;</operator> <name><name>start_pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_START</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>at_first_line</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>loop</name></expr></incr>)</control> <block>{<block_content> 

<for>for <control>(<init>;</init> <condition><expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition>

<incr><expr><name>lnum</name> <operator>+=</operator> <name>dir</name></expr><operator>,</operator> <expr><name>at_first_line</name> <operator>=</operator> <name>FALSE</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stop_lnum</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>

?</condition><then> <expr><name>lnum</name> <operator>&gt;</operator> <name>stop_lnum</name></expr> </then><else>: <expr><name>lnum</name> <operator>&lt;</operator> <name>stop_lnum</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>profile_passed_limit</name><argument_list>(<argument><expr><operator>*</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><ternary><condition><expr><name>at_first_line</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_COL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nmatched</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,

<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>called_emsg</name> <operator>||</operator> <operator>(</operator><name>timed_out</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>timed_out</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nmatched</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matchpos</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>submatch</name> <operator>=</operator> <call><name>first_submatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>+</operator> <name><name>matchpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <name><name>matchpos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name>at_first_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>matchpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_END</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>first_match</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>nmatched</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>endpos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal>

<operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>start_pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>extra_col</name><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>matchpos</name><operator>.</operator><name>col</name></name>

<operator>-</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name><name>matchpos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator>

<operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>start_pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>extra_col</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SEARCH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nmatched</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>matchpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matchcol</name> <operator>==</operator> <name><name>matchpos</name><operator>.</operator><name>col</name></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>matchcol</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matchcol</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>matchcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matchcol</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>matchcol</name></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><name>nmatched</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,

<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>matchcol</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>,

<argument><expr><name>timed_out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matchpos</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>submatch</name> <operator>=</operator> <call><name>first_submatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>matchpos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match_ok</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>loop</name>

<operator>||</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_END</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>lnum</name> <operator>+</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>

<operator>&lt;</operator> <name><name>start_pos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>+</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>

<operator>==</operator> <name><name>start_pos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>-</operator> <literal type="number">1</literal>

<operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>start_pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>extra_col</name><operator>)</operator><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name>lnum</name> <operator>+</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>

<operator>&lt;</operator> <name><name>start_pos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>+</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>

<operator>==</operator> <name><name>start_pos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name>

<operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>start_pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>extra_col</name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>matchpos</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>submatch</name> <operator>=</operator> <call><name>first_submatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SEARCH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nmatched</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchcol</name> <operator>==</operator> <name><name>matchpos</name><operator>.</operator><name>col</name></name>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>matchcol</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matchcol</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>matchcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>matchpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>matchpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>matchcol</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matchcol</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>matchcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>matchcol</name></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><name>nmatched</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <name><name>matchpos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>matchcol</name></expr></argument>,

<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>profile_passed_limit</name><argument_list>(<argument><expr><operator>*</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <name><name>matchpos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match_ok</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_END</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_NOOF</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>matchpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>endpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>matchpos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>endpos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <name><name>endpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>endpos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>--</operator><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,

<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>end_pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <name><name>matchpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end_pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>matchpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <name><name>matchpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>matchpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>end_pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <name><name>endpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end_pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>end_pos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>first_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>search_match_lines</name> <operator>=</operator> <name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>matchpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>search_match_endcol</name> <operator>=</operator> <name><name>endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_PEEK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>lnum</name> <operator>-</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>break_loop</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>start_pos</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>at_first_line</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ws</name> <operator>||</operator> <name>stop_lnum</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>got_int</name> <operator>||</operator> <name>called_emsg</name>

<operator>||</operator> <operator>(</operator><name>timed_out</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>timed_out</name><operator>)</operator>

<operator>||</operator> <name>break_loop</name>

<operator>||</operator> <name>found</name> <operator>||</operator> <name>loop</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_SEARCH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_MSG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>give_warning</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>

?</condition><then> <expr><name>top_bot_msg</name></expr> </then><else>: <expr><name>bot_top_msg</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extra_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>extra_arg</name><operator>-&gt;</operator><name>sa_wrapped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <name>called_emsg</name>

<operator>||</operator> <operator>(</operator><name>timed_out</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>timed_out</name><operator>)</operator>

<operator>||</operator> <name>break_loop</name></expr>

)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>found</name></expr>)</condition>;</do> 

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>|=</operator> <name>save_called_emsg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_interr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_MSG</name><operator>)</operator> <operator>==</operator> <name>SEARCH_MSG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_ws</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_patnotf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mr_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E384: search hit TOP without match for: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mr_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E385: search hit BOTTOM without match for: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mr_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>submatch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_search_direction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cdir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <name>cdir</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_vv_searchforward</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_SEARCHFORWARD</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>dir</name></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>first_submatch</name><parameter_list>(<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>submatch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>submatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><operator>++</operator><name>submatch</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>submatch</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>submatch</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>submatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>submatch</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_search</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>dirc</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>searchit_arg_T</name> <modifier>*</modifier></type><name>sia</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>searchstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>soffset</name></name></type> <name>old_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dircp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strcopy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msgbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_offset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEARCH_STAT_BUF_LEN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_LINEOFF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_off</name> <operator>=</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>dirc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dirc</name> <operator>=</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>dir</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <name>dirc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vv_searchforward</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SEARCH_REV</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dirc</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dirc</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dirc</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dirc</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>MAXCOL</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_hlsearch</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_KEEP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>show_top_bot_msg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>searchstr</name> <operator>=</operator> <name>pat</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dircp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pat</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>pat</name> <operator>==</operator> <name>dirc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><name>RE_SEARCH</name></expr>]</index></name><operator>.</operator><name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>searchstr</name> <operator>=</operator> <name><name>spats</name><index>[<expr><name>RE_SUBST</name></expr>]</index></name><operator>.</operator><name>pat</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>searchstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noprevre</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end_do_search</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>searchstr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pat</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>ps</name> <operator>=</operator> <name>strcopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>dirc</name></expr></argument>, <argument><expr><name>p_magic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strcopy</name> <operator>!=</operator> <name>ps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>searchcmdlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>strcopy</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>strcopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>searchstr</name> <operator>=</operator> <name>strcopy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>dirc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dircp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_OPT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>searchcmdlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>pat</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_ECHO</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>messaging</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>trunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>off_buf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>off_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name> <operator>||</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>end</name></name> <operator>||</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>off_buf</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>dirc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>off_buf</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off_len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>off_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>searchstr</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>searchstr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_SEARCHCOUNT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msg_scrolled</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>Rows</name> <operator>-</operator> <name>msg_row</name><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>Rows</name> <operator>-</operator> <name>msg_row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>+</operator> <name>sc_col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off_len</name> <operator>+</operator> <name>SEARCH_STAT_BUF_LEN</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off_len</name> <operator>+</operator> <name>SEARCH_STAT_BUF_LEN</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off_len</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>msgbuf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dirc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgbuf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>msgbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>msgbuf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>msgbuf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>msgbuf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off_buf</name></expr></argument>, <argument><expr><name>off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>trunc</name> <operator>=</operator> <call><name>msg_strtrunc</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trunc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msgbuf</name> <operator>=</operator> <name>trunc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rlc</name></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>reverse_text</name><argument_list>(<argument><expr><ternary><condition><expr><name>trunc</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>trunc</name></expr> </then><else>: <expr><name>msgbuf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msgbuf</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>size_t</name></type> <name>pat_len</name> <init>= <expr><name>msgbuf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>r</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>pat_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>msgbuf</name><operator>)</operator> <operator>&gt;=</operator> <name>pat_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>pat_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>msgbuf</name> <operator>+</operator> <name>pat_len</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_nowait</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name> <operator>&amp;&amp;</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>MAXCOL</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><operator>--</operator><name>c</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>dirc</name> <operator>==</operator> <literal type="char">'/'</literal></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><name>searchstr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>end</name></name> <operator>*</operator> <name>SEARCH_END</name>

<operator>+</operator> <operator>(</operator><name>options</name>

<operator>&amp;</operator> <operator>(</operator><name>SEARCH_KEEP</name> <operator>+</operator> <name>SEARCH_PEEK</name> <operator>+</operator> <name>SEARCH_HIS</name> <operator>+</operator> <name>SEARCH_MSG</name>

<operator>+</operator> <name>SEARCH_START</name>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>pat</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pat</name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>SEARCH_NOOF</name></expr></else></ternary><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><name>RE_LAST</name></expr></argument>, <argument><expr><name>sia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dircp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dircp</name> <operator>=</operator> <name>dirc</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_SEARCH</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dirc</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>dirc</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>show_top_bot_msg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end_do_search</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>end</name></name> <operator>&amp;&amp;</operator> <name>oap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_NOOF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pat</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pat</name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>org_pos</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>line</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>MAXCOL</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>off</name><operator>.</operator><name>off</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>c</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else <block>{<block_content>

<while>while <condition>(<expr><name>c</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalpos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>org_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>has_offset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_ECHO</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>messaging</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>cmd_silent</name> <operator>+</operator> <name>msg_silent</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>FAIL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_SEARCHCOUNT</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>msgbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>search_stat</name><argument_list>(<argument><expr><name>dirc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>show_top_bot_msg</name></expr></argument>, <argument><expr><name>msgbuf</name></expr></argument>,

<argument><expr><operator>(</operator><name>count</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>has_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_OPT</name><operator>)</operator> <operator>||</operator> <name>pat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pat</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dirc</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>pat</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dirc</name> <operator>!=</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>dirc</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E386: Expected '?' or '/' after ';'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end_do_search</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>pat</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SEARCH_MARK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<label><name>end_do_search</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SEARCH_KEEP</name><operator>)</operator> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>keeppatterns</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>off</name> <operator>=</operator> <name>old_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>search_for_exact_line</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_ws</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_SEARCH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>give_warning</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>top_bot_msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_ws</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_SEARCH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>give_warning</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>bot_top_msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_SOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mb_strcmp_ic</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name><operator>)</operator><name>p_ic</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>compl_length</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>p_ic</name></expr> ?</condition><then> <expr><call><name>mb_strnicmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>compl_length</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>searchc</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t_cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>KeyStuffed</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>lastc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_csearch_direction</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_csearch_until</name><argument_list>(<argument><expr><name>t_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lastc_bytelen</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>lastc_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC1</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lastc_bytelen</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC1</name></name></expr></argument>,

<argument><expr><name>lastc_bytes</name> <operator>+</operator> <name>lastc_bytelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lastc_bytelen</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC2</name></name></expr></argument>,

<argument><expr><name>lastc_bytes</name> <operator>+</operator> <name>lastc_bytelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lastc</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>lastc_bytelen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>-</operator><name>lastcdir</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>lastcdir</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>t_cmd</name> <operator>=</operator> <name>last_t_cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>lastc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SCOLON</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>t_cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastc_bytelen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>stop</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>lastc_bytes</name></expr></argument>, <argument><expr><name>lastc_bytelen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>stop</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>col</name> <operator>+=</operator> <name>dir</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>t_cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>dir</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>lastc_bytelen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pos_T</name> <modifier>*</modifier></type><name>findmatch</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>findmatchlimit</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>initc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_prevcol</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>linep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>prevcol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name>linep</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prevcol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>prevcol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>ch</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_rawstring_end</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>linep</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>startpos</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>endpos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>delim_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>delim_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>linep</name> <operator>+</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'('</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>

<expr_stmt><expr><name>delim_len</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>linep</name><operator>)</operator> <operator>-</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delim_copy</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>linep</name> <operator>+</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>delim_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>endpos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>line</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>lnum</name> <operator>==</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr> ?</condition><then> <expr><name><name>startpos</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>&gt;=</operator> <name><name>endpos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>delim_len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>delim_copy</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>delim_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>delim_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>found</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pos_T</name> <modifier>*</modifier></type><name>findmatchlimit</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>maxtravel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>findc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>backwards</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>raw_string</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>inquote</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hash_dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>comment_dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>traveled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>ignore_cend</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>match_escaped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>comment_col</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>lispcomm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>lisp</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>cpo_match</name> <init>= <expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_MATCH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cpo_bsl</name> <init>= <expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_MATCHBSL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FM_BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>BACKWARD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FM_FORWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>initc</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>initc</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>initc</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comment_dir</name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initc</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ignore_cend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>backwards</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dir</name> <operator>==</operator> <name>FORWARD</name><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>raw_string</name> <operator>=</operator> <operator>(</operator><name>initc</name> <operator>==</operator> <literal type="char">'R'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>initc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>initc</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name>initc</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>find_mps_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name>initc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backwards</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>findc</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>initc</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hash_dir</name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpo_match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>linep</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"el"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hash_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comment_dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backwards</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comment_dir</name> <operator>=</operator> <name>BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backwards</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comment_dir</name> <operator>=</operator> <name>BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backwards</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comment_dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backwards</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_dir</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>comment_dir</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>initc</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>linep</name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initc</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>find_mps_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name>initc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backwards</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>findc</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>linep</name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>findc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpo_match</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hash_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>cpo_bsl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>bslcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</init> <condition><expr><call><name>check_prevcol</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>bslcnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>match_escaped</name> <operator>=</operator> <operator>(</operator><name>bslcnt</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_dir</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>initc</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"el"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hash_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hash_dir</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hash_dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>hash_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>linep</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"el"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>initc</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"el"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"()[]{}&lt;&gt;"</literal></expr></argument>, <argument><expr><name>initc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>backwards</name> <operator>=</operator> <operator>!</operator><name>backwards</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_quotes</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>at_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>TriState</name></type> <name>start_in_quotes</name> <init>= <expr><name>kNone</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>match_pos</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>clearpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>match_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>backwards</name> <operator>&amp;&amp;</operator> <name>comment_dir</name><operator>)</operator>

<operator>||</operator> <name>lisp</name></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>comment_col</name> <operator>=</operator> <call><name>check_linecomment</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lisp</name> <operator>&amp;&amp;</operator> <name>comment_col</name> <operator>!=</operator> <name>MAXCOL</name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>comment_col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lispcomm</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>backwards</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lispcomm</name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>comment_col</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxtravel</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>traveled</name> <operator>&gt;</operator> <name>maxtravel</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>do_quotes</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comment_dir</name>

<operator>||</operator> <name>lisp</name></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>comment_col</name> <operator>=</operator> <call><name>check_linecomment</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lisp</name> <operator>&amp;&amp;</operator> <name>comment_col</name> <operator>!=</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>comment_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name>linep</name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><name>lisp</name> <operator>&amp;&amp;</operator> <name>comment_col</name> <operator>!=</operator> <name>MAXCOL</name>

<operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>comment_col</name><operator>)</operator></expr>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> 

<operator>||</operator> <name>lispcomm</name></expr>

)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxtravel</name> <operator>&amp;&amp;</operator> <name>traveled</name><operator>++</operator> <operator>&gt;</operator> <name>maxtravel</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>do_quotes</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lisp</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>comment_col</name> <operator>=</operator> <call><name>check_linecomment</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>linep</name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FM_BLOCKSTOP</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>findc</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comment_dir</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>comment_dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>raw_string</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal>

<operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>linep</name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_rawstring_end</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name>match_pos</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>match_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match_pos</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal>

<operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>comment_col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>match_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match_pos</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>match_pos</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name>comment_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ignore_cend</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cpo_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_quotes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>do_quotes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>do_quotes</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>linep</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><operator>++</operator><name>ptr</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>linep</name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>backwards</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <operator>(</operator><name>do_quotes</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'"'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>ptr</name> <operator>==</operator> <name>linep</name> <operator>||</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\''</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\''</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>do_quotes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>do_quotes</name> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_quotes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inquote</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>do_quotes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_in_quotes</name> <operator>==</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inquote</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_in_quotes</name> <operator>=</operator> <name>kTrue</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>backwards</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inquote</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>do_quotes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_in_quotes</name> <operator>==</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inquote</name> <operator>=</operator> <name>at_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inquote</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_in_quotes</name> <operator>=</operator> <name>kTrue</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>backwards</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inquote</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_in_quotes</name> <operator>==</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_in_quotes</name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>linep</name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NUL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inquote</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_in_quotes</name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>do_quotes</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>col</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>col</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inquote</name> <operator>=</operator> <operator>!</operator><name>inquote</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_in_quotes</name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpo_match</name> <operator>&amp;&amp;</operator> <name>initc</name> <operator>!=</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <name>findc</name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>backwards</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>

<operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>

<operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>linep</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"(){}[]"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call><name>check_prevcol</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>check_prevcol</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>inquote</name> <operator>||</operator> <name>start_in_quotes</name> <operator>==</operator> <name>kTrue</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>initc</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>findc</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>bslcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpo_bsl</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</init> <condition><expr><call><name>check_prevcol</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>bslcnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cpo_bsl</name> <operator>||</operator> <operator>(</operator><name>bslcnt</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>match_escaped</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>initc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>comment_dir</name> <operator>==</operator> <name>BACKWARD</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>match_pos</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>pos_T</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_linecomment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>in_str</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\";"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_str</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>in_str</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <name>line</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'#'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>in_str</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>in_str</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal>

<operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'#'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>==</operator> <name>line</name> <operator>||</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MAXCOL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>showmatch</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>lpos</name></decl>, <decl><type ref="prev"/><name>save_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>mpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>vcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>so</name> <init>= <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>p_so</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>siso</name> <init>= <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>p_siso</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>save_so</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>save_siso</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>save_dollar_vcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mps</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>^</operator> <name>p_ri</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>^</operator> <name>p_ri</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lpos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name>

<operator>&amp;&amp;</operator> <name><name>lpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lpos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name>

<operator>||</operator> <operator>(</operator><name>vcol</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name>

<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mpos</name> <operator>=</operator> <operator>*</operator><name>lpos</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>save_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_so</name> <operator>=</operator> <operator>*</operator><name>so</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_siso</name> <operator>=</operator> <operator>*</operator><name>siso</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dollar_vcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dollar_vcol</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dollar_vcol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>save_dollar_vcol</name> <operator>=</operator> <name>dollar_vcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_state</name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>SHOWMATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>mpos</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>so</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>siso</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>showruler</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dollar_vcol</name> <operator>=</operator> <name>save_dollar_vcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SHOWMATCH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_delay</name><argument_list>(<argument><expr><name>p_mat</name> <operator>*</operator> <literal type="number">100L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_delay</name><argument_list>(<argument><expr><name>p_mat</name> <operator>*</operator> <literal type="number">100L</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>so</name> <operator>=</operator> <name>save_so</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>siso</name> <operator>=</operator> <name>save_siso</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_state</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>findsent</name><parameter_list>(<parameter><decl><type><name>Direction</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>tpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>noskip</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func</name> <operator>=</operator> <name>incl</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>func</name> <operator>=</operator> <name>decl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>startPS</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found_dot</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".!?)]\"'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tpos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>tpos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <name>FORWARD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_dot</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <literal type="string">".!?"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_dot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <literal type="string">")]\"'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <literal type="string">".!?)]\"'"</literal></expr></argument>, <argument><expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tpos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>startlnum</name> <init>= <expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>cpo_J</name> <init>= <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_ENDOFSENT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>startPS</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name>startlnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tpos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block>

while <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">")]\"'"</literal></expr></argument>, <argument><expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tpos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name>cpo_J</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><name>cpo_J</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tpos</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tpos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>tpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>noskip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>found</name>:</label>

<while>while <condition>(<expr><operator>!</operator><name>noskip</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></while>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>findpar</name> <parameter_list>(

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pincl</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>both</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>curr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_skip</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>fold_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>fold_last</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>fold_skipped</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_skip</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>first</name> <operator>=</operator> <name>true</name></expr>;</init><condition>;</condition> <incr><expr><name>first</name> <operator>=</operator> <name>false</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>ml_get</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_skip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fold_skipped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&amp;&amp;</operator> <call><name>hasFolding</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fold_first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fold_last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>fold_last</name></expr> </then><else>: <expr><name>fold_first</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_skipped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name>did_skip</name> <operator>&amp;&amp;</operator> <call><name>startPS</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>both</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fold_skipped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curr</name> <operator>-=</operator> <name>dir</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curr</name> <operator>+=</operator> <name>dir</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>curr</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curr</name> <operator>-=</operator> <name>dir</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>both</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>&amp;&amp;</operator> <name>what</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pincl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>inmacro</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>macro</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>macro</name> <operator>=</operator> <name>opt</name></expr>;</init> <condition><expr><name><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>macro</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>||</operator> <operator>(</operator><name><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>macro</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>macro</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>macro</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>macro</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>startPS</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>para</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>both</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>para</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\f'</literal> <operator>||</operator> <operator>(</operator><name>both</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'}'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>inmacro</name><argument_list>(<argument><expr><name>p_sections</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>para</name> <operator>&amp;&amp;</operator> <call><name>inmacro</name><argument_list>(<argument><expr><name>p_para</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cls_bigword</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cls</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cls_bigword</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>fwd_word</name><parameter_list>(

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bigword</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sclass</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_line</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cls_bigword</name> <operator>=</operator> <name>bigword</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sclass</name> <operator>=</operator> <call><name>cls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_line</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>last_line</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>eol</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sclass</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <name>sclass</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>eol</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>eol</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>bck_word</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bigword</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sclass</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cls_bigword</name> <operator>=</operator> <name>bigword</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sclass</name> <operator>=</operator> <call><name>cls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dec_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stop</name> <operator>||</operator> <name>sclass</name> <operator>==</operator> <call><name>cls</name><argument_list>()</argument_list></call> <operator>||</operator> <name>sclass</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>finished</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dec_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>skip_chars</name><argument_list>(<argument><expr><call><name>cls</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<label><name>finished</name>:</label>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>end_word</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bigword</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>empty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sclass</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cls_bigword</name> <operator>=</operator> <name>bigword</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sclass</name> <operator>=</operator> <call><name>cls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <name>sclass</name> <operator>&amp;&amp;</operator> <name>sclass</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>skip_chars</name><argument_list>(<argument><expr><name>sclass</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>stop</name> <operator>||</operator> <name>sclass</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>empty</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>finished</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>skip_chars</name><argument_list>(<argument><expr><call><name>cls</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<label><name>finished</name>:</label>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>bckend_word</name><parameter_list>(

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bigword</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sclass</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cls_bigword</name> <operator>=</operator> <name>bigword</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sclass</name> <operator>=</operator> <call><name>cls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>dec_cursor</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sclass</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <name>sclass</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>dec_cursor</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>eol</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>dec_cursor</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>eol</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_chars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cclass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cclass</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr> ?</condition><then> <expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>back_in_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sclass</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>sclass</name> <operator>=</operator> <call><name>cls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>sclass</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_first_blank</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>posp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>decl</name><argument_list>(<argument><expr><name>posp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><name>posp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><name>posp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>findsent_forward</name><parameter_list>(

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>at_start_sent</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>findsent</name><argument_list>(<argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at_start_sent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>find_first_blank</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>at_start_sent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>at_start_sent</name> <operator>=</operator> <operator>!</operator><name>at_start_sent</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>current_word</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>include</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>bigword</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>inclusive</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>include_white</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cls_bigword</name> <operator>=</operator> <name>bigword</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clearpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>||</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>back_in_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <name>include</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>end_word</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>bigword</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fwd_word</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>bigword</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oneleft</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>include_white</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inclusive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name> <operator>!=</operator> <operator>(</operator><call><name>cls</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bck_word</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>bigword</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bckend_word</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>bigword</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name> <operator>!=</operator> <operator>(</operator><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fwd_word</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>bigword</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oneleft</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inclusive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>end_word</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>bigword</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>include_white</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>cls</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>inclusive</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oneleft</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>back_in_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cls</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name>inclusive</name> <operator>&amp;&amp;</operator> <call><name>ltoreq</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>inclusive</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>current_sent</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>include</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_blank</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>at_start_sent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ncount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>findsent</name><argument_list>(<argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>equalpos</name><argument_list>(<argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>extend</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at_start_sent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at_start_sent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>at_start_sent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>findsent</name><argument_list>(<argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>equalpos</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>at_start_sent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>findsent</name><argument_list>(<argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>count</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>at_start_sent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>find_first_blank</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>at_start_sent</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>include</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>findsent</name><argument_list>(<argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>at_start_sent</name> <operator>=</operator> <operator>!</operator><name>at_start_sent</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>at_start_sent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalpos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>at_start_sent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at_start_sent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>at_start_sent</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>findsent</name><argument_list>(<argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>count</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>findsent_forward</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>at_start_sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>equalpos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_blank</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_first_blank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start_blank</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>findsent</name><argument_list>(<argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ncount</name> <operator>=</operator> <name>count</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ncount</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_blank</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>ncount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ncount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>findsent_forward</name><argument_list>(<argument><expr><name>ncount</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_blank</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>find_first_blank</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>find_first_blank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>equalpos</name><argument_list>(<argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>extend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>current_block</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>include</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>other</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>end_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_start</name></decl>, <decl><type ref="prev"/><name>old_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cpo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sol</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_end</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>old_start</name> <operator>=</operator> <name>old_end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>||</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content> 

<while>while <condition>(<expr><call><name>inindent</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>what</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>old_start</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>old_end</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>save_cpo</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_MATCHBSL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"%M"</literal></expr> </then><else>: <expr><literal type="string">"%"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>save_cpo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>end_pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>end_pos</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>include</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sol</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>inindent</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lt</name><argument_list>(<argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>old_start</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>lt</name><argument_list>(<argument><expr><name>old_end</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end_pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>end_pos</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sol</name> <operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ltoreq</name><argument_list>(<argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>in_html_tag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>end_tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lc</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <name>line</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_tag</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>lc</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>current_tagblock</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count_arg</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>include</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><name>count_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>end_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_start</name></decl>, <decl><type ref="prev"/><name>old_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>spat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>epat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>do_include</name> <init>= <expr><name>include</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>save_p_ws</name> <init>= <expr><name>p_ws</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_inclusive</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_end</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>old_start</name> <operator>=</operator> <name>old_end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>||</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>||</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>inindent</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>in_html_tag</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>in_html_tag</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>dec_cursor</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_end</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>old_start</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>old_end</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>again</name>:</label>

<for>for <control>(<init><decl><type><name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_searchpair</name><argument_list>(

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;[^ \t&gt;/!]\\+\\%(\\_s\\_[^&gt;]\\{-}[^/]&gt;\\|$\\|\\_s\\=&gt;\\)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;/[^&gt;]*&gt;"</literal></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>p</name></expr>;</init>

<condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</condition>

<incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cp</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spat</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>epat</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>spat</name></expr></argument>, <argument><expr><literal type="string">"&lt;%.*s\\&gt;\\%%(\\s\\_[^&gt;]\\{-}[^/]&gt;\\|&gt;\\)\\c"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>epat</name></expr></argument>, <argument><expr><literal type="string">"&lt;/%.*s&gt;\\c"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><call><name>do_searchpair</name><argument_list>(<argument><expr><name>spat</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>epat</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>spat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>epat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>lt</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>old_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<goto>goto <name>again</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_include</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_inclusive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_include</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>end_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name>

<operator>&amp;&amp;</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>old_start</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name>end_pos</name></expr></argument>, <argument><expr><name>old_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>do_include</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count_arg</name></expr>;</expr_stmt>

<goto>goto <name>again</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>end_pos</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>end_pos</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>is_inclusive</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>save_p_ws</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>current_par</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>include</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>white_in_front</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_is_white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_start_is_white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_white</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>start_lnum</name> <operator>!=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<label><name>extend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>start_lnum</name> <operator>&lt;</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>BACKWARD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>count</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_lnum</name> <operator>==</operator>

<operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_start_is_white</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start_lnum</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_is_white</name> <operator>=</operator> <call><name>linewhite</name><argument_list>(<argument><expr><name>start_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_start_is_white</name> <operator>==</operator> <name>start_is_white</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_lnum</name> <operator>-=</operator> <name>dir</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_lnum</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>

?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_is_white</name> <operator>!=</operator> <call><name>linewhite</name><argument_list>(<argument><expr><name>start_lnum</name> <operator>+</operator> <name>dir</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>start_is_white</name>

<operator>&amp;&amp;</operator> <call><name>startPS</name><argument_list>(<argument><expr><name>start_lnum</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_lnum</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>include</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_lnum</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>

?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_start_is_white</name> <operator>=</operator> <name>start_is_white</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>white_in_front</name> <operator>=</operator> <call><name>linewhite</name><argument_list>(<argument><expr><name>start_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>start_lnum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>white_in_front</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>linewhite</name><argument_list>(<argument><expr><name>start_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>linewhite</name><argument_list>(<argument><expr><name>start_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>startPS</name><argument_list>(<argument><expr><name>start_lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>start_lnum</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>end_lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>&amp;&amp;</operator> <call><name>linewhite</name><argument_list>(<argument><expr><name>end_lnum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>end_lnum</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>--</operator><name>end_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>include</name> <operator>&amp;&amp;</operator> <name>white_in_front</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end_lnum</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>include</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_white</name> <operator>=</operator> <call><name>linewhite</name><argument_list>(<argument><expr><name>end_lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name> <operator>||</operator> <operator>!</operator><name>do_white</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>end_lnum</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>end_lnum</name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>linewhite</name><argument_list>(<argument><expr><name>end_lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>startPS</name><argument_list>(<argument><expr><name>end_lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>end_lnum</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>white_in_front</name> <operator>&amp;&amp;</operator> <name>include</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name> <operator>||</operator> <name>do_white</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>end_lnum</name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <call><name>linewhite</name><argument_list>(<argument><expr><name>end_lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>end_lnum</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>white_in_front</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>linewhite</name><argument_list>(<argument><expr><name>end_lnum</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>include</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>start_lnum</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>linewhite</name><argument_list>(<argument><expr><name>start_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>start_lnum</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal> <operator>&amp;&amp;</operator> <name>start_lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>extend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name>start_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>end_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>find_next_quote</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>quotechar</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>escape</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>escape</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>escape</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>quotechar</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>col</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>find_prev_quote</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col_start</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>quotechar</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>escape</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>col_start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col_start</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col_start</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>col_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>escape</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>col_start</name> <operator>-</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>escape</name></expr></argument>,

<argument><expr><name><name>line</name><index>[<expr><name>col_start</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col_start</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><name>col_start</name></expr>]</index></name> <operator>==</operator> <name>quotechar</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>col_start</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>current_quote</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>include</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>quotechar</name></decl></parameter> 

)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col_start</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>inclusive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>vis_empty</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>vis_bef_curs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>did_exclusive_adj</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>inside_quotes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>selected_quote</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>restore_vis_bef</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vis_bef_curs</name> <operator>=</operator> <call><name>lt</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vis_empty</name> <operator>=</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vis_bef_curs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_exclusive_adj</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>vis_empty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_exclusive_adj</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vis_empty</name> <operator>=</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vis_bef_curs</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>vis_empty</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>t</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vis_bef_curs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>restore_vis_bef</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vis_empty</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vis_bef_curs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inside_quotes</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>quotechar</name>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>quotechar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>inside_quotes</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>quotechar</name>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>quotechar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>col_end</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>==</operator> <name>quotechar</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>selected_quote</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vis_empty</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>col_start</name></expr>]</index></name> <operator>==</operator> <name>quotechar</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vis_bef_curs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <call><name>find_next_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col_start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>abort_search</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <call><name>find_next_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col_end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <name>col_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <call><name>find_prev_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>col_end</name></expr>]</index></name> <operator>!=</operator> <name>quotechar</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>abort_search</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <call><name>find_prev_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_end</name></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>col_start</name></expr>]</index></name> <operator>!=</operator> <name>quotechar</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <name>col_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><name>col_start</name></expr>]</index></name> <operator>==</operator> <name>quotechar</name>

<operator>||</operator> <operator>!</operator><name>vis_empty</name></expr>

)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first_col</name> <init>= <expr><name>col_start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vis_empty</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vis_bef_curs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_col</name> <operator>=</operator> <call><name>find_next_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>first_col</name> <operator>=</operator> <call><name>find_prev_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <call><name>find_next_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col_start</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>col_start</name></expr></argument> &gt;</argument_list></name> <name>first_col</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>abort_search</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <call><name>find_next_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col_end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>abort_search</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col_start</name> <operator>&lt;=</operator> <name>first_col</name> <operator>&amp;&amp;</operator> <name>first_col</name> <operator>&lt;=</operator> <name>col_end</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <name>col_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <call><name>find_prev_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>col_start</name></expr>]</index></name> <operator>!=</operator> <name>quotechar</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col_start</name> <operator>=</operator> <call><name>find_next_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col_start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>abort_search</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col_end</name> <operator>=</operator> <call><name>find_next_quote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>quotechar</name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col_end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>abort_search</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>col_end</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>col_end</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>col_end</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><name>col_start</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>col_start</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>col_start</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>include</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>vis_empty</name> <operator>||</operator> <operator>!</operator><name>inside_quotes</name><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>col_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vis_empty</name>

<operator>||</operator> <operator>(</operator><name>vis_bef_curs</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>selected_quote</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>inside_quotes</name>

<operator>||</operator> <operator>(</operator><name><name>line</name><index>[<expr><name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>!=</operator> <name>quotechar</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>line</name><index>[<expr><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>quotechar</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col_end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>include</name> <operator>||</operator> <name>count</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>vis_empty</name> <operator>&amp;&amp;</operator> <name>inside_quotes</name><operator>)</operator>

<operator>)</operator> <operator>&amp;&amp;</operator> <call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inclusive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vis_empty</name> <operator>||</operator> <name>vis_bef_curs</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>inside_quotes</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>selected_quote</name>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>!=</operator> <name>quotechar</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>line</name><index>[<expr><name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <name><name>line</name><index>[<expr><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>quotechar</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col_start</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>inclusive</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>abort_search</name>:</label>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_exclusive_adj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restore_vis_bef</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>t</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>current_search</name><parameter_list>(

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>forward</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>old_p_ws</name> <init>= <expr><name>p_ws</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_VIsual</name> <init>= <expr><name>VIsual</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>end_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>orig_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>orig_pos</name> <operator>=</operator> <name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>forward</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zero_width</name> <init>= <expr><call><name>is_zero_width</name><argument_list>(<argument><expr><name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>,

<argument><expr><name>FORWARD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>zero_width</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><ternary><condition><expr><name>forward</name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><operator>!</operator><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>zero_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SEARCH_END</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_pos</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>count</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>SEARCH_KEEP</name> <operator>|</operator> <name>flags</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>old_p_ws</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>orig_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>save_VIsual</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>forward</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>clearpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(

<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>pos_T</name></type> <name>start_pos</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>end_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name>end_pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>forward</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>forward</name> <operator>&amp;&amp;</operator> <call><name>ltoreq</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>forward</name> <operator>&amp;&amp;</operator> <call><name>ltoreq</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_SEARCH</name> <operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>may_start_select</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>is_zero_width</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>move</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>Direction</name></type> <name>direction</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nmatched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_called_emsg</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_regcomp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>,

<argument><expr><name>SEARCH_KEEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>move</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clearpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>SEARCH_START</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>SEARCH_KEEP</name> <operator>+</operator> <name>flag</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nmatched</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>,

<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nmatched</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><ternary><condition><expr><name>direction</name> <operator>==</operator> <name>FORWARD</name></expr>

?</condition><then> <expr><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&lt;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>

</then><else>: <expr><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&gt;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr></else></ternary></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>called_emsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>nmatched</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>

<operator>&amp;&amp;</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>==</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>|=</operator> <name>save_called_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>linewhite</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_stat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirc</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>show_top_bot_msg</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msgbuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recompute</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_ws</name> <init>= <expr><name>p_ws</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wraparound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>p</name> <init>= <expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pos_T</name></type> <name>lastpos</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>chgtick</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>lastpat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type><name>lbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>start</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_OF_TIME</name></cpp:macro> <cpp:value>999</cpp:value></cpp:define>

<expr_stmt><expr><name>wraparound</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dirc</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name>lastpos</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>dirc</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lastpos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>chgtick</name> <operator>==</operator> <call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>lastpat</name> <operator>!=</operator> <name>NULL</name> 

<operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>lastpat</name></expr></argument>, <argument><expr><name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>lastpat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>lastpat</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name>lastpos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>lbuf</name> <operator>==</operator> <name>curbuf</name><operator>)</operator>

<operator>||</operator> <name>wraparound</name> <operator>||</operator> <name><name>cur</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>cur</name></expr></argument> &gt;</argument_list></name> <literal type="number">99</literal> <operator>||</operator> <name>recompute</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clearpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lastpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lbuf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>equalpos</name><argument_list>(<argument><expr><name>lastpos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>wraparound</name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>dirc</name> <operator>==</operator> <literal type="char">'/'</literal></expr> ?</condition><then> <expr><name>cur</name> <operator>&lt;</operator> <name>cnt</name></expr> </then><else>: <expr><name>cur</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <ternary><condition><expr><name>dirc</name> <operator>==</operator> <literal type="char">'/'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>profile_setlimit</name><argument_list>(<argument><expr><literal type="number">20L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastpos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEARCH_KEEP</name></expr></argument>, <argument><expr><name>RE_LAST</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>profile_passed_limit</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>OUT_OF_TIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>OUT_OF_TIME</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ltoreq</name><argument_list>(<argument><expr><name>lastpos</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>t</name><index>[<expr><name>SEARCH_STAT_BUF_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rlc</name></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>OUT_OF_TIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SEARCH_STAT_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"[?\?/?]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">99</literal> <operator>&amp;&amp;</operator> <name>cur</name> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SEARCH_STAT_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"[&gt;99/&gt;99]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SEARCH_STAT_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"[&gt;99/%d]"</literal></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SEARCH_STAT_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"[%d/%d]"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>OUT_OF_TIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SEARCH_STAT_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"[?/??]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">99</literal> <operator>&amp;&amp;</operator> <name>cur</name> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SEARCH_STAT_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"[&gt;99/&gt;99]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SEARCH_STAT_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"[%d/&gt;99]"</literal></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SEARCH_STAT_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"[%d/%d]"</literal></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_top_bot_msg</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>SEARCH_STAT_BUF_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>msgbuf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dirc</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>cur</name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>lastpat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lastpat</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>spats</name><index>[<expr><name>last_idx</name></expr>]</index></name><operator>.</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chgtick</name> <operator>=</operator> <call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lbuf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lastpos</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_hist_off</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_ext_set_kind</name><argument_list>(<argument><expr><literal type="string">"search_count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>give_warning</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_hist_off</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>save_ws</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>find_pattern_in_path</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>whole</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>skip_comments</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, 

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SearchedFile</name> <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>SearchedFile</name> <modifier>*</modifier></type><name>bigger</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_path_depth</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>match_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curr_fname</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth_displayed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>old_files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>already_searched</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>save_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>define_matched</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>incl_regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>def_regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matched</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_show</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>already</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>startp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>inc_opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>curwin_save</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l_g_do_tagpreview</name> <init>= <expr><name>g_do_tagpreview</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>incl_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>def_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>file_line</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>LSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>CHECK_PATH</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>FIND_DEFINE</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_SOL</name><operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pat</name></expr></argument>, <argument><expr><ternary><condition><expr><name>whole</name></expr> ?</condition><then> <expr><literal type="string">"\\&lt;%.*s\\&gt;"</literal></expr> </then><else>: <expr><literal type="string">"%.*s"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <call><name>ignorecase</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><name>RE_MAGIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fpip_end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>inc_opt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inc</name></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><name>p_inc</name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inc</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>inc_opt</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>incl_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>inc_opt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><name>RE_MAGIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>incl_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fpip_end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>incl_regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FIND_DEFINE</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p_def</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>def_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name> <operator>==</operator> <name>NUL</name></expr>

?</condition><then> <expr><name>p_def</name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><name>RE_MAGIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>def_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fpip_end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>def_regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>max_path_depth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SearchedFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_files</name> <operator>=</operator> <name>max_path_depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <name>depth_displayed</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name>end_lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>incl_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>incl_regmatch</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_fname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>curr_fname</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name><operator>)</operator></expr>

?</condition><then> <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr> </then><else>: <expr><name>curr_fname</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inc_opt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>inc_opt</name></expr></argument>, <argument><expr><literal type="string">"\\zs"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_fname</name> <operator>=</operator> <call><name>find_file_name_in_path</name><argument_list>(<argument><expr><name><name>incl_regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>incl_regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>-</operator> <name><name>incl_regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><name>FNAME_EXP</name><operator>|</operator><name>FNAME_INCL</name><operator>|</operator><name>FNAME_REL</name></expr></argument>,

<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>p_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>new_fname</name> <operator>=</operator> <call><name>file_name_in_line</name><argument_list>(<argument><expr><name><name>incl_regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>FNAME_EXP</name><operator>|</operator><name>FNAME_INCL</name><operator>|</operator><name>FNAME_REL</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>p_fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>already_searched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>old_files</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>max_path_depth</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>path_full_compare</name><argument_list>(<argument><expr><name>new_fname</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>kEqualFiles</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>CHECK_PATH</name>

<operator>&amp;&amp;</operator> <name>action</name> <operator>==</operator> <name>ACTION_SHOW_ALL</name> <operator>&amp;&amp;</operator> <name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>matched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>msg_home_replace_hl</name><argument_list>(<argument><expr><name>new_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (includes previously listed match)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>new_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>already_searched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CHECK_PATH</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>action</name> <operator>==</operator> <name>ACTION_SHOW_ALL</name>

<operator>||</operator> <operator>(</operator><name>new_fname</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>already_searched</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_show</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--- Included files "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>ACTION_SHOW_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"not found "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"in path ---\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>depth_displayed</name> <operator>&lt;</operator> <name>depth</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>depth_displayed</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth_displayed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msg_home_replace</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>depth_displayed</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" --&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>depth_displayed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>new_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name>new_fname</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>inc_opt</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>inc_opt</name></expr></argument>, <argument><expr><literal type="string">"\\zs"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>incl_regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>incl_regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>-</operator> <name><name>incl_regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>incl_regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init>

<condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>incl_regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>line</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>save_char</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>save_char</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_fname</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>action</name> <operator>==</operator> <name>ACTION_SHOW_ALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>already_searched</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (Already listed)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" NOT FOUND"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>old_files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bigger</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>max_path_depth</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SearchedFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bigger</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>old_files</name> <operator>+</operator> <name>max_path_depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bigger</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bigger</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bigger</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bigger</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>old_files</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_path_depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bigger</name><index>[<expr><name>i</name> <operator>+</operator> <name>max_path_depth</name></expr>]</index></name> <operator>=</operator> <name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>old_files</name> <operator>+=</operator> <name>max_path_depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_path_depth</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>files</name> <operator>=</operator> <name>bigger</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>files</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fp</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new_fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>new_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>depth</name> <operator>==</operator> <name>old_files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>old_files</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>old_files</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>curr_fname</name> <operator>=</operator> <name>new_fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_EXPAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_hist_off</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scanning included file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_trunc_attr</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Searching included file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<label><name>search_line</name>:</label>

<expr_stmt><expr><name>define_matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>def_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def_regmatch</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>def_regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>define_matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>def_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>define_matched</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>define_matched</name>

<operator>||</operator> <operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_SOL</name><operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>startp</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>!</operator><call><name>mb_strnicmp</name><argument_list>(<argument><expr><name>startp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>startp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matched</name> <operator>&amp;&amp;</operator> <name>define_matched</name> <operator>&amp;&amp;</operator> <name>whole</name>

<operator>&amp;&amp;</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>startp</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>startp</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_comments</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'#'</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"define"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>get_leader_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matched</name>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>line</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>startp</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matched</name>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>matched</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_EXPAND</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>cont_s_ipos</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>startp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>compl_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_iswordp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>exit_matched</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_word_start</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_word_end</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>aux</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>compl_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>exit_matched</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><operator>++</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name>line</name> <operator>=</operator> <name>file_line</name></expr></argument>,

<argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>exit_matched</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>already</name> <operator>=</operator> <name>aux</name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_word_start</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_word_end</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>aux</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>aux</name> <operator>!=</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <name><name>IObuff</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>IObuff</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_js</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>IObuff</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>||</operator> <name><name>IObuff</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal>

<operator>||</operator> <name><name>IObuff</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>aux</name> <operator>&gt;=</operator> <name>IOSIZE</name> <operator>-</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>aux</name> <operator>+</operator> <name>IOSIZE</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>aux</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cont_s_ipos</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <name>IObuff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>compl_length</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>exit_matched</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>add_r</name> <init>= <expr><call><name>ins_compl_add_infercase</name><argument_list>(

<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p_ic</name></expr></argument>, <argument><expr><ternary><condition><expr><name>curr_fname</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>curr_fname</name></expr></else></ternary></expr></argument>,

<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>cont_s_ipos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>add_r</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>add_r</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_SHOW_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_show</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>curr_fname</name> <operator>!=</operator> <name>prev_fname</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_show</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>msg_home_replace_hl</name><argument_list>(<argument><expr><name>curr_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_fname</name> <operator>=</operator> <name>curr_fname</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_pat_in_path</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>action</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>fp</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>lnum</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr></else></ternary></expr></argument>,

<argument><expr><name>match_count</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>depth</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>--</operator><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name>l_g_do_tagpreview</name> <operator>==</operator> <literal type="number">0</literal></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E387: Match is on current line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_SHOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_pat_in_path</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>did_show</name></expr></argument>, <argument><expr><name>action</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>fp</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>lnum</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l_g_do_tagpreview</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curwin_save</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_tagpreview</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_SPLIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l_g_do_tagpreview</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GETFILE_SUCCESS</name><argument_list>(<argument><expr><call><name>getfile</name><argument_list>(<argument><expr><name><name>curwin_save</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GETFILE_SUCCESS</name><argument_list>(<argument><expr><call><name>getfile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>ACTION_SHOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>startp</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l_g_do_tagpreview</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>curwin</name> <operator>!=</operator> <name>curwin_save</name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>curwin_save</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>curwin_save</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<label><name>exit_matched</name>:</label>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>def_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>action</name> <operator>==</operator> <name>ACTION_EXPAND</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_SOL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>startp</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>=</operator> <name>startp</name> <operator>+</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>startp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>search_line</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_EXPAND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_check_keys</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <name>compl_interrupted</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>depth</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>already</name>

<operator>&amp;&amp;</operator> <call><name>vim_fgets</name><argument_list>(<argument><expr><name>line</name> <operator>=</operator> <name>file_line</name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>old_files</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>files</name><index>[<expr><name>old_files</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>files</name><index>[<expr><name>old_files</name></expr>]</index></name><operator>.</operator><name>matched</name> <operator>=</operator> <name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>matched</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_fname</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>

</then><else>: <expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>name</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <name>depth_displayed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>depth_displayed</name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>files</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>lnum</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>already</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>lnum</name> <operator>&gt;</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>already</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>old_files</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_path_depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CHECK_PATH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_show</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>ACTION_SHOW_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"All included files were found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No included files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>found</name>

<operator>&amp;&amp;</operator> <name>action</name> <operator>!=</operator> <name>ACTION_EXPAND</name></expr>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <name>compl_interrupted</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_interr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>FIND_DEFINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E388: Couldn't find definition"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E389: Couldn't find pattern"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_SHOW</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>ACTION_SHOW_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fpip_end</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>file_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>incl_regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>def_regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_pat_in_path</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>did_show</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>did_show</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>msg_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_SHOW_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"%3ld: "</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"%4ld"</literal></expr></argument>, <argument><expr><operator>*</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_prt_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <name>type</name> <operator>!=</operator> <name>FIND_DEFINE</name> <operator>||</operator> <name>p</name> <operator>&lt;</operator> <name>line</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><operator>*</operator><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><operator>*</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_search_pattern</name><parameter_list>(<parameter><decl><type><name>SearchPattern</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_substitute_pattern</name><parameter_list>(<parameter><decl><type><name>SearchPattern</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pat</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_search_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SearchPattern</name></type> <name>pat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>spats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vv_searchforward</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_substitute_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SearchPattern</name></type> <name>pat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_spat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>pat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>spats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_last_used_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_substitute_pattern</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>last_idx</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>is_substitute_pattern</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>search_was_last_used</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>last_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
