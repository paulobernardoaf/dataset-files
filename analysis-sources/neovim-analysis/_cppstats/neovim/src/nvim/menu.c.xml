<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\menu.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/menu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENUDEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"menu.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>menu_mode_chars</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_notsubmenu</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E327: Part of menu-item path is not sub-menu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_othermode</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E328: Menu only exists in another mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_nomenu</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E329: No menu \"%s\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>ex_menu</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>menu_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map_to</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>noremap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>silent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name><name>pri_tab</name><index>[<expr><name>MENUDEPTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TriState</name></type> <name>enable</name> <init>= <expr><name>kNone</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vimmenu_T</name></type> <name>menuarg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <call><name>get_menu_cmd_modes</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noremap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;script&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_SCRIPT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;silent&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>silent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;special&gt;"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"icon="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENUDEPTH</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getdigits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pri_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>MENUDEPTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>MENUDEPTH</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"enable"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>kTrue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"disable"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_menus</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu_path</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menu_path</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>map_to</name> <operator>=</operator> <call><name>menu_translate_tab_and_shift</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>map_to</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>unmenu</name> <operator>&amp;&amp;</operator> <name>enable</name> <operator>==</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_menus</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>map_to</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unmenu</name> <operator>||</operator> <name>enable</name> <operator>!=</operator> <name>kNone</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name> <operator>!=</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>menu_path</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_INDEX_TIP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>popup_mode_name</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>menu_enable_recurse</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>MENU_ALL_MODES</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>menu_enable_recurse</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>unmenu</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>menu_path</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_INDEX_TIP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>popup_mode_name</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_menu</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>MENU_ALL_MODES</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remove_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root_menu</name></expr></argument>, <argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>map_to</name></expr></argument>, <argument><expr><literal type="string">"&lt;nop&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>map_to</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>map_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>map_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>map_to</name> <operator>=</operator> <call><name>replace_termcodes</name><argument_list>(<argument><expr><name>map_to</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>map_to</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>map_buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><name>CPO_TO_CPO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>modes</name></name> <operator>=</operator> <name>modes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>noremap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>noremap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>silent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>silent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_menu_path</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menuarg</name></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><name>map_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_INDEX_TIP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>popup_mode_name</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>modes</name></name> <operator>=</operator> <name>modes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_menu_path</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menuarg</name></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><name>map_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>map_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ui_call_update_menu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>add_menu_path</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>menu_path</name></decl></parameter>,

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menuarg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>long</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pri_tab</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>call_data</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modes</name> <init>= <expr><name><name>menuarg</name><operator>-&gt;</operator><name>modes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>menup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>lower_pri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pri_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_modes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>amenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>en_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map_to</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>path_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name>root_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>path_name</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_name</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>map_to</name> <operator>=</operator> <call><name>menutrans_lookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>map_to</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>en_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>map_to</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>en_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dname</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E792: Empty menu name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lower_pri</name> <operator>=</operator> <name>menup</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>*</operator><name>menup</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>menu_name_equal</name><argument_list>(<argument><expr><name>dname</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_name</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys_menu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E330: Menu path must not lead to a sub-menu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_name</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys_menu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name> <operator>&lt;=</operator> <name><name>pri_tab</name><index>[<expr><name>pri_idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lower_pri</name> <operator>=</operator> <name>menup</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_name</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E331: Must not add menu items directly to menu bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>next_name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E332: Separator cannot be part of a menu path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vimmenu_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>=</operator> <name>modes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>MENU_ALL_MODES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>en_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>en_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>en_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name><name>pri_tab</name><index>[<expr><name>pri_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>lower_pri</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lower_pri</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_modes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>old_modes</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>modes</name></name></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>|=</operator> <name>modes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>|=</operator> <name>modes</name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>next_name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pri_tab</name><index>[<expr><name>pri_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pri_idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>amenu</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>modes</name> <operator>&amp;</operator> <operator>(</operator><name>MENU_NORMAL_MODE</name> <operator>|</operator> <name>MENU_INSERT_MODE</name><operator>)</operator><operator>)</operator> <operator>==</operator>

<operator>(</operator><name>MENU_NORMAL_MODE</name> <operator>|</operator> <name>MENU_INSERT_MODE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sys_menu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modes</name> <operator>&amp;=</operator> <operator>~</operator><name>old_modes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>modes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>call_data</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>call_data</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_menu_string</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>amenu</name> <operator>&amp;&amp;</operator> <name>call_data</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>call_data</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MENU_VISUAL_MODE</name></expr>:</case>

<case>case <expr><name>MENU_SELECT_MODE</name></expr>:</case>

<case>case <expr><name>MENU_OP_PENDING_MODE</name></expr>:</case>

<case>case <expr><name>MENU_CMDLINE_MODE</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MENU_INSERT_MODE</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_BSL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>Ctrl_O</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>call_data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>call_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>call_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>Ctrl_BSL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_G</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>menuarg</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>menuarg</name><operator>-&gt;</operator><name>silent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<label><name>erret</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name>root_menu</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>menup</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>menup</name> <operator>!=</operator> <name>parent</name></expr>;</condition> <incr><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>menup</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_menu</name><argument_list>(<argument><expr><name>menup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>menu_enable_recurse</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_enable_recurse</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>|=</operator> <name>modes</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;=</operator> <operator>~</operator><name>modes</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomenu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> 

<name>remove_menu</name> <parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>menup</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>menu</name> <operator>=</operator> <operator>*</operator><name>menup</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name><operator>)</operator> <operator>!=</operator> <literal type="number">0x0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>remove_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_othermode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;=</operator> <operator>~</operator><name>modes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_menu_string</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>MENU_INDEX_TIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>MENU_ALL_MODES</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_menu</name><argument_list>(<argument><expr><name>menup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomenu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;=</operator> <operator>~</operator><name>modes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>|=</operator> <name><name>child</name><operator>-&gt;</operator><name>modes</name></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_menu_string</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>MENU_INDEX_TIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>MENU_ALL_MODES</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>menup</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_menu</name><argument_list>(<argument><expr><name>menup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>menup</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>*</operator><name>menup</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>menup</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_menu_string</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_menu_string</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dict_T</name> <modifier>*</modifier></type><name>menu_get_recursive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>menu</name> <operator>||</operator> <operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"priority"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"hidden"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>menu_is_hidden</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXCHAR</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"shortcut"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"actext"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"tooltip"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>commands</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_dict_add_dict</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"mappings"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bit</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><name>bit</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_dict_add_allocated_str</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"rhs"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>str2special_save</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>,

<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"silent"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"enabled"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"noremap"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>&amp;</operator> <name>REMAP_NONE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"sid"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>&amp;</operator> <name>REMAP_SCRIPT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_dict</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>menu_mode_chars</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>children_list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenMayKnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>menu_get_recursive</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_len</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_dict</name><argument_list>(<argument><expr><name>children_list</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tv_dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"submenus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>children_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>dict</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>menu_get</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><call><name>find_menu</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>path_name</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>menu</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>menu_get_recursive</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&amp;&amp;</operator> <call><name>tv_dict_len</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_dict</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path_name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>find_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_othermode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>menu</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomenu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>menu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_menus</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>find_menu</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>path_name</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>menu</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Menus ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_menus_recursive</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_menus_recursive</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><name>bit</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>menu_mode_chars</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>REMAP_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>bit</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"&lt;Nop&gt;"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_outtrans_special</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>menu_is_hidden</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_menus_recursive</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>expand_menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_modes</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_emenu</name></decl>;</decl_stmt> 

<function><type><name>char_u</name> <modifier>*</modifier></type><name>set_context_in_menu_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>after_dot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>expand_menus</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_UNSUCCESSFUL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"enable"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"disable"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>after_dot</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>after_dot</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>expand_menus</name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'p'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>expand_emenu</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expand_menus</name> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>expand_modes</name> <operator>=</operator> <call><name>get_menu_cmd_modes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unmenu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expand_modes</name> <operator>=</operator> <name>MENU_ALL_MODES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>after_dot</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>path_len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>after_dot</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>path_name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>path_name</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>expand_modes</name><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <ternary><condition><expr><name>expand_menus</name></expr> ?</condition><then> <expr><name>EXPAND_MENUNAMES</name></expr> </then><else>: <expr><name>EXPAND_MENUS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>after_dot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>expand_menu</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_menu_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>should_advance</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>expand_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>menu_is_hidden</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>expand_modes</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <operator>!</operator><name>should_advance</name></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_menu_names</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBUFFER_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>tbuffer</name><index>[<expr><name>TBUFFER_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>should_advance</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>expand_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator> <call><name>menu_is_hidden</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>expand_emenu</name> <operator>&amp;&amp;</operator> <call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <name><name>menu</name><operator>-&gt;</operator><name>dname</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>expand_modes</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>tbuffer</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr></argument>, <argument><expr><name>TBUFFER_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>tbuffer</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><name>TBUFFER_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>tbuffer</name></expr></argument>, <argument><expr><literal type="string">"\001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>tbuffer</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <operator>!</operator><name>should_advance</name></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>menu_name_skip</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>menu_name_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>menu_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>menu_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>menu_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>menu_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>menu_namecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>TAB</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>mname</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TAB</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>mname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TAB</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_menu_cmd_modes</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type> <name>cmd</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>forceit</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>noremap</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unmenu</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>modes</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>cmd</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_VISUAL_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_SELECT_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_OP_PENDING_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_INSERT_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_TIP_MODE</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_CMDLINE_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_INSERT_MODE</name> <operator>|</operator> <name>MENU_CMDLINE_MODE</name> <operator>|</operator> <name>MENU_NORMAL_MODE</name>

<operator>|</operator> <name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name>

<operator>|</operator> <name>MENU_OP_PENDING_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <literal type="char">'o'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_NORMAL_MODE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><name>cmd</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>forceit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_INSERT_MODE</name> <operator>|</operator> <name>MENU_CMDLINE_MODE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_NORMAL_MODE</name> <operator>|</operator> <name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name>

<operator>|</operator> <name>MENU_OP_PENDING_MODE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>noremap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>noremap</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'n'</literal></expr> ?</condition><then> <expr><name>REMAP_NONE</name></expr> </then><else>: <expr><name>REMAP_YES</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unmenu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>unmenu</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>modes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>popup_mode_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>menu_mode_chars</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menu_text</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char_u</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>mnemonic</name></expr></argument>, <argument><expr><name>char_u</name> <operator>*</operator><operator>*</operator><name>actext</name></expr></argument>)</argument_list>

<name>FUNC_ATTR_NONNULL_RET</name> <name>FUNC_ATTR_WARN_UNUSED_RESULT</name>

<name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>actext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>actext</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>&gt;=</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mnemonic</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>mnemonic</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>menu_is_menubar</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <name>MNU_HIDDEN_CHAR</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>menu_is_popup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"PopUp"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>menu_is_toolbar</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ToolBar"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>menu_is_separator</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>menu_is_hidden</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MNU_HIDDEN_CHAR</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_emenu</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>saved_name</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E333: Menu path must lead to a menu item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>saved_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E334: Menu not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>||</operator> <name>restart_edit</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Insert"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_INSERT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Command"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_CMDLINE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>VISUAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Visual"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_VISUAL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>tpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Visual"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_VISUAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name><operator>.</operator><name>lnum</name></name><operator>)</operator> <operator>==</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tpos</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tpos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>tpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_NORMAL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>MENU_INDEX_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>exec_normal_cmd</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E335: Menu not defined for %s mode"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from_noamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt> 

}</block></struct></type> <name>menutrans_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>menutrans_ga</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_MENUTRANS</name><parameter_list>(<parameter><type><name>mt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>menutrans_T* _mt = (mt); xfree(_mt-&gt;from); xfree(_mt-&gt;from_noamp); xfree(_mt-&gt;to)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ex_menutranslate</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>from_noamp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menutrans_ga</name><operator>.</operator><name>ga_itemsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>menutrans_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>menutrans_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GA_DEEP_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>menutrans_ga</name></expr></argument>, <argument><expr><name>menutrans_T</name></expr></argument>, <argument><expr><name>FREE_MENUTRANS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_menutrans_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>menu_skip_part</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>menu_skip_part</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>from_noamp</name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>arg</name> <operator>&gt;=</operator> <name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>to</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>menu_translate_tab_and_shift</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>menu_translate_tab_and_shift</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>menu_unescape_name</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>menu_unescape_name</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>menutrans_T</name><modifier>*</modifier></type> <name>tp</name> <init>= <expr><call><name>GA_APPEND_VIA_PTR</name><argument_list>(<argument><expr><name>menutrans_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menutrans_ga</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>from_noamp</name></name> <operator>=</operator> <name>from_noamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menu_skip_part</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menutrans_lookup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>menutrans_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><operator>(</operator><name>menutrans_T</name> <operator>*</operator><operator>)</operator><name><name>menutrans_ga</name><operator>.</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>from</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char_u</name></type> <name>c</name> <init>= <expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>dname</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from_noamp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_unescape_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menu_translate_tab_and_shift</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_start</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;TAB&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></function>

</unit>
