<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\profile.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/profile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name></type> <name>prof_wait_time</name></decl>;</decl_stmt>

<function><type><name>proftime_T</name></type> <name>profile_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><call><name>os_hrtime</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_end</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm</name></decl></parameter>)</parameter_list> FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><call><name>profile_sub</name><argument_list>(<argument><expr><call><name>os_hrtime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile_msg</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm</name></decl></parameter>)</parameter_list> FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%10.6lf"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>profile_signed</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_setlimit</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>msec</name></decl></parameter>)</parameter_list> FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>profile_zero</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msec</name> <operator>&lt;=</operator> <operator>(</operator><name>INT64_MAX</name> <operator>/</operator> <literal type="number">1000000LL</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>nsec</name> <init>= <expr><operator>(</operator><name>proftime_T</name><operator>)</operator><name>msec</name> <operator>*</operator> <literal type="number">1000000ULL</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>os_hrtime</name><argument_list>()</argument_list></call> <operator>+</operator> <name>nsec</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>profile_passed_limit</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm</name></decl></parameter>)</parameter_list> FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>profile_cmp</name><argument_list>(<argument><expr><call><name>os_hrtime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_zero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> FUNC_ATTR_CONST

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_divide</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> FUNC_ATTR_CONST

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>profile_zero</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>proftime_T</name><operator>)</operator> <call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>tm</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_add</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm1</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name></type> <name>tm2</name></decl></parameter>)</parameter_list> FUNC_ATTR_CONST

<block>{<block_content>

<return>return <expr><name>tm1</name> <operator>+</operator> <name>tm2</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_sub</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm1</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name></type> <name>tm2</name></decl></parameter>)</parameter_list> FUNC_ATTR_CONST

<block>{<block_content>

<return>return <expr><name>tm1</name> <operator>-</operator> <name>tm2</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_self</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name></type> <name>total</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name></type> <name>children</name></decl></parameter>)</parameter_list>

FUNC_ATTR_CONST

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&lt;=</operator> <name>children</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>profile_sub</name><argument_list>(<argument><expr><call><name>profile_add</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_get_wait</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> FUNC_ATTR_PURE

<block>{<block_content>

<return>return <expr><name>prof_wait_time</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>profile_set_wait</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>wait</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>prof_wait_time</name> <operator>=</operator> <name>wait</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>proftime_T</name></type> <name>profile_sub_wait</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name></type> <name>tma</name></decl></parameter>)</parameter_list> FUNC_ATTR_PURE

<block>{<block_content>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm3</name> <init>= <expr><call><name>profile_sub</name><argument_list>(<argument><expr><call><name>profile_get_wait</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>profile_sub</name><argument_list>(<argument><expr><name>tma</name></expr></argument>, <argument><expr><name>tm3</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>profile_equal</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm1</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name></type> <name>tm2</name></decl></parameter>)</parameter_list> FUNC_ATTR_CONST

<block>{<block_content>

<return>return <expr><name>tm1</name> <operator>==</operator> <name>tm2</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>profile_signed</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm</name></decl></parameter>)</parameter_list>

FUNC_ATTR_CONST

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>tm</name> <operator>&lt;=</operator> <name>INT64_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>tm</name></expr> </then><else>: <expr><operator>-</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>UINT64_MAX</name> <operator>-</operator> <name>tm</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>profile_cmp</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tm1</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name></type> <name>tm2</name></decl></parameter>)</parameter_list> FUNC_ATTR_CONST

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tm1</name> <operator>==</operator> <name>tm2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>profile_signed</name><argument_list>(<argument><expr><name>tm2</name> <operator>-</operator> <name>tm1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name></type> <name>g_start_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name></type> <name>g_prev_time</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>time_push</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>now</name> <init>= <expr><call><name>profile_start</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <call><name>profile_sub</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>g_prev_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_prev_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>time_pop</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>tp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_prev_time</name> <operator>-=</operator> <name>tp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_diff</name><parameter_list>(<parameter><decl><type><name>proftime_T</name></type> <name>then</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name></type> <name>now</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>diff</name> <init>= <expr><call><name>profile_sub</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>then</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>time_fd</name></expr></argument>, <argument><expr><literal type="string">"%07.3lf"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>diff</name> <operator>/</operator> <literal type="number">1.0E6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>time_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>time_fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>g_prev_time</name> <operator>=</operator> <name>g_start_time</name> <operator>=</operator> <call><name>profile_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>time_fd</name></expr></argument>, <argument><expr><literal type="string">"\n\ntimes in msec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>time_fd</name></expr></argument>, <argument><expr><literal type="string">" clock self+sourced self: sourced script\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>time_fd</name></expr></argument>, <argument><expr><literal type="string">" clock elapsed: other lines\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_msg</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>time_msg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>proftime_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>time_fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>now</name> <init>= <expr><call><name>profile_start</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time_diff</name><argument_list>(<argument><expr><name>g_start_time</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>time_fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_diff</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>time_fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_diff</name><argument_list>(<argument><expr><name>g_prev_time</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_prev_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>time_fd</name></expr></argument>, <argument><expr><literal type="string">": %s\n"</literal></expr></argument>, <argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
