<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\charset.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option_defs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH_FOLD</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>utf_fold((sizeof(c) == sizeof(char)) ?((int)(uint8_t)(c)) :((int)(c)))</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>STR2NR_DEC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>STR2NR_BIN</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>, 

<decl><name>STR2NR_OCT</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>, 

<decl><name>STR2NR_HEX</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>, 

<decl><name>STR2NR_FORCE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,

<decl><name>STR2NR_ALL</name> <init>= <expr><name>STR2NR_BIN</name> <operator>|</operator> <name>STR2NR_OCT</name> <operator>|</operator> <name>STR2NR_HEX</name></expr></init></decl>,

}</block></enum></type> <name>ChStr2NrFlags</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"charset.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vim_isbreak</name><argument_list>(<argument><expr><name>int</name> <name>c</name></expr></argument>)</argument_list>

<name>REAL_FATTR_CONST</name>

<name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vim_isbreak</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>breakat_flags</name><index>[<expr><operator>(</operator><name>char_u</name><operator>)</operator><name>c</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

</unit>
