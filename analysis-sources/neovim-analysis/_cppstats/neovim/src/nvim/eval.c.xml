<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\eval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/change.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/channel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/encode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/executor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/gc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_session.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lua/executor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/shell.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/quickfix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/search.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/sign.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_MAXNEST</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOLOAD_CHAR</name></cpp:macro> <cpp:value>'#'</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_letunexp</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E18: Unexpected characters in :let"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_missbrac</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E111: Missing ']'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_funcexts</name> <init>= <expr><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E122: Function %s already exists, add ! to replace it"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_funcdict</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E717: Dictionary entry already exists"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_funcref</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E718: Funcref required"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_dictrange</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E719: Cannot use [:] with a Dictionary"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_nofunc</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E130: Unknown function: %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_illvar</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E461: Illegal variable name: %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_cannot_mod</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E995: Cannot modify existing variable"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_letwrong</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E734: Wrong variable type for %s="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>namespace_char</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"abglstvw"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScopeDictDictItem</name></type> <name>globvars_var</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>globvarht</name></cpp:macro> <cpp:value>globvardict.dv_hashtab</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>hashtab_T</name></type> <name>compat_hashtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name></type> <name>func_hashtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>eval_lavars_used</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ScopeDictDictItem</name></type> <name>sv_var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name></type> <name>sv_dict</name></decl>;</decl_stmt>

}</block></struct></type> <name>scriptvar_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>ga_scripts</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>scriptvar_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_SV</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((scriptvar_T **)ga_scripts.ga_data)[(id) - 1])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_VARS</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SCRIPT_SV(id)-&gt;sv_dict.dv_hashtab)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>echo_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_ABORT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_RANGE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_DICT</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_CLOSURE</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_DELETED</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_REMOVED</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_SANDBOX</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>ga_loaded</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCARG</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char_u **)(fp-&gt;uf_args.ga_data))[j]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCLINE</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char_u **)(fp-&gt;uf_lines.ga_data))[j]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_SHORT_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXVAR_CNT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<struct>struct <name>funccall_S</name> <block>{

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>linenr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>returned</name></decl>;</decl_stmt> 

<macro><name>TV_DICTITEM_STRUCT</name><argument_list>(<argument>VAR_SHORT_LEN + <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>fixvar</name><index>[<expr><name>FIXVAR_CNT</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dict_T</name></type> <name>l_vars</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ScopeDictDictItem</name></type> <name>l_vars_var</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>dict_T</name></type> <name>l_avars</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ScopeDictDictItem</name></type> <name>l_avars_var</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>list_T</name></type> <name>l_varlist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>listitem_T</name></type> <name><name>l_listitems</name><index>[<expr><name>MAX_FUNC_ARGS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>breakpoint</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dbg_tick</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>proftime_T</name></type> <name>prof_child</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>caller</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fc_refcount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fc_copyID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>fc_funcs</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>fi_semicolon</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fi_varcount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>listwatch_T</name></type> <name>fi_lw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>fi_list</name></decl>;</decl_stmt> 

}</block></struct></type> <name>forinfo_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VV_COMPAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VV_RO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VV_RO_SBX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VV</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[idx] = { .vv_name = name, .vv_di = { .di_tv = { .v_type = type }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = flags, }</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <name>vimvar</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vv_name</name></decl>;</decl_stmt> 

<macro><name>TV_DICTITEM_STRUCT</name><argument_list>(<argument><literal type="number">17</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>vv_di</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>vv_flags</name></decl>;</decl_stmt> 

}</block> <decl><name><name>vimvars</name><index>[]</index></name> <init>=

<expr><block>{

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_COUNT</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_COUNT1</name></expr></argument>, <argument><expr><literal type="string">"count1"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_PREVCOUNT</name></expr></argument>, <argument><expr><literal type="string">"prevcount"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_ERRMSG</name></expr></argument>, <argument><expr><literal type="string">"errmsg"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_WARNINGMSG</name></expr></argument>, <argument><expr><literal type="string">"warningmsg"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_STATUSMSG</name></expr></argument>, <argument><expr><literal type="string">"statusmsg"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_SHELL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"shell_error"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_THIS_SESSION</name></expr></argument>, <argument><expr><literal type="string">"this_session"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_VERSION</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_COMPAT</name><operator>+</operator><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_LNUM</name></expr></argument>, <argument><expr><literal type="string">"lnum"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO_SBX</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TERMRESPONSE</name></expr></argument>, <argument><expr><literal type="string">"termresponse"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FNAME</name></expr></argument>, <argument><expr><literal type="string">"fname"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_LANG</name></expr></argument>, <argument><expr><literal type="string">"lang"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_LC_TIME</name></expr></argument>, <argument><expr><literal type="string">"lc_time"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_CTYPE</name></expr></argument>, <argument><expr><literal type="string">"ctype"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_CC_FROM</name></expr></argument>, <argument><expr><literal type="string">"charconvert_from"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_CC_TO</name></expr></argument>, <argument><expr><literal type="string">"charconvert_to"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><literal type="string">"fname_in"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><literal type="string">"fname_out"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FNAME_NEW</name></expr></argument>, <argument><expr><literal type="string">"fname_new"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FNAME_DIFF</name></expr></argument>, <argument><expr><literal type="string">"fname_diff"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_CMDARG</name></expr></argument>, <argument><expr><literal type="string">"cmdarg"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FOLDSTART</name></expr></argument>, <argument><expr><literal type="string">"foldstart"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO_SBX</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FOLDEND</name></expr></argument>, <argument><expr><literal type="string">"foldend"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO_SBX</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FOLDDASHES</name></expr></argument>, <argument><expr><literal type="string">"folddashes"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO_SBX</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FOLDLEVEL</name></expr></argument>, <argument><expr><literal type="string">"foldlevel"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO_SBX</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_PROGNAME</name></expr></argument>, <argument><expr><literal type="string">"progname"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_SEND_SERVER</name></expr></argument>, <argument><expr><literal type="string">"servername"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_DYING</name></expr></argument>, <argument><expr><literal type="string">"dying"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_EXCEPTION</name></expr></argument>, <argument><expr><literal type="string">"exception"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_THROWPOINT</name></expr></argument>, <argument><expr><literal type="string">"throwpoint"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_STDERR</name></expr></argument>, <argument><expr><literal type="string">"stderr"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_REG</name></expr></argument>, <argument><expr><literal type="string">"register"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_CMDBANG</name></expr></argument>, <argument><expr><literal type="string">"cmdbang"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_INSERTMODE</name></expr></argument>, <argument><expr><literal type="string">"insertmode"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>, <argument><expr><literal type="string">"val"</literal></expr></argument>, <argument><expr><name>VAR_UNKNOWN</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_KEY</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name>VAR_UNKNOWN</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_PROFILING</name></expr></argument>, <argument><expr><literal type="string">"profiling"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FCS_REASON</name></expr></argument>, <argument><expr><literal type="string">"fcs_reason"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FCS_CHOICE</name></expr></argument>, <argument><expr><literal type="string">"fcs_choice"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_BEVAL_BUFNR</name></expr></argument>, <argument><expr><literal type="string">"beval_bufnr"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_BEVAL_WINNR</name></expr></argument>, <argument><expr><literal type="string">"beval_winnr"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_BEVAL_WINID</name></expr></argument>, <argument><expr><literal type="string">"beval_winid"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_BEVAL_LNUM</name></expr></argument>, <argument><expr><literal type="string">"beval_lnum"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_BEVAL_COL</name></expr></argument>, <argument><expr><literal type="string">"beval_col"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_BEVAL_TEXT</name></expr></argument>, <argument><expr><literal type="string">"beval_text"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_SCROLLSTART</name></expr></argument>, <argument><expr><literal type="string">"scrollstart"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_SWAPNAME</name></expr></argument>, <argument><expr><literal type="string">"swapname"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_SWAPCHOICE</name></expr></argument>, <argument><expr><literal type="string">"swapchoice"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_SWAPCOMMAND</name></expr></argument>, <argument><expr><literal type="string">"swapcommand"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_CHAR</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_MOUSE_WIN</name></expr></argument>, <argument><expr><literal type="string">"mouse_win"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_MOUSE_WINID</name></expr></argument>, <argument><expr><literal type="string">"mouse_winid"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_MOUSE_LNUM</name></expr></argument>, <argument><expr><literal type="string">"mouse_lnum"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_MOUSE_COL</name></expr></argument>, <argument><expr><literal type="string">"mouse_col"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_OP</name></expr></argument>, <argument><expr><literal type="string">"operator"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_SEARCHFORWARD</name></expr></argument>, <argument><expr><literal type="string">"searchforward"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_HLSEARCH</name></expr></argument>, <argument><expr><literal type="string">"hlsearch"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_OLDFILES</name></expr></argument>, <argument><expr><literal type="string">"oldfiles"</literal></expr></argument>, <argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_WINDOWID</name></expr></argument>, <argument><expr><literal type="string">"windowid"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO_SBX</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_PROGPATH</name></expr></argument>, <argument><expr><literal type="string">"progpath"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_COMPLETED_ITEM</name></expr></argument>, <argument><expr><literal type="string">"completed_item"</literal></expr></argument>, <argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_OPTION_NEW</name></expr></argument>, <argument><expr><literal type="string">"option_new"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_OPTION_OLD</name></expr></argument>, <argument><expr><literal type="string">"option_old"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>, <argument><expr><literal type="string">"option_type"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_ERRORS</name></expr></argument>, <argument><expr><literal type="string">"errors"</literal></expr></argument>, <argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_MSGPACK_TYPES</name></expr></argument>, <argument><expr><literal type="string">"msgpack_types"</literal></expr></argument>, <argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_EVENT</name></expr></argument>, <argument><expr><literal type="string">"event"</literal></expr></argument>, <argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_FALSE</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name>VAR_SPECIAL</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TRUE</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name>VAR_SPECIAL</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_NULL</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><name>VAR_SPECIAL</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV__NULL_LIST</name></expr></argument>, <argument><expr><literal type="string">"_null_list"</literal></expr></argument>, <argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV__NULL_DICT</name></expr></argument>, <argument><expr><literal type="string">"_null_dict"</literal></expr></argument>, <argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_VIM_DID_ENTER</name></expr></argument>, <argument><expr><literal type="string">"vim_did_enter"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TESTING</name></expr></argument>, <argument><expr><literal type="string">"testing"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TYPE_NUMBER</name></expr></argument>, <argument><expr><literal type="string">"t_number"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TYPE_STRING</name></expr></argument>, <argument><expr><literal type="string">"t_string"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TYPE_FUNC</name></expr></argument>, <argument><expr><literal type="string">"t_func"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TYPE_LIST</name></expr></argument>, <argument><expr><literal type="string">"t_list"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TYPE_DICT</name></expr></argument>, <argument><expr><literal type="string">"t_dict"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TYPE_FLOAT</name></expr></argument>, <argument><expr><literal type="string">"t_float"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_TYPE_BOOL</name></expr></argument>, <argument><expr><literal type="string">"t_bool"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_ECHOSPACE</name></expr></argument>, <argument><expr><literal type="string">"echospace"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_EXITING</name></expr></argument>, <argument><expr><literal type="string">"exiting"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>VV</name><argument_list>(<argument><expr><name>VV_LUA</name></expr></argument>, <argument><expr><literal type="string">"lua"</literal></expr></argument>, <argument><expr><name>VAR_PARTIAL</name></expr></argument>, <argument><expr><name>VV_RO</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</struct>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VV</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_type</name></cpp:macro> <cpp:value>vv_di.di_tv.v_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_nr</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_number</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_special</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_special</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_float</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_str</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_string</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_list</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_list</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_dict</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_dict</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_partial</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_partial</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_tv</name></cpp:macro> <cpp:value>vv_di.di_tv</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScopeDictDictItem</name></type> <name>vimvars_var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>partial_T</name> <modifier>*</modifier></type><name>vvlua_partial</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vimvarht</name></cpp:macro> <cpp:value>vimvardict.dv_hashtab</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>last_timer_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>PMap</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>timers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>msgpack_type_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>kMPNil</name></expr>]</index> <operator>=</operator> <literal type="string">"nil"</literal></expr>,

<expr><index>[<expr><name>kMPBoolean</name></expr>]</index> <operator>=</operator> <literal type="string">"boolean"</literal></expr>,

<expr><index>[<expr><name>kMPInteger</name></expr>]</index> <operator>=</operator> <literal type="string">"integer"</literal></expr>,

<expr><index>[<expr><name>kMPFloat</name></expr>]</index> <operator>=</operator> <literal type="string">"float"</literal></expr>,

<expr><index>[<expr><name>kMPString</name></expr>]</index> <operator>=</operator> <literal type="string">"string"</literal></expr>,

<expr><index>[<expr><name>kMPBinary</name></expr>]</index> <operator>=</operator> <literal type="string">"binary"</literal></expr>,

<expr><index>[<expr><name>kMPArray</name></expr>]</index> <operator>=</operator> <literal type="string">"array"</literal></expr>,

<expr><index>[<expr><name>kMPMap</name></expr>]</index> <operator>=</operator> <literal type="string">"map"</literal></expr>,

<expr><index>[<expr><name>kMPExt</name></expr>]</index> <operator>=</operator> <literal type="string">"ext"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>list_T</name> <modifier>*</modifier></type><name><name>eval_msgpack_type_lists</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>kMPNil</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

<expr><index>[<expr><name>kMPBoolean</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

<expr><index>[<expr><name>kMPInteger</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

<expr><index>[<expr><name>kMPFloat</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

<expr><index>[<expr><name>kMPString</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

<expr><index>[<expr><name>kMPBinary</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

<expr><index>[<expr><name>kMPArray</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

<expr><index>[<expr><name>kMPMap</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

<expr><index>[<expr><name>kMPExt</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>varnumber_T</name></type> <name>num_divide</name><parameter_list>(<parameter><decl><type><name>varnumber_T</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name></type> <name>n2</name></decl></parameter>)</parameter_list>

FUNC_ATTR_CONST FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VARNUMBER_MIN</name></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><name>VARNUMBER_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VARNUMBER_MAX</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>n1</name> <operator>/</operator> <name>n2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>varnumber_T</name></type> <name>num_modulus</name><parameter_list>(<parameter><decl><type><name>varnumber_T</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name></type> <name>n2</name></decl></parameter>)</parameter_list>

FUNC_ATTR_CONST FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>n2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>n1</name> <operator>%</operator> <name>n2</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>eval_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_VERSION</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>VIM_VERSION_100</name></expr>;</expr_stmt>

<expr_stmt><expr><name>timers</name> <operator>=</operator> <call><call><name>pmap_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vimvar</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>globvars_var</name></expr></argument>, <argument><expr><name>VAR_DEF_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvardict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vimvars_var</name></expr></argument>, <argument><expr><name>VAR_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvardict</name><operator>.</operator><name>dv_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compat_hashtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func_hashtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>vimvars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_name</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_flags</name></name> <operator>&amp;</operator> <name>VV_RO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_flags</name></name> <operator>&amp;</operator> <name>VV_RO_SBX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO_SBX</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_type</name></name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_flags</name></name> <operator>&amp;</operator> <name>VV_COMPAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compat_hashtab</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_VERSION</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>VIM_VERSION_100</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>msgpack_types_dict</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>msgpack_type_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>type_list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_list_set_lock</name><argument_list>(<argument><expr><name>type_list</name></expr></argument>, <argument><expr><name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name>type_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>di</name> <init>= <expr><call><name>tv_dict_item_alloc</name><argument_list>(<argument><expr><name><name>msgpack_type_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DI_FLAGS_RO</name><operator>|</operator><name>DI_FLAGS_FIX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name> <operator>=</operator> <operator>(</operator><name>typval_T</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>,

<expr><operator>.</operator><name>vval</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>v_list</name> <operator>=</operator> <name>type_list</name></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval_msgpack_type_lists</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>type_list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><name>msgpack_types_dict</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>msgpack_types_dict</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_dict</name><argument_list>(<argument><expr><name>VV_MSGPACK_TYPES</name></expr></argument>, <argument><expr><name>msgpack_types_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_dict</name><argument_list>(<argument><expr><name>VV_COMPLETED_ITEM</name></expr></argument>, <argument><expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>v_event</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v_event</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_dict</name><argument_list>(<argument><expr><name>VV_EVENT</name></expr></argument>, <argument><expr><name>v_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_list</name><argument_list>(<argument><expr><name>VV_ERRORS</name></expr></argument>, <argument><expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenUnknown</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_STDERR</name></expr></argument>, <argument><expr><name>CHAN_STDERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_SEARCHFORWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_HLSEARCH</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_COUNT1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_NUMBER</name></expr></argument>, <argument><expr><name>VAR_TYPE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_STRING</name></expr></argument>, <argument><expr><name>VAR_TYPE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_FUNC</name></expr></argument>, <argument><expr><name>VAR_TYPE_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_LIST</name></expr></argument>, <argument><expr><name>VAR_TYPE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_DICT</name></expr></argument>, <argument><expr><name>VAR_TYPE_DICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_FLOAT</name></expr></argument>, <argument><expr><name>VAR_TYPE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_BOOL</name></expr></argument>, <argument><expr><name>VAR_TYPE_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_special</name><argument_list>(<argument><expr><name>VV_FALSE</name></expr></argument>, <argument><expr><name>kSpecialVarFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_special</name><argument_list>(<argument><expr><name>VV_TRUE</name></expr></argument>, <argument><expr><name>kSpecialVarTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_special</name><argument_list>(<argument><expr><name>VV_NULL</name></expr></argument>, <argument><expr><name>kSpecialVarNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_special</name><argument_list>(<argument><expr><name>VV_EXITING</name></expr></argument>, <argument><expr><name>kSpecialVarNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_ECHOSPACE</name></expr></argument>, <argument><expr><name>sc_col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_LUA</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vvlua_partial</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>partial_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_LUA</name></expr>]</index></name><operator>.</operator><name>vv_partial</name> <operator>=</operator> <name>vvlua_partial</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vvlua_partial</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vvlua_partial</name><operator>-&gt;</operator><name>pt_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_reg_var</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>eval_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vimvar</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>vimvars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_unref</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vv_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compat_hashtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_scriptnames</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_locales</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vars_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_loaded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vars_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>SCRIPT_SV</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_scripts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>garbage_collect</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_all_functions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>func_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name><operator>)</operator><operator>-&gt;</operator><name><name>func</name><operator>-&gt;</operator><name>uf_name</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>linenr_T</name> <modifier>*</modifier></type><name>func_breakpoint</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name><operator>)</operator><operator>-&gt;</operator><name>breakpoint</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name> <modifier>*</modifier></type><name>func_dbg_tick</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name><operator>)</operator><operator>-&gt;</operator><name>dbg_tick</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>func_level</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name><operator>)</operator><operator>-&gt;</operator><name>level</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>current_funccal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>previous_funccal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>current_func_returned</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>current_funccal</name><operator>-&gt;</operator><name>returned</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_internal_string_var</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>typval_T</name></type> <name>tv</name> <init>= <expr><block>{

<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>,

<expr><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>value</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>typval_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>lval_T</name> <modifier>*</modifier></type><name>redir_lval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>redir_ga</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>redir_endp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>redir_varname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>var_redir_start</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>append</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_emsg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>redir_varname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redir_lval</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lval_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redir_endp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>get_lval</name><argument_list>(<argument><expr><name>redir_varname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>redir_lval</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_endp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>redir_lval</name><operator>-&gt;</operator><name>ll_name</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>*</operator><name>redir_endp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_endp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>redir_endp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>redir_endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>var_redir_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>save_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>append</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_var_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>, <argument><expr><name>redir_endp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_var_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>, <argument><expr><name>redir_endp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>save_emsg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>redir_endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>var_redir_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_redir_str</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_lval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>value_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_ga</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>redir_ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>redir_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>redir_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_redir_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_lval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>redir_endp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name><name>redir_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>redir_endp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>get_lval</name><argument_list>(<argument><expr><name>redir_varname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>redir_lval</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_endp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>redir_lval</name><operator>-&gt;</operator><name>ll_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_var_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>, <argument><expr><name>redir_endp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>redir_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>redir_varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>eval_charconvert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>enc_from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>enc_to</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname_from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>err</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CC_FROM</name></expr></argument>, <argument><expr><name>enc_from</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CC_TO</name></expr></argument>, <argument><expr><name>enc_to</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>fname_from</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>fname_to</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval_to_bool</name><argument_list>(<argument><expr><name>p_ccv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CC_FROM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CC_TO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>eval_printexpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>err</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CMDARG</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval_to_bool</name><argument_list>(<argument><expr><name>p_pexpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CMDARG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>eval_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>origfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>newfile</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>outfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>err</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>origfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_NEW</name></expr></argument>, <argument><expr><name>newfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eval_to_bool</name><argument_list>(<argument><expr><name>p_dex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_NEW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>eval_patch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>origfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>difffile</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>outfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>err</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>origfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_DIFF</name></expr></argument>, <argument><expr><name>difffile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eval_to_bool</name><argument_list>(<argument><expr><name>p_pex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_DIFF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>eval_to_bool</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>error</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextcmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_skip</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval0</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>nextcmd</name></expr></argument>, <argument><expr><operator>!</operator><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_skip</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval1_emsg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>start</name> <init>= <expr><operator>*</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>did_emsg_before</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>called_emsg_before</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name>did_emsg</name> <operator>==</operator> <name>did_emsg_before</name>

<operator>&amp;&amp;</operator> <name>called_emsg</name> <operator>==</operator> <name>called_emsg_before</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invexpr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

<function><type><name>int</name></type> <name>eval_expr_typval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2<operator>,</operator> 4</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>partial</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><call><name>partial_name</name><argument_list>(<argument><expr><name>partial</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1_emsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invexpr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block>

<function><type><name>bool</name></type> <name>eval_expr_to_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>argv</name></decl>, <decl><type ref="prev"/><name>rettv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval_expr_typval</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>res</name> <init>= <expr><operator>(</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eval_to_string_skip</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>arg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>nextcmd</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>bool</name> <name>skip</name></expr></argument>)</argument_list>

<name>FUNC_ATTR_MALLOC</name> <name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list> <name>FUNC_ATTR_WARN_UNUSED_RESULT</name>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_skip</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval0</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>nextcmd</name></expr></argument>, <argument><expr><operator>!</operator><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_skip</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>skip_expr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>eval1</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>eval_to_string</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextcmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>convert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval0</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>nextcmd</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>convert</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>convert</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><name>NUMBUFLEN</name></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>eval_to_string_safe</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextcmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_sandbox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>save_funccalp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_funccalp</name> <operator>=</operator> <call><name>save_funccal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>textlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>nextcmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>textlock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_funccal</name><argument_list>(<argument><expr><name>save_funccalp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>varnumber_T</name></type> <name>eval_to_number</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_vimvar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>save_tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>save_tv</name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_vimvar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>save_tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name> <operator>=</operator> <operator>*</operator><name>save_tv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"restore_vimvar()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>find_win_for_curbuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>wininfo_T</name> <modifier>*</modifier></type><name>wip</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_wininfo</name></name></expr></init></decl>;</init> <condition><expr><name>wip</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wip</name> <operator>=</operator> <name><name>wip</name><operator>-&gt;</operator><name>wi_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wip</name><operator>-&gt;</operator><name>wi_win</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>wip</name><operator>-&gt;</operator><name>wi_win</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>list_T</name> <modifier>*</modifier></type><name>eval_spell_expr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>badword</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>save_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_vimvar</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_VAL</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_VAL</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>badword</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>restore_vimvar</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_spellword</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5700: Expression from 'spellsuggest' must yield lists with "</literal>

<literal type="string">"exactly two values"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_word</name> <operator>=</operator> <call><name>tv_list_find_str</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ret_word</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>call_vim_function</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>

)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>doesrange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="string">"v:lua."</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>func</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>check_luafunc_name</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>func</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>vvlua_partial</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>call_func</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>doesrange</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>varnumber_T</name></type> <name>call_func_retnr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_vim_function</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>call_func_retstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_MALLOC

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_vim_function</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>func</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>retval</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>call_func_retlist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_vim_function</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>save_funccal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><name>current_funccal</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>restore_funccal</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vfc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>vfc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>prof_child_enter</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><name>current_funccal</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_profiling</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name> <operator>=</operator> <call><name>profile_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>script_prof_save</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>prof_child_exit</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><name>current_funccal</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_profiling</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name> <operator>=</operator> <call><name>profile_end</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name> <operator>=</operator> <call><name>profile_sub_wait</name><argument_list>(<argument><expr><operator>*</operator><name>tm</name></expr></argument>, <argument><expr><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tm_children</name></name> <operator>=</operator>

<call><name>profile_add</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tm_children</name></name></expr></argument>, <argument><expr><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tml_children</name></name> <operator>=</operator>

<call><name>profile_add</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tml_children</name></name></expr></argument>, <argument><expr><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>script_prof_restore</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>eval_foldexpr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name> <init>= <expr><call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"foldexpr"</literal></expr></argument>,

<argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>textlock</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval0</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name> <operator>||</operator> <name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>textlock</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_const</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ex_let_const</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>list_T</name> <modifier>*</modifier></type>

<name>heredoc_get</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>marker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marker_indent_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_indent_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text_indent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E991: cannot use =&lt;&lt; here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"trim"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cmd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>cmd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>marker_indent_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>text_indent_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>islower</name><argument_list>(<argument><expr><operator>*</operator><name>marker</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E221: Marker cannot start with lower case letter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E172: Missing marker"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ti</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>theline</name> <init>= <expr><call><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>theline</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E990: Missing end marker '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>marker_indent_len</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>theline</name></expr></argument>, <argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr></argument>, <argument><expr><name>marker_indent_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <name>marker_indent_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name>theline</name> <operator>+</operator> <name>mi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text_indent_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>theline</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>theline</name></expr>;</expr_stmt>

<expr_stmt><expr><name>text_indent_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>text_indent_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>text_indent</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>theline</name></expr></argument>, <argument><expr><name>text_indent_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text_indent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ti</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ti</name> <operator>&lt;</operator> <name>text_indent_len</name></expr>;</condition> <incr><expr><name>ti</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>theline</name><index>[<expr><name>ti</name></expr>]</index></name> <operator>!=</operator> <name><name>text_indent</name><index>[<expr><name>ti</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>theline</name> <operator>+</operator> <name>ti</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>text_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_let</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ex_let_const</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ex_let_const</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_const</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>var_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>semicolon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>argend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>argend</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>skip_var_list</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>semicolon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argend</name> <operator>&gt;</operator> <name>arg</name> <operator>&amp;&amp;</operator> <name><name>argend</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>argend</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>argend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>expr</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%."</literal></expr></argument>, <argument><expr><operator>*</operator><name>expr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator> <operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="string">"..="</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>list_arg_vars</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>list_glob_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_buf_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_win_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_tab_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_script_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_func_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_vim_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>heredoc_get</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>expr</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_set_ret</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ex_let_vars</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>semicolon</name></expr></argument>, <argument><expr><name>var_count</name></expr></argument>,

<argument><expr><name>is_const</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>expr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%."</literal></expr></argument>, <argument><expr><operator>*</operator><name>expr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>expr</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>expr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>eval0</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>emsg_skip</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ex_let_vars</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>semicolon</name></expr></argument>, <argument><expr><name>var_count</name></expr></argument>,

<argument><expr><name>is_const</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ex_let_vars</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>semicolon</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>var_count</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>is_const</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>nextchars</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>ltv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ex_let_one</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>is_const</name></expr></argument>, <argument><expr><name>nextchars</name></expr></argument>, <argument><expr><name>nextchars</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>l</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>semicolon</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>var_count</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E687: Less targets than List items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var_count</name> <operator>-</operator> <name>semicolon</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E688: More targets than List items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>rest_len</name> <init>= <expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>ex_let_one</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>is_const</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">",;]"</literal></expr></argument>, <argument><expr><name>nextchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rest_len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rest_list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>rest_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_tv</name><argument_list>(<argument><expr><name>rest_list</name></expr></argument>, <argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>ltv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ltv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ltv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>rest_list</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name>rest_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>ex_let_one</name><argument_list>(<argument><expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ltv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>is_const</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"]"</literal></expr></argument>, <argument><expr><name>nextchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ltv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"ex_let_vars()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>skip_var_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>var_count</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>semicolon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skip_var_one</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>var_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>semicolon</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Double ; in list of variables"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>semicolon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>skip_var_one</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>skip_var_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>find_name_end</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr> ?</condition><then> <expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>arg</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FNE_INCL_BR</name> <operator>|</operator> <name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_hashtable_vars</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>empty</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>todo</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IOSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>empty</name> <operator>||</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name>

<operator>||</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>list_one_var</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_glob_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_buf_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="string">"b:"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_win_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="string">"w:"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_tab_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curtab</name><operator>-&gt;</operator><name>tp_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="string">"t:"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_vim_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><literal type="string">"v:"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_script_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_func_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current_funccal</name><operator>-&gt;</operator><name>l_vars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="string">"l:"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>list_arg_vars</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>find_name_end</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>FNE_INCL_BR</name> <operator>|</operator> <name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>name_start</name> <operator>=</operator> <name>name</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_name_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_var_tv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg_subsc</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>handle_subscript</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>arg_subsc</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> <expr_stmt><expr><call><name>list_glob_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><call><name>list_buf_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><call><name>list_win_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><call><name>list_tab_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><call><name>list_vim_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><call><name>list_script_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><call><name>list_func_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E738: Can't list variables for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><call><name>encode_tv2echo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>used_name</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>arg</name> <operator>==</operator> <name>arg_subsc</name></expr>

?</condition><then> <expr><name>name</name></expr>

</then><else>: <expr><name>name_start</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>name_size</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>used_name</name> <operator>==</operator> <name>tofree</name></expr>

?</condition><then> <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>used_name</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><name>arg</name> <operator>-</operator> <name>used_name</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_one_var_a</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>used_name</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>,

<argument><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>s</name></expr></else></ternary></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>ex_let_one</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_const</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>endchars</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>op</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E996: Cannot lock an environment variable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_env_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%"</literal></expr></argument>, <argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letwrong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>endchars</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>endchars</name></expr></argument>, <argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letunexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>c1</name> <init>= <expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vim_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>tofree</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_homedir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>didset_vim</name> <operator>&amp;&amp;</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>didset_vim</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>didset_vimruntime</name>

<operator>&amp;&amp;</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"VIMRUNTIME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>didset_vimruntime</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E996: Cannot lock an option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>find_option_end</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name>endchars</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>endchars</name></expr></argument>, <argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letunexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>numval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stringval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>c1</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_type</name> <operator>=</operator> <call><name>get_option_value</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numval</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>stringval</name></expr></argument>,

<argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_type</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>opt_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letwrong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<switch>switch <condition>(<expr><operator>*</operator><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>numval</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>numval</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>numval</name> <operator>*</operator> <name>n</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'/'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>num_divide</name><argument_list>(<argument><expr><name>numval</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>num_modulus</name><argument_list>(<argument><expr><name>numval</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>stringval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>oldstringval</name> <init>= <expr><name>stringval</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stringval</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>concat_str</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>stringval</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>oldstringval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>stringval</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>stringval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E996: Cannot lock a register"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%"</literal></expr></argument>, <argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letwrong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>endchars</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>endchars</name></expr></argument>, <argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letunexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_reg_contents</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><operator>*</operator><name>arg</name></expr></else></ternary></expr></argument>, <argument><expr><name>kGRegExprSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptofree</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>ptofree</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_reg_contents</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><operator>*</operator><name>arg</name></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ptofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lval_T</name></type> <name>lv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><call><name>get_lval</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>endchars</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>endchars</name></expr></argument>, <argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letunexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_var_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>is_const</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>arg_end</name></expr>;</return>

</block_content>}</block>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_lval</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rettv</name></decl></parameter>,

<parameter><decl><type><name>lval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>unlet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>skip</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fne_flags</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 3</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty1</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>ni</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quiet</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>GLV_QUIET</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lval_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>find_name_end</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>FNE_INCL_BR</name> <operator>|</operator> <name>fne_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>find_name_end</name><argument_list>(<argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>expr_start</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>expr_end</name></expr></argument>,

<argument><expr><name>fne_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unlet</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_exp_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>make_expanded_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>expr_start</name></expr></argument>, <argument><expr><name>expr_end</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_exp_name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_exp_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>-</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GLV_READ_ONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>ht</name></expr></else></ternary></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>GLV_NO_AUTOLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E121: Undefined variable: %.*s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var1</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name> <operator>&amp;&amp;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name>

<operator>&amp;&amp;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E689: Can only index a List or Dictionary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E708: [:] must come last"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>key</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E713: Cannot use empty key after ."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>key</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>empty1</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>empty1</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tv_check_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name>

<operator>||</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E709: [:] requires a List value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tv_check_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_missbrac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name></name> <operator>=</operator> <call><name>tv_dict_find</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name><operator>-&gt;</operator><name>dv_scope</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prevval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wrong</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prevval</name> <operator>=</operator> <name><name>key</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prevval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>wrong</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name><operator>-&gt;</operator><name>dv_scope</name></name> <operator>==</operator> <name>VAR_DEF_SCOPE</name>

<operator>&amp;&amp;</operator> <call><name>tv_is_func</name><argument_list>(<argument><expr><operator>*</operator><name>rettv</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>var_check_func_name</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>!</operator><call><name>valid_varname</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>key</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>prevval</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wrong</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>tv_is_luafunc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>rettv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><name>e_illvar</name></expr></argument>, <argument><expr><literal type="string">"v:['lua']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name> <operator>==</operator> <operator>&amp;</operator><name>vimvardict</name>

<operator>||</operator> <operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name> <operator>==</operator> <call><name>get_funccal_args_ht</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_illvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>unlet</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_newkey</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_newkey</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GLV_READ_ONLY</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>var_check_ro</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>empty1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>=</operator> <call><name>tv_list_find</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>=</operator> <call><name>tv_list_find</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listidx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ni</name> <operator>=</operator> <call><name>tv_list_find</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ni</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listidx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>=</operator> <call><name>tv_list_idx_of_item</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name> <operator>=</operator> <call><name>tv_list_idx_of_item</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>&lt;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listidx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block>

<function><type><name>void</name></type> <name>clear_lval</name><parameter_list>(<parameter><decl><type><name>lval_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_exp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_var_lval</name><parameter_list>(<parameter><decl><type><name>lval_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_const</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>*</operator><name>endp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_cannot_mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_var_tv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>di</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>di</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>var_check_ro</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>,

<argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>,

<argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>eexe_mod_op</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_var_const</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>is_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tv_check_lock</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_newkey</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_lock</name></name></expr>

</then><else>: <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>ll_li</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ll_n1</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E996: Cannot lock a range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ri</name> <operator>=</operator> <call><name>tv_list_first</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>ri</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ll_li</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_check_lock</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>ll_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_lock</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>,

<argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>&amp;&amp;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>==</operator> <name>ll_n1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ll_li</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name>ll_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ll_n1</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ri</name> <operator>=</operator> <call><name>tv_list_first</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ri</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eexe_mod_op</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>&amp;&amp;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>==</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_number</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>=</operator> <call><name>tv_list_last</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E710: List value has more items than target"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><ternary><condition><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name></expr>

?</condition><then> <expr><operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>

</then><else>: <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name> <operator>!=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E711: List value has not enough items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>oldtv</name> <init>= <expr><name>TV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>watched</name> <init>= <expr><call><name>tv_dict_is_watched</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E996: Cannot lock a list or dict"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_newkey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letwrong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>tv_dict_item_alloc</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>watched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eexe_mod_op</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>notify</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>=</operator> <operator>*</operator><name>rettv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_init</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>notify</name>:</label>

<if_stmt><if>if <condition>(<expr><name>watched</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oldtv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_newkey</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_watcher_notify</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_newkey</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di_</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>di_</name><operator>-&gt;</operator><name>di_key</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_watcher_notify</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>di_</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>eval_for_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextcmdp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>forinfo_T</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>forinfo_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>skip_var_list</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fi</name><operator>-&gt;</operator><name>fi_varcount</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fi</name><operator>-&gt;</operator><name>fi_semicolon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>fi</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'i'</literal> <operator>||</operator> <name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>||</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>expr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E690: Missing \"in\" after :for"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fi</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval0</name><argument_list>(<argument><expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>nextcmdp</name></expr></argument>, <argument><expr><operator>!</operator><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fi</name><operator>-&gt;</operator><name>fi_list</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_watch_add</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fi</name><operator>-&gt;</operator><name>fi_lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fi</name><operator>-&gt;</operator><name>fi_lw</name><operator>.</operator><name>lw_item</name></name> <operator>=</operator> <call><name>tv_list_first</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>fi</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>next_for_item</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fi_void</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>forinfo_T</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><operator>(</operator><name>forinfo_T</name> <operator>*</operator><operator>)</operator><name>fi_void</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>fi</name><operator>-&gt;</operator><name>fi_lw</name><operator>.</operator><name>lw_item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fi</name><operator>-&gt;</operator><name>fi_lw</name><operator>.</operator><name>lw_item</name></name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>fi_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>ex_let_vars</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>fi_semicolon</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>fi_varcount</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_for_info</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fi_void</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>forinfo_T</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><operator>(</operator><name>forinfo_T</name> <operator>*</operator><operator>)</operator><name>fi_void</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fi</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fi</name><operator>-&gt;</operator><name>fi_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_watch_remove</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>fi_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fi</name><operator>-&gt;</operator><name>fi_lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_unref</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>fi_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_context_for_expression</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>cmdidx_T</name></type> <name>cmdidx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>got_eq</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdidx</name> <operator>==</operator> <name>CMD_let</name> <operator>||</operator> <name>cmdidx</name> <operator>==</operator> <name>CMD_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_USER_VARS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strpbrk</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\"'+-*/%.=!?~|&amp;$([&lt;&gt;,#"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>arg</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <ternary><condition><expr><name>cmdidx</name> <operator>==</operator> <name>CMD_call</name></expr> ?</condition><then> <expr><name>EXPAND_FUNCTIONS</name></expr>

</then><else>: <expr><name>EXPAND_EXPRESSION</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\"'+-*/%.=!?~|&amp;$([&lt;&gt;,#"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <ternary><condition><expr><name>cmdidx</name> <operator>!=</operator> <name>CMD_let</name> <operator>||</operator> <name>got_eq</name></expr>

?</condition><then> <expr><name>EXPAND_EXPRESSION</name></expr> </then><else>: <expr><name>EXPAND_NOTHING</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_SETTINGS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_ENV_VARS</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_eq</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_EXPRESSION</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal>

<operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_EXPRESSION</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FUNCTIONS</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmdidx</name> <operator>!=</operator> <name>CMD_let</name> <operator>||</operator> <name>got_eq</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content> 

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name><operator>)</operator> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content> 

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name><operator>)</operator> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_EXPRESSION</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_COMMANDS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_EXPRESSION</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_EXPRESSION</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>arg</name><operator>)</operator> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_call</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>startarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>doesrange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funcdict_T</name></type> <name>fudi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_skip</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval0</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>emsg_skip</name><operator>--</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <call><name>trans_function_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TFN_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fudi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>partial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>deref_func_name</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>tofree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>partial</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>partial</name></expr></else></ternary></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>startarg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>startarg</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E107: Missing parentheses: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>startarg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_func_tv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doesrange</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>, <argument><expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>handle_subscript</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>doesrange</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>failed</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_trylevel</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_unlet</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ex_unletlock</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_lockvar</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deep</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deep</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deep</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ex_unletlock</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ex_unletlock</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>argstart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>argstart</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lval_T</name></type> <name>lv</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>++</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_env_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_unsetenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name_end</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>get_lval</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>||</operator> <name>error</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>name_end</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>name_end</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name_end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>||</operator> <name>error</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_unlet</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_unlet_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>name_end</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_lock_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>name_end</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_lockvar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_unlet_var</name><parameter_list>(<parameter><decl><type><name>lval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>*</operator><name>name_end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>name_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_unlet</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>name_end</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>tv_check_lock</name><argument_list>(<argument><expr><call><name>tv_list_locked</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>,

<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>,

<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>first_li</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>last_li</name> <init>= <expr><name>first_li</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>li</name> <init>= <expr><call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_check_lock</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_lock</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>,

<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>&amp;&amp;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>&lt;</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>last_li</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tv_list_remove_items</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name>first_li</name></expr></argument>, <argument><expr><name>last_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_item_remove</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>watched</name> <init>= <expr><call><name>tv_dict_is_watched</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>oldtv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>watched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_dict_item_remove</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>watched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_watcher_notify</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_unlet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>find_var_ht_dict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>varname</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>globvarht</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name>globvardict</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>current_funccal</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>ht</name> <operator>==</operator> <operator>&amp;</operator><name><name>current_funccal</name><operator>-&gt;</operator><name>l_vars</name><operator>.</operator><name>dv_hashtab</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name><name>current_funccal</name><operator>-&gt;</operator><name>l_vars</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>compat_hashtab</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name>vimvardict</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>di</name> <init>= <expr><call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"do_unlet()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><call><name>hash_find</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>find_hi_in_scoped_ht</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>di</name> <init>= <expr><call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_check_fixed</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>var_check_ro</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>oldtv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>watched</name> <init>= <expr><call><name>tv_dict_is_watched</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>watched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>delete_var</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>watched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_watcher_notify</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>forceit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E108: No such variable: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_lock_var</name><parameter_list>(<parameter><decl><type><name>lval_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>deep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>deep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>di</name> <init>= <expr><call><name>find_var</name><argument_list>(

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name_len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DI_FLAGS_FIX</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name>

<operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E940: Cannot lock or unlock variable %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DI_FLAGS_LOCK</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DI_FLAGS_LOCK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_item_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>li</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>||</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>&gt;=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_item_lock</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_item_lock</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_item_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>del_menutrans_vars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hash_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>HASHTAB_ITER</name><argument_list>(<argument>&amp;globvarht</argument>, <argument>hi</argument>, <argument>{

if (STRNCMP(hi-&gt;hi_key, <literal type="string">"menutrans_"</literal>, <literal type="number">10</literal>) == <literal type="number">0</literal>) {

delete_var(&amp;globvarht, hi);

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>hash_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>varnamebuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>varnamebuflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>cat_prefix_varname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>varnamebuflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>varnamebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>varnamebuf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>varnamebuflen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>varnamebuf</name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varnamebuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>varnamebuf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>varnamebuf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_user_var_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>gdone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>bdone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>wdone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>tdone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>vidx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gdone</name> <operator>=</operator> <name>bdone</name> <operator>=</operator> <name>wdone</name> <operator>=</operator> <name>vidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tdone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gdone</name> <operator>&lt;</operator> <name><name>globvarht</name><operator>.</operator><name>ht_used</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gdone</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>globvarht</name><operator>.</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"g:"</literal></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bdone</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bdone</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wdone</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wdone</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>curtab</name><operator>-&gt;</operator><name>tp_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tdone</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tdone</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vidx</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>vimvars</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>vimvars</name><index>[<expr><name>vidx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>vv_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>varnamebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>varnamebuflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pattern_match</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cpo</name> <init>= <expr><name>p_cpo</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>ic</name></expr>;</expr_stmt>

<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>vim_regexec_nl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>save_cpo</name></expr>;</expr_stmt>

<return>return <expr><name>matches</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{

<decl><name>TYPE_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TYPE_EQUAL</name></decl>, 

<decl><name>TYPE_NEQUAL</name></decl>, 

<decl><name>TYPE_GREATER</name></decl>, 

<decl><name>TYPE_GEQUAL</name></decl>, 

<decl><name>TYPE_SMALLER</name></decl>, 

<decl><name>TYPE_SEQUAL</name></decl>, 

<decl><name>TYPE_MATCH</name></decl>, 

<decl><name>TYPE_NOMATCH</name></decl>, 

}</block></enum></type> <name>exptype_T</name>;</typedef>

<function><type><name>int</name></type> <name>eval0</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextcmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invexpr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nextcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>nextcmd</name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>eval1</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval2</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name> <operator>&amp;&amp;</operator> <name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E109: Missing ':' after '?'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>evaluate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <name>var2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval2</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval3</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <name>first</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval3</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>evaluate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval3</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval4</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <name>first</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval4</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>evaluate</name> <operator>&amp;&amp;</operator> <name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval4</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>exptype_T</name></type> <name>type</name> <init>= <expr><name>TYPE_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type_is</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ic</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval5</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'='</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TYPE_EQUAL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TYPE_MATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TYPE_NEQUAL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TYPE_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TYPE_GREATER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TYPE_GEQUAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TYPE_SMALLER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TYPE_SEQUAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>TYPE_EQUAL</name></expr> </then><else>: <expr><name>TYPE_NEQUAL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>type_is</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ic</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ic</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ic</name> <operator>=</operator> <name>p_ic</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval5</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type_is</name> <operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>TYPE_NEQUAL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name> <operator>||</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type_is</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name>

<operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NEQUAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>!</operator><name>n1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name>

<operator>||</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>TYPE_EQUAL</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TYPE_NEQUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E691: Can only compare List with List"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E692: Invalid operation for List"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_list_equal</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NEQUAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>!</operator><name>n1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type_is</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name>

<operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NEQUAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>!</operator><name>n1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name>

<operator>||</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>TYPE_EQUAL</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TYPE_NEQUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E735: Can only compare Dictionary with Dictionary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E736: Invalid operation for Dictionary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_dict_equal</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,

<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NEQUAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>!</operator><name>n1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tv_is_func</name><argument_list>(<argument><expr><operator>*</operator><name>rettv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>tv_is_func</name><argument_list>(<argument><expr><name>var2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>TYPE_EQUAL</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TYPE_NEQUAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E694: Invalid operation for Funcrefs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name>

<operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name>

<operator>&amp;&amp;</operator> <name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type_is</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name> <operator>&amp;&amp;</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_equal</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name>

<operator>&amp;&amp;</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>==</operator> <name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_partial</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_equal</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NEQUAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>!</operator><name>n1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name> <operator>||</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TYPE_MATCH</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TYPE_NOMATCH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TYPE_EQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>==</operator> <name>f2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>!=</operator> <name>f2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_GREATER</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>&gt;</operator> <name>f2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_GEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>&gt;=</operator> <name>f2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_SMALLER</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>&lt;</operator> <name>f2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_SEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>&lt;=</operator> <name>f2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_UNKNOWN</name></expr>:</case>

<case>case <expr><name>TYPE_MATCH</name></expr>:</case>

<case>case <expr><name>TYPE_NOMATCH</name></expr>:</case> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name> <operator>||</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TYPE_MATCH</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TYPE_NOMATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TYPE_EQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>n1</name> <operator>==</operator> <name>n2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>n1</name> <operator>!=</operator> <name>n2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_GREATER</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>n1</name> <operator>&gt;</operator> <name>n2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_GEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>n1</name> <operator>&gt;=</operator> <name>n2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_SMALLER</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>n1</name> <operator>&lt;</operator> <name>n2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_SEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>n1</name> <operator>&lt;=</operator> <name>n2</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_UNKNOWN</name></expr>:</case>

<case>case <expr><name>TYPE_MATCH</name></expr>:</case>

<case>case <expr><name>TYPE_NOMATCH</name></expr>:</case> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s1</name> <init>= <expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s2</name> <init>= <expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>TYPE_MATCH</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TYPE_NOMATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mb_strcmp_ic</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name><operator>)</operator><name>ic</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TYPE_EQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_GREATER</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_GEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_SMALLER</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_SEQUAL</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TYPE_MATCH</name></expr>:</case>

<case>case <expr><name>TYPE_NOMATCH</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>pattern_match</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s2</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s1</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NOMATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>!</operator><name>n1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>TYPE_UNKNOWN</name></expr>:</case> <break>break;</break> 

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval5</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float_T</name></type> <name>f1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval6</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_FLOAT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tv_check_str</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval6</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>op</name> <operator>==</operator> <literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s1</name> <init>= <expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s2</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name>

<operator>&amp;&amp;</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_list_concat</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var3</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <name>var3</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name> <operator>||</operator> <name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name>f1</name> <operator>+</operator> <name>f2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name>f1</name> <operator>-</operator> <name>f2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n1</name> <operator>+</operator> <name>n2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n1</name> <operator>-</operator> <name>n2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval6</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_string</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NO_SANITIZE_UNDEFINED

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_float</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float_T</name></type> <name>f1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval7</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>want_string</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_float</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval7</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_float</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_float</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <name><name>var2</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_float</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_float</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name>f1</name> <operator>*</operator> <name>f2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>f2</name> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name>f1</name> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name>NAN</name></expr>

</then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><ternary><condition><expr><name>f1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name>INFINITY</name></expr>

</then><else>: <expr><operator>-</operator><name>INFINITY</name></expr></else></ternary><operator>)</operator></expr></else></ternary>

<operator>)</operator></expr>

</then><else>: <expr><name>f1</name> <operator>/</operator> <name>f2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E804: Cannot use '%' with Float"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n1</name> <operator>*</operator> <name>n2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>num_divide</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>num_modulus</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval7</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>want_string</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start_leader</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end_leader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_leader</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>end_leader</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>

<case>case <expr><literal type="char">'7'</literal></expr>:</case>

<case>case <expr><literal type="char">'8'</literal></expr>:</case>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skipdigits</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>get_float</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>want_string</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>get_float</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipdigits</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>get_float</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipdigits</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>get_float</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>get_float</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>+=</operator> <call><name>string2float</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>STR2NR_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'"'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_string_tv</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\''</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_lit_string_tv</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_list_tv</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'{'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_lambda_tv</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NOTDONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dict_get_tv</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_option_tv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'$'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_env_tv</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'@'</literal></expr>:</case> <expr_stmt><expr><operator>++</operator><operator>*</operator><name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>get_reg_contents</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>arg</name></expr></argument>, <argument><expr><name>kGRegExprSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>arg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>arg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E110: Missing ')'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NOTDONE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NOTDONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_name_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>alias</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alias</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>alias</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>check_vars</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>deref_func_name</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>partial</name></expr></argument>, <argument><expr><operator>!</operator><name>evaluate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_func_tv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>evaluate</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>tv_empty_string</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FUNC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_var_tv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>check_vars</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handle_subscript</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>evaluate</name> <operator>&amp;&amp;</operator> <name>end_leader</name> <operator>&gt;</operator> <name>start_leader</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>end_leader</name> <operator>&gt;</operator> <name>start_leader</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>end_leader</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end_leader</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>!</operator><name>f</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>!</operator><name>val</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>end_leader</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>eval_index</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>empty1</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>empty2</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VAR_FUNC</name></expr>:</case>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E695: Cannot index a Funcref"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_float_as_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E909: Cannot index a special variable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>VAR_STRING</name></expr>:</case>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case>

<case>case <expr><name>VAR_LIST</name></expr>:</case>

<case>case <expr><name>VAR_DICT</name></expr>:</case> <block>{<block_content>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var1</name> <init>= <expr><name>TV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>var2</name> <init>= <expr><name>TV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>key</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>empty1</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tv_check_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>range</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>empty2</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>evaluate</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tv_check_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_missbrac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty1</name> <operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tv_is_luafunc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>empty2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case>

<case>case <expr><name>VAR_STRING</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>n1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>n2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n2</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&gt;=</operator> <name>len</name> <operator>||</operator> <name><name>n2</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>n1</name></expr></argument> &gt;</argument_list></name> <name>n2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>n1</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>n2</name> <operator>-</operator> <name>n1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&gt;=</operator> <name>len</name> <operator>||</operator> <name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>n1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>v</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VAR_LIST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>tv_list_len</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>n1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n1</name> <operator>&gt;=</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>range</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listidx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>n2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n2</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty2</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n2</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>n2</name> <operator>-</operator> <name>n1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>tv_list_find</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n1</name><operator>++</operator> <operator>&lt;=</operator> <name>n2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_tv</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_set_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_find</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <name>var1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VAR_DICT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>item</name> <init>= <expr><call><name>tv_dict_find</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>tv_is_luafunc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <name>var1</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>

<case>case <expr><name>VAR_FUNC</name></expr>:</case>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case> <block>{<block_content>

<break>break;</break> 

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_option_tv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rettv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>numval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stringval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>working</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option_end</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>find_option_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>option_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E112: Option name missing: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>option_end</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>option_end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>option_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opt_type</name> <operator>=</operator> <call><name>get_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>numval</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>rettv</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>stringval</name></expr></else></ternary></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E113: Unknown option: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt_type</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>numval</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>stringval</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>working</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_type</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal> <operator>||</operator> <name>opt_type</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>option_end</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>option_end</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_string_tv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>extra</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E114: Missing quote: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <operator>*</operator><name>arg</name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>name</name><operator>++</operator> <operator>=</operator> <name>BS</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>name</name><operator>++</operator> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>name</name><operator>++</operator> <operator>=</operator> <name>FF</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>name</name><operator>++</operator> <operator>=</operator> <name>NL</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>name</name><operator>++</operator> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>name</name><operator>++</operator> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> 

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <operator>(</operator><name>nr</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>nr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name><operator>++</operator> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>

<case>case <expr><literal type="char">'7'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>name</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>name</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>name</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name>trans_special</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <name>extra</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<default>default:</default> <expr_stmt><expr><call><name>MB_COPY_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_COPY_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_lit_string_tv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reduce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>reduce</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E115: Missing quote: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>p</name> <operator>-</operator> <operator>*</operator><name>arg</name><operator>)</operator> <operator>-</operator> <name>reduce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MB_COPY_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>partial_name</name><parameter_list>(<parameter><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name><operator>-&gt;</operator><name>uf_name</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>partial_free</name><parameter_list>(<parameter><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>func_unref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>func_ptr_unref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>partial_unref</name><parameter_list>(<parameter><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_refcount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>partial_free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_list_tv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenShouldKnow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<goto>goto <name>failret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_append_owned_tv</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E696: Missing comma in List: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E697: Missing end of List ']': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>failret</name>:</label>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_set_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>func_equal</name><parameter_list>(

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>ic</name></decl></parameter> 

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <ternary><condition><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr> ?</condition><then> <expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>

</then><else>: <expr><call><name>partial_name</name><argument_list>(<argument><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s1</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <ternary><condition><expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr> ?</condition><then> <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>

</then><else>: <expr><call><name>partial_name</name><argument_list>(<argument><expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s2</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <ternary><condition><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <ternary><condition><expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>d2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>!=</operator> <name>d2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>tv_dict_equal</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <ternary><condition><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <ternary><condition><expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a1</name> <operator>!=</operator> <name>a2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>a1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tv_equal</name><argument_list>(<argument><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_copyID</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_copyID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>current_copyID</name> <operator>+=</operator> <name>COPYID_INC</name></expr>;</expr_stmt>

<return>return <expr><name>current_copyID</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>funcargs</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>garbage_collect</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>testing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABORTING</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>abort = abort || func</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>testing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>want_garbage_collect</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>may_garbage_collect</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>garbage_collect_at_exit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>copyID</name> <init>= <expr><call><name>get_copyID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><name>previous_funccal</name></expr></init></decl>;</init> <condition><expr><name>fc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fc</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>caller</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>fc_copyID</name></name> <operator>=</operator> <name>copyID</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_ht</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_vars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>copyID</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_ht</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>copyID</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_ht</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_item</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_bufvar</name><operator>.</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_in_fmark</name>)<parameter_list>(<parameter><decl><type><name><name>buf</name><operator>-&gt;</operator><name>b_last_cursor</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_in_fmark</name>)<parameter_list>(<parameter><decl><type><name><name>buf</name><operator>-&gt;</operator><name>b_last_insert</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_in_fmark</name>)<parameter_list>(<parameter><decl><type><name><name>buf</name><operator>-&gt;</operator><name>b_last_change</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_in_fmark</name>)<parameter_list>(<parameter><decl><type><name><name>buf</name><operator>-&gt;</operator><name>b_namedm</name><index>[<expr><name>i</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_changelistlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_in_fmark</name>)<parameter_list>(<parameter><decl><type><name><name>buf</name><operator>-&gt;</operator><name>b_changelist</name><index>[<expr><name>i</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></for>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_dict</name>)<parameter_list>(<parameter><decl><type><name><name>buf</name><operator>-&gt;</operator><name>additional_data</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>set_ref_in_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_prompt_callback</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_ref_in_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_prompt_interrupt</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_item</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_winvar</name><operator>.</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_jumplistlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_fmark</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmark</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>aucmd_win</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_item</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aucmd_win</name><operator>-&gt;</operator><name>w_winvar</name><operator>.</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>reg_iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>yankreg_T</name></type> <name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>name</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_unnamed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reg_iter</name> <operator>=</operator> <call><name>op_global_reg_iter</name><argument_list>(<argument><expr><name>reg_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_unnamed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_dict</name>)<parameter_list>(<parameter><decl><type><name><name>reg</name><operator>.</operator><name>additional_data</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>reg_iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mark_iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>xfmark_T</name></type> <name>fm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>name</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mark_iter</name> <operator>=</operator> <call><name>mark_global_iter</name><argument_list>(<argument><expr><name>mark_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_dict</name>)<parameter_list>(<parameter><decl><type><name><name>fm</name><operator>.</operator><name>fmark</name><operator>.</operator><name>additional_data</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>mark_iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

</block_content>}</block>

<macro><name>FOR_ALL_TABS</name><argument_list>(<argument>tp</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_item</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>tp_winvar</name><operator>.</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_ht</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><name>current_funccal</name></expr></init></decl>;</init> <condition><expr><name>fc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fc</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>caller</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>fc_copyID</name></name> <operator>=</operator> <name>copyID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_ht</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_vars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_ht</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ABORTING</name><argument_list>(<argument><expr><call><name>set_ref_in_functions</name><argument_list>(<argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<macro><name>map_foreach_value</name><argument_list>(<argument>channels</argument>, <argument>data</argument>, <argument>{

set_ref_in_callback_reader(&amp;data-&gt;on_data, copyID, NULL, NULL);

set_ref_in_callback_reader(&amp;data-&gt;on_stderr, copyID, NULL, NULL);

set_ref_in_callback(&amp;data-&gt;on_exit, copyID, NULL, NULL);

}</argument>)</argument_list></macro>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<macro><name>map_foreach_value</name><argument_list>(<argument>timers</argument>, <argument>timer</argument>, <argument>{

set_ref_in_callback(&amp;timer-&gt;callback, copyID, NULL, NULL);

}</argument>)</argument_list></macro>

</block_content>}</block>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>funcargs</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_item</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>typval_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>funcargs</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>,

<argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><call><name>ABORTING</name><argument_list>(<argument><expr><name>set_ref_in_ht</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_hi</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>histentry_T</name></type> <name>hist</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>hist_iter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hist</name><operator>.</operator><name>hisstr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_list</name>)<parameter_list>(<parameter><decl><type><name><name>hist</name><operator>.</operator><name>additional_elements</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>SearchPattern</name></type> <name>pat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_search_pattern</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_dict</name>)<parameter_list>(<parameter><decl><type><name><name>pat</name><operator>.</operator><name>additional_data</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>get_substitute_pattern</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_dict</name>)<parameter_list>(<parameter><decl><type><name><name>pat</name><operator>.</operator><name>additional_data</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>SubReplacementString</name></type> <name>sub</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sub_get_replacement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_list</name>)<parameter_list>(<parameter><decl><type><name><name>sub</name><operator>.</operator><name>additional_elements</name></name></type></decl></parameter>, <parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block>

<function_decl><type><name>ABORTING</name></type>(<name>set_ref_in_quickfix</name>)<parameter_list>(<parameter><decl><type><name>copyID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>did_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abort</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_free</name> <operator>=</operator> <call><name>free_unref_items</name><argument_list>(<argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_free_funccal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>funccall_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>pfc</name> <init>= <expr><operator>&amp;</operator><name>previous_funccal</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>pfc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>can_free_funccal</name><argument_list>(<argument><expr><operator>*</operator><name>pfc</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><operator>*</operator><name>pfc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pfc</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>caller</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_funccal</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_free_funccal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pfc</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pfc</name><operator>)</operator><operator>-&gt;</operator><name>caller</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>did_free_funccal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>garbage_collect</name><argument_list>(<argument><expr><name>testing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>verb_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"Not enough memory to set references, garbage collection aborted!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ABORTING</name></cpp:undef>

<return>return <expr><name>did_free</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>free_unref_items</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>did_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tv_in_free_unref_items</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dd</name> <init>= <expr><name>gc_first_dict</name></expr></init></decl>;</init> <condition><expr><name>dd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dd</name> <operator>=</operator> <name><name>dd</name><operator>-&gt;</operator><name>dv_used_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dd</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>&amp;</operator> <name>COPYID_MASK</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>copyID</name> <operator>&amp;</operator> <name>COPYID_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_free_contents</name><argument_list>(<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>list_T</name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><name>gc_first_list</name></expr></init></decl>;</init> <condition><expr><name>ll</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ll</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>lv_used_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>tv_list_copyid</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>COPYID_MASK</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>copyID</name> <operator>&amp;</operator> <name>COPYID_MASK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>tv_list_has_watchers</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_free_contents</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dd_next</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dd</name> <init>= <expr><name>gc_first_dict</name></expr></init></decl>;</init> <condition><expr><name>dd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dd</name> <operator>=</operator> <name>dd_next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dd_next</name> <operator>=</operator> <name><name>dd</name><operator>-&gt;</operator><name>dv_used_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dd</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>&amp;</operator> <name>COPYID_MASK</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>copyID</name> <operator>&amp;</operator> <name>COPYID_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_free_dict</name><argument_list>(<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>ll_next</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>list_T</name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><name>gc_first_list</name></expr></init></decl>;</init> <condition><expr><name>ll</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ll</name> <operator>=</operator> <name>ll_next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ll_next</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>lv_used_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ll</name><operator>-&gt;</operator><name>lv_copyID</name></name> <operator>&amp;</operator> <name>COPYID_MASK</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>copyID</name> <operator>&amp;</operator> <name>COPYID_MASK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>tv_list_has_watchers</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_free_list</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tv_in_free_unref_items</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>did_free</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>set_ref_in_ht</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>, <parameter><decl><type><name>list_stack_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_stack</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ht_stack_T</name> <modifier>*</modifier></type><name>ht_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>cur_ht</name> <init>= <expr><name>ht</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abort</name></expr>)</condition> <block>{<block_content>

<macro><name>HASHTAB_ITER</name><argument_list>(<argument>cur_ht</argument>, <argument>hi</argument>, <argument>{

abort = abort || set_ref_in_item(

&amp;TV_DICT_HI2DI(hi)-&gt;di_tv, copyID, &amp;ht_stack, list_stack);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ht_stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_ht</name> <operator>=</operator> <name><name>ht_stack</name><operator>-&gt;</operator><name>ht</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ht_stack_T</name> <modifier>*</modifier></type><name>tempitem</name> <init>= <expr><name>ht_stack</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ht_stack</name> <operator>=</operator> <name><name>ht_stack</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tempitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>set_ref_in_list</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>, <parameter><decl><type><name>ht_stack_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_stack</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_stack_T</name> <modifier>*</modifier></type><name>list_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>cur_l</name> <init>= <expr><name>l</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<macro><name>TV_LIST_ITER</name><argument_list>(<argument>cur_l</argument>, <argument>li</argument>, <argument>{

if (abort) {

break;

}

abort = set_ref_in_item(TV_LIST_ITEM_TV(li), copyID, ht_stack,

&amp;list_stack);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>list_stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_l</name> <operator>=</operator> <name><name>list_stack</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>list_stack_T</name> <modifier>*</modifier></type><name>tempitem</name> <init>= <expr><name>list_stack</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>list_stack</name> <operator>=</operator> <name><name>list_stack</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tempitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>set_ref_in_item</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>, <parameter><decl><type><name>ht_stack_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_stack</name></decl></parameter>,

<parameter><decl><type><name>list_stack_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_stack</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VAR_DICT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dd</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dd</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>!=</operator> <name>copyID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dd</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>=</operator> <name>copyID</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ht_stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>set_ref_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dd</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>list_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ht_stack_T</name> <modifier>*</modifier></type><name>newitem</name> <init>= <expr><call><name>try_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ht_stack_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>dd</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <operator>*</operator><name>ht_stack</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ht_stack</name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DictWatcher</name> <modifier>*</modifier></type><name>watcher</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>QUEUE_FOREACH</name><argument_list>(<argument>w</argument>, <argument>&amp;dd-&gt;watchers</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>watcher</name> <operator>=</operator> <call><name>tv_dict_watcher_node_data</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_ref_in_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>callback</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>ht_stack</name></expr></argument>, <argument><expr><name>list_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VAR_LIST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ll</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ll</name><operator>-&gt;</operator><name>lv_copyID</name></name> <operator>!=</operator> <name>copyID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ll</name><operator>-&gt;</operator><name>lv_copyID</name></name> <operator>=</operator> <name>copyID</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list_stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>set_ref_in_list</name><argument_list>(<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>ht_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>list_stack_T</name> <modifier>*</modifier></type><name>newitem</name> <init>= <expr><call><name>try_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>list_stack_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <operator>*</operator><name>list_stack</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>list_stack</name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>set_ref_in_func</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>dtv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dtv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dtv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>ht_stack</name></expr></argument>, <argument><expr><name>list_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>,

<argument><expr><name>ht_stack</name></expr></argument>, <argument><expr><name>list_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VAR_FUNC</name></expr>:</case>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>set_ref_in_func</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case>

<case>case <expr><name>VAR_STRING</name></expr>:</case> <block>{<block_content>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>set_ref_in_functions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>hi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>todo</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>func_name_refcount</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_func</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_ref_in_fmark</name><parameter_list>(<parameter><decl><type><name>fmark_T</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fm</name><operator>.</operator><name>additional_data</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>fm</name><operator>.</operator><name>additional_data</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>!=</operator> <name>copyID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fm</name><operator>.</operator><name>additional_data</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>=</operator> <name>copyID</name></expr>;</expr_stmt>

<return>return <expr><call><name>set_ref_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fm</name><operator>.</operator><name>additional_data</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_ref_list</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>typval_T</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>,

<expr><operator>.</operator><name>vval</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>v_list</name> <operator>=</operator> <name>list</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>set_ref_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>typval_T</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_DICT</name></expr>,

<expr><operator>.</operator><name>vval</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>v_dict</name> <operator>=</operator> <name>dict</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_ref_in_funccal</name><parameter_list>(<parameter><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>fc_copyID</name></name> <operator>!=</operator> <name>copyID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>fc_copyID</name></name> <operator>=</operator> <name>copyID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_vars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_func</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fc</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_get_tv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tvkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>start</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NOTDONE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tvkey</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tvkey</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>failret</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E720: Missing colon in Dictionary: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tvkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tvkey</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tvkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failret</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tvkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>failret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>tv_dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E721: Duplicate key in Dictionary: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tvkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>tv_dict_item_alloc</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>di_tv</name></name> <operator>=</operator> <name>tv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_item_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tvkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E722: Missing comma in Dictionary: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E723: Missing end of Dictionary '}': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>failret</name>:</label>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_set_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_function_args</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>argp</name></decl></parameter>, <parameter><decl><type><name>char_u</name></type> <name>endchar</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>newargs</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>varargs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>skip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>mustend</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>*</operator><name>argp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newargs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><name>newargs</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varargs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>varargs</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>endchar</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>varargs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>varargs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mustend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>p</name> <operator>||</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"firstline"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"lastline"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E125: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newargs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>newargs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newargs</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>newargs</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E853: Duplicate argument name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err_ret</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>newargs</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name><name>newargs</name><operator>-&gt;</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newargs</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mustend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mustend</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>endchar</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>endchar</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_ret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<label><name>err_ret</name>:</label>

<if_stmt><if>if <condition>(<expr><name>newargs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><name>newargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_closure</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name> <operator>==</operator> <name>current_funccal</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>funccal_unref</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name> <operator>=</operator> <name>current_funccal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_funccal</name><operator>-&gt;</operator><name>fc_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current_funccal</name><operator>-&gt;</operator><name>fc_funcs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>current_funccal</name><operator>-&gt;</operator><name>fc_funcs</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>

<index>[<expr><name><name>current_funccal</name><operator>-&gt;</operator><name>fc_funcs</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_lambda_tv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name></type> <name>newargs</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>pnewargs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>varargs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lambda_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>old_eval_lavars</name> <init>= <expr><name>eval_lavars_used</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eval_lavars</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_function_args</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <operator>*</operator><name>start</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NOTDONE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pnewargs</name> <operator>=</operator> <operator>&amp;</operator><name>newargs</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pnewargs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_function_args</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>pnewargs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varargs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>errret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>eval_lavars_used</name> <operator>=</operator> <operator>&amp;</operator><name>eval_lavars</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>skip_expr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>errret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>errret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>newlines</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lambda_no</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&lt;lambda&gt;%d"</literal></expr></argument>, <argument><expr><name>lambda_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ufunc_T</name></expr></argument>, <argument><expr><name>uf_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>partial_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">7</literal> <operator>+</operator> <name>e</name> <operator>-</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>newlines</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name><name>newlines</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"return "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func_hashtab</name></expr></argument>, <argument><expr><call><name>UF2HIKEY</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_args</name></name> <operator>=</operator> <name>newargs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name></name> <operator>=</operator> <name>newlines</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>eval_lavars</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FC_CLOSURE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>register_closure</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prof_def_func</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>func_do_profile</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sandbox</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FC_SANDBOX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_varargs</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name></name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>sourcing_lnum</name> <operator>-</operator> <name><name>newlines</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eval_lavars_used</name> <operator>=</operator> <name>old_eval_lavars</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<label><name>errret</name>:</label>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eval_lavars_used</name> <operator>=</operator> <name>old_eval_lavars</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>string2float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>float_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_value</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"inf"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_value</name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"-inf"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_value</name> <operator>=</operator> <operator>-</operator><name>INFINITY</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"nan"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_value</name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_value</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>text</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_env_tv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_env_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>vim_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>string</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><name>name</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>deref_func_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>,

<parameter><decl><type><name>partial_T</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>partialp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_autoload</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>partialp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>partialp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>v</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>lenp</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>no_autoload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pt</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>partialp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>partialp</name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>partial_name</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_func_tv</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>firstline</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>lastline</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>doesrange</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>,

<parameter><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name></decl></parameter>, 

<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>argp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argvars</name><index>[<expr><name>MAX_FUNC_ARGS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>argcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>argp</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>argcount</name> <operator>&lt;</operator> <name>MAX_FUNC_ARGS</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>partial</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>partial</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>argp</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>argp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argp</name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <operator>*</operator><name>argp</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>argp</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>argcount</name></expr>]</index></name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>argcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argp</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argp</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>argp</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TESTING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>funcargs</name><operator>.</operator><name>ga_itemsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcargs</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>typval_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcargs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>typval_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>funcargs</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>funcargs</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>call_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>firstline</name></expr></argument>, <argument><expr><name>lastline</name></expr></argument>, <argument><expr><name>doesrange</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>,

<argument><expr><name>partial</name></expr></argument>, <argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>funcargs</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>==</operator> <name>MAX_FUNC_ARGS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E740: Too many arguments for function %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E116: Invalid arguments for function %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>--</operator><name>argcount</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>argcount</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{

<decl><name>ERROR_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ERROR_TOOMANY</name></decl>,

<decl><name>ERROR_TOOFEW</name></decl>,

<decl><name>ERROR_SCRIPT</name></decl>,

<decl><name>ERROR_DICT</name></decl>,

<decl><name>ERROR_NONE</name></decl>,

<decl><name>ERROR_OTHER</name></decl>,

<decl><name>ERROR_BOTH</name></decl>,

<decl><name>ERROR_DELETED</name></decl>,

}</block></enum></type> <name>FnameTransError</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEN_FIXED</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>fname_trans_sid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname_buf</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>tofree</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>error</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>llen</name> <init>= <expr><call><name>eval_fname_script</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>llen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fname_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fname_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fname_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval_fname_sid</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>ERROR_SCRIPT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname_buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>FLEN_FIXED</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"_"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>llen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLEN_FIXED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>fname_buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>fname_buf</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>llen</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tofree</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>fname</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>fname</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>set_ref_in_func</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>fp_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>ERROR_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname_buf</name><index>[<expr><name>FLEN_FIXED</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fp_in</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_in</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>fname_trans_sid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fname_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>fc</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr>;</init> <condition><expr><name>fc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fc</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_funccal</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>call_func</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>argcount_in</name></decl></parameter>, 

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars_in</name></decl></parameter>, 

<parameter><decl><type><name>ArgvFunc</name></type> <name>argv_func</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>firstline</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>lastline</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>doesrange</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>evaluate</name></decl></parameter>,

<parameter><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name></decl></parameter>, 

<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict_in</name></decl></parameter> 

)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 3<operator>,</operator> 5<operator>,</operator> 9</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>ERROR_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname_buf</name><index>[<expr><name>FLEN_FIXED</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argcount</name> <init>= <expr><name>argcount_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name> <init>= <expr><name>argvars_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name> <init>= <expr><name>selfdict_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><name>MAX_FUNC_ARGS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>argv_clear</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>fname_trans_sid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fname_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>doesrange</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>partial</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>partial</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>selfdict_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>partial</name><operator>-&gt;</operator><name>pt_auto</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>selfdict</name> <operator>=</operator> <name><name>partial</name><operator>-&gt;</operator><name>pt_dict</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>ERROR_NONE</name> <operator>&amp;&amp;</operator> <name><name>partial</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>argv_clear</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>argv_clear</name> <operator>&lt;</operator> <name><name>partial</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</condition> <incr><expr><name>argv_clear</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>partial</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>argv_clear</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>argv_clear</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount_in</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <name>argv_clear</name></expr>]</index></name> <operator>=</operator> <name><name>argvars_in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>argvars</name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argcount</name> <operator>=</operator> <name><name>partial</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>+</operator> <name>argcount_in</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>ERROR_NONE</name> <operator>&amp;&amp;</operator> <name>evaluate</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rfname</name> <init>= <expr><name>fname</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rfname</name> <operator>=</operator> <name>fname</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_UNKNOWN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>partial</name> <operator>==</operator> <name>vvlua_partial</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>executor_call_lua</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>funcname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>builtin_function</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>rfname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>partial</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>partial</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>partial</name><operator>-&gt;</operator><name>pt_func</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>rfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_FUNCUNDEFINED</name></expr></argument>, <argument><expr><name>rfname</name></expr></argument>, <argument><expr><name>rfname</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>rfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>script_autoload</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>rfname</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>rfname</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>rfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_DELETED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_DELETED</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argv_func</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>argcount</name> <operator>=</operator> <call><name>argv_func</name><argument_list>(<argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>argvars</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_RANGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>doesrange</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_TOOFEW</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_varargs</name></name> <operator>&amp;&amp;</operator> <name>argcount</name> <operator>&gt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_TOOMANY</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_DICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>selfdict</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_DICT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>call_user_func</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>, <argument><expr><name>lastline</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_DICT</name><operator>)</operator></expr> ?</condition><then> <expr><name>selfdict</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_NONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VimLFuncDef</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fdef</name> <init>= <expr><call><name>find_internal_func</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fdef</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>&lt;</operator> <name><name>fdef</name><operator>-&gt;</operator><name>min_argc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_TOOFEW</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argcount</name> <operator>&gt;</operator> <name><name>fdef</name><operator>-&gt;</operator><name>max_argc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_TOOMANY</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><name>argcount</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdef</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name><name>fdef</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERROR_NONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>update_force_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>ERROR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ERROR_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E117: Unknown function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_DELETED</name></expr>:</case>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E933: Function was deleted: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_TOOMANY</name></expr>:</case>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_toomanyarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_TOOFEW</name></expr>:</case>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E119: Not enough arguments for function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_SCRIPT</name></expr>:</case>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E120: Using &lt;SID&gt; not in a script context: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_DICT</name></expr>:</case>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E725: Calling dict function without Dictionary: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>argv_clear</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><operator>--</operator><name>argv_clear</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emsg_funcname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ermsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;SNR&gt;"</literal></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>ermsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_arglist_as_rettv</name><parameter_list>(<parameter><decl><type><name>aentry_T</name> <modifier>*</modifier></type><name>arglist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tv_list_alloc_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arglist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arglist</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>prepare_assert_error</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcing_lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcing_lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"line %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>sourcing_lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ga_concat_esc</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BS</name></expr>:</case> <expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ESC</name></expr>:</case> <expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FF</name></expr>:</case> <expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NL</name></expr>:</case> <expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TAB</name></expr>:</case> <expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CAR</name></expr>:</case> <expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>NUMBUFLEN</name></expr></argument>, <argument><expr><literal type="string">"\\x%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>fill_assert_error</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>opt_msg_tv</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>exp_str</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>exp_tv</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>got_tv</name></decl></parameter>, <parameter><decl><type><name>assert_type_T</name></type> <name>atype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt_msg_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>encode_tv2echo</name><argument_list>(<argument><expr><name>opt_msg_tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name>ASSERT_MATCH</name> <operator>||</operator> <name>atype</name> <operator>==</operator> <name>ASSERT_NOTMATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Pattern "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>ASSERT_NOTEQUAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Expected not equal to "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Expected "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>encode_tv2string</name><argument_list>(<argument><expr><name>exp_tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat_esc</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat_esc</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atype</name> <operator>!=</operator> <name>ASSERT_NOTEQUAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name>ASSERT_MATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" does not match "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>ASSERT_NOTMATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" does match "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" but got "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>encode_tv2string</name><argument_list>(<argument><expr><name>got_tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat_esc</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_error</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vimvar</name></name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>VV_ERRORS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vv_type</name></name> <operator>!=</operator> <name>VAR_LIST</name> <operator>||</operator> <name><name>vimvars</name><index>[<expr><name>VV_ERRORS</name></expr>]</index></name><operator>.</operator><name>vv_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_list</name><argument_list>(<argument><expr><name>VV_ERRORS</name></expr></argument>, <argument><expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name><name>vimvars</name><index>[<expr><name>VV_ERRORS</name></expr>]</index></name><operator>.</operator><name>vv_list</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>assert_equal_common</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>assert_type_T</name></type> <name>atype</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <operator>(</operator><name>atype</name> <operator>==</operator> <name>ASSERT_EQUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>atype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>assert_equalfile</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname1</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname2</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fname1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fname2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fd1</name> <init>= <expr><call><name>os_fopen</name><argument_list>(<argument><expr><name>fname1</name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_notread</name></expr></argument>, <argument><expr><name>fname1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fd2</name> <init>= <expr><call><name>os_fopen</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_notread</name></expr></argument>, <argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>int64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>fgetc</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><call><name>fgetc</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"first file is shorter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"second file is shorter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><literal type="string">"difference at byte %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>assert_inrange</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>varnumber_T</name></type> <name>lower</name> <init>= <expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>varnumber_T</name></type> <name>upper</name> <init>= <expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>varnumber_T</name></type> <name>actual</name> <init>= <expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>actual</name> <argument_list type="generic">&lt; <argument><expr><name>lower</name> <operator>||</operator> <name>actual</name></expr></argument> &gt;</argument_list></name> <name>upper</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"range %"</literal> <name>PRIdVARNUMBER</name> <literal type="string">" - %"</literal> <name>PRIdVARNUMBER</name> <literal type="string">","</literal></expr></argument>,

<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ASSERT_INRANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>assert_bool</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_true</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_NUMBER</name>

<operator>||</operator> <operator>(</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <name>is_true</name>

<operator>||</operator> <name>error</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_SPECIAL</name>

<operator>||</operator> <operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_special</name></name>

<operator>!=</operator> <operator>(</operator><name>SpecialVarValue</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>is_true</name></expr>

?</condition><then> <expr><name>kSpecialVarTrue</name></expr>

</then><else>: <expr><name>kSpecialVarFalse</name></expr></else></ternary><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>is_true</name></expr> ?</condition><then> <expr><literal type="string">"True"</literal></expr> </then><else>: <expr><literal type="string">"False"</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ASSERT_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>assert_exception</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>error</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vimvars</name><index>[<expr><name>VV_EXCEPTION</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"v:exception is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>vimvars</name><index>[<expr><name>VV_EXCEPTION</name></expr>]</index></name><operator>.</operator><name>vv_str</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>VV_EXCEPTION</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>, <argument><expr><name>ASSERT_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>assert_fails</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_trylevel</name> <init>= <expr><name>trylevel</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>trylevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>suppress_errthrow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_silent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>called_emsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"command did not fail: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tofree</name> <init>= <expr><call><name>encode_tv2echo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>error</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>vimvars</name><index>[<expr><name>VV_ERRMSG</name></expr>]</index></name><operator>.</operator><name>vv_str</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>VV_ERRMSG</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>, <argument><expr><name>ASSERT_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>trylevel</name> <operator>=</operator> <name>save_trylevel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>suppress_errthrow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_silent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_ERRMSG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>assert_match_common</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>assert_type_T</name></type> <name>atype</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pat</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>text</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>text</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>pattern_match</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>pat</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <operator>(</operator><name>atype</name> <operator>==</operator> <name>ASSERT_MATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>atype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>func_call</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name></decl></parameter>,

<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><name>MAX_FUNC_ARGS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>TV_LIST_ITER</name><argument_list>(<argument>args-&gt;vval.v_list</argument>, <argument>item</argument>, <argument>{

if (argc == MAX_FUNC_ARGS - (partial == NULL ? <literal type="number">0</literal> : partial-&gt;pt_argc)) {

EMSG(_(<literal type="string">"E699: Too many arguments"</literal>));

goto func_call_skip_call;

}

tv_copy(TV_LIST_ITEM_TV(item), &amp;argv[argc++]);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>call_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>, <argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>func_call_skip_call</name>:</label>

<while>while <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><operator>--</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>win_T</name> <modifier>*</modifier></type> <name>find_win_by_nr_or_id</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;=</operator> <name>LOWEST_WIN_ID</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>win_id2wp</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>find_win_by_nr</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>filter_map</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>save_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>save_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rem</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ermsg</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>map</name></expr> ?</condition><then> <expr><literal type="string">"map()"</literal></expr> </then><else>: <expr><literal type="string">"filter()"</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg_errmsg</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>map</name></expr>

?</condition><then> <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"map() argument"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"filter() argument"</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>map</name> <operator>&amp;&amp;</operator> <call><name>tv_check_lock</name><argument_list>(<argument><expr><call><name>tv_list_locked</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg_errmsg</name></expr></argument>,

<argument><expr><name>TV_TRANSLATE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>map</name> <operator>&amp;&amp;</operator> <call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></argument>, <argument><expr><name>arg_errmsg</name></expr></argument>, <argument><expr><name>TV_TRANSLATE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listdictarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ermsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_vimvar</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_did_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_vimvar</name><argument_list>(<argument><expr><name>VV_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_KEY</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_lock</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name></expr></argument>, <argument><expr><name>arg_errmsg</name></expr></argument>, <argument><expr><name>TV_TRANSLATE</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>var_check_ro</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name>arg_errmsg</name></expr></argument>, <argument><expr><name>TV_TRANSLATE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_KEY</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>filter_map_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>VV_KEY</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <name>did_emsg</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name> <operator>&amp;&amp;</operator> <name>rem</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>var_check_fixed</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name>arg_errmsg</name></expr></argument>, <argument><expr><name>TV_TRANSLATE</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>var_check_ro</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name>arg_errmsg</name></expr></argument>, <argument><expr><name>TV_TRANSLATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_dict_item_remove</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_unlock</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_KEY</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>li</name> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>map</name>

<operator>&amp;&amp;</operator> <call><name>tv_check_lock</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_lock</name></expr></argument>, <argument><expr><name>arg_errmsg</name></expr></argument>,

<argument><expr><name>TV_TRANSLATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_KEY</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>filter_map_one</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rem</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <name>did_emsg</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name> <operator>&amp;&amp;</operator> <name>rem</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>tv_list_item_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>restore_vimvar</name><argument_list>(<argument><expr><name>VV_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_vimvar</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>save_did_emsg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_map_one</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>remp</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>VV_VAL</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>VV_KEY</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>VV_VAL</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval_expr_typval</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tv</name> <operator>=</operator> <name>rettv</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>remp</name> <operator>=</operator> <operator>(</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>VV_VAL</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block>

<function><type><name>void</name></type> <name>common_function</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_funcref</name></decl></parameter>, <parameter><decl><type><name>FunPtr</name></type> <name>fptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_string</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>arg_pt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>trans_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_PARTIAL</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg_pt</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_partial</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name>arg_pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_string</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>use_string</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <name>is_funcref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>trans_name</name> <operator>=</operator> <call><name>trans_function_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>TFN_INT</name> <operator>|</operator> <name>TFN_QUIET</name> <operator>|</operator> <name>TFN_NO_AUTOLOAD</name>

<operator>|</operator> <name>TFN_NO_DEREF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>use_string</name> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>is_funcref</name> <operator>&amp;&amp;</operator> <name>trans_name</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>use_string</name></expr>

?</condition><then> <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>trans_name</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>is_funcref</name></expr> ?</condition><then> <expr><call><name>find_func</name><argument_list>(<argument><expr><name>trans_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>

</then><else>: <expr><operator>!</operator><call><name>translated_function_exists</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>trans_name</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E700: Unknown function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dict_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;SID&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>sid_buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'s'</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sid_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sid_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&lt;SNR&gt;%"</literal> <name>PRId64</name> <literal type="string">"_"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>sid_buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>sid_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dict_idx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dict_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>arg_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>dict_idx</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E922: expected a dict"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>dict_idx</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dict_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>arg_idx</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E923: Second argument of function() must be "</literal>

<literal type="string">"a list or a dict"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>arg_idx</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict_idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>arg_idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>arg_pt</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>is_funcref</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pt</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>arg_pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>arg_len</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>arg_pt</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>arg_pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lv_len</name> <init>= <expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>=</operator> <name>arg_len</name> <operator>+</operator> <name>lv_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arg_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg_pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>lv_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<macro><name>TV_LIST_ITER</name><argument_list>(<argument>list</argument>, <argument>li</argument>, <argument>{

tv_copy(TV_LIST_ITEM_TV(li), &amp;pt-&gt;pt_argv[i++]);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>dict_idx</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>arg_pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>=</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_auto</name></name> <operator>=</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_auto</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>=</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ptr_ref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_funcref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>trans_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ptr_ref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FUNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>trans_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>dict_T</name> <modifier>*</modifier></type><name>get_buffer_info</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"bufnr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"lnum"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>buf</name> <operator>==</operator> <name>curbuf</name></expr> ?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr> </then><else>: <expr><call><name>buflist_findlnum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"linecount"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"loaded"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"listed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"changed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"changedtick"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"hidden"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_dict</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"variables"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>windows</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenMayKnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_number</name><argument_list>(<argument><expr><name>windows</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>tv_dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>windows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_signlist</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"signs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_buffer_signs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dict</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>linenr_T</name></type> <name>tv_get_lnum_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>buf_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name>

<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal>

<operator>&amp;&amp;</operator> <name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<function><type><name>void</name></type> <name>get_qf_loc_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_qf</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>what_arg</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>what_arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_alloc_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>kListLenMayKnow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_qf</name> <operator>||</operator> <name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>get_errorlist</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_alloc_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_qf</name> <operator>||</operator> <name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>what_arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>what_arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qf_get_properties</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>dict_T</name> <modifier>*</modifier></type><name>get_tabpage_info</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tp_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"tabnr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>l</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenMayKnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>tp</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>tv_dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_dict</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"variables"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dict</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>dict_T</name> <modifier>*</modifier></type><name>get_win_info</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>tpnr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>winnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"tabnr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tpnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"winnr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>winnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"winid"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"winrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"topline"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"botline"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"bufnr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"wincol"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"terminal"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bt_terminal</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"quickfix"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"loclist"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_llist_ref</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_dict</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"variables"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dict</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>win_T</name> <modifier>*</modifier></type>

<name>find_win_by_nr</name><parameter_list>(

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>,

<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>curwin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>tp</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;=</operator> <name>LOWEST_WIN_ID</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>nr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>wp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>--</operator><name>nr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>wp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>win_T</name> <modifier>*</modifier></type><name>find_tabwin</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>wvp</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tvp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wvp</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tvp</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><name>tvp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>find_win_by_nr</name><argument_list>(<argument><expr><name>wvp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>wp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>getwinvar</name><parameter_list>(

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldcurwin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>oldtabpage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>find_win_by_nr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>need_switch_win</name> <init>= <expr><name>tp</name> <operator>!=</operator> <name>curtab</name> <operator>||</operator> <name>win</name> <operator>!=</operator> <name>curwin</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_switch_win</name>

<operator>||</operator> <call><name>switch_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldcurwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtabpage</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>varname</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>varname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>get_winbuf_options</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_set_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_option_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_switch_win</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>oldcurwin</name></expr></argument>, <argument><expr><name>oldtabpage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_user_input</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>argvars</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rettv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>inputdialog</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>secret</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defstr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cancelreturn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xp_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Callback</name></type> <name>input_callback</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>kCallbackNone</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>prompt_buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>defstr_buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cancelreturn_buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>xp_name_buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>def</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5050: {opts} must be the only argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name> <init>= <expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>tv_dict_get_string_buf_chk</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"prompt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prompt_buf</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>defstr</name> <operator>=</operator> <call><name>tv_dict_get_string_buf_chk</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>defstr_buf</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>defstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cancelreturn</name> <operator>=</operator> <call><name>tv_dict_get_string_buf_chk</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"cancelreturn"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cancelreturn_buf</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cancelreturn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cancelreturn</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cancelreturn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xp_name</name> <operator>=</operator> <call><name>tv_dict_get_string_buf_chk</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"completion"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>xp_name_buf</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xp_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xp_name</name> <operator>==</operator> <name>def</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>xp_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tv_dict_get_callback</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"highlight"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_callback</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>prompt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>defstr</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>defstr_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>defstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg2</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>cancelreturn_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inputdialog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cancelreturn</name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>xp_name</name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xp_type</name> <init>= <expr><name>EXPAND_NOTHING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xp_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xp_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xp_namelen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>xp_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>argt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_compl_arg</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>xp_name</name></expr></argument>, <argument><expr><name>xp_namelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xp_type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>argt</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>xp_arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>cmd_silent_save</name> <init>= <expr><name>cmd_silent</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>prompt</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lastnl</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lastnl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>lastnl</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr_len</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>prompt</name></expr></argument>, <argument><expr><name>echo_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_starthere</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffReadbuffSpec</name><argument_list>(<argument><expr><name>defstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>save_ex_normal_busy</name> <init>= <expr><name>ex_normal_busy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ex_normal_busy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>getcmdline_prompt</name><argument_list>(<argument><expr><ternary><condition><expr><name>secret</name></expr> ?</condition><then> <expr><name>NUL</name></expr> </then><else>: <expr><literal type="char">'@'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>echo_attr</name></expr></argument>,

<argument><expr><name>xp_type</name></expr></argument>, <argument><expr><name>xp_arg</name></expr></argument>, <argument><expr><name>input_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ex_normal_busy</name> <operator>=</operator> <name>save_ex_normal_busy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cancelreturn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xstrdup</name><argument_list>(<argument><expr><name>cancelreturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>xp_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>cmd_silent_save</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>dict_list</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rettv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>DictListType</name></type> <name>what</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_list_alloc_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><call><name>tv_dict_len</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TV_DICT_ITER</name><argument_list>(<argument>tv-&gt;vval.v_dict</argument>, <argument>di</argument>, <argument>{

typval_T tv_item = { .v_lock = VAR_UNLOCKED };

switch (what) {

case kDictListKeys: {

tv_item.v_type = VAR_STRING;

tv_item.vval.v_string = vim_strsave(di-&gt;di_key);

break;

}

case kDictListValues: {

tv_copy(&amp;di-&gt;di_tv, &amp;tv_item);

break;

}

case kDictListItems: {

list_T *const sub_l = tv_list_alloc(<literal type="number">2</literal>);

tv_item.v_type = VAR_LIST;

tv_item.vval.v_list = sub_l;

tv_list_ref(sub_l);

tv_list_append_owned_tv(sub_l, (typval_T) {

.v_type = VAR_STRING,

.v_lock = VAR_UNLOCKED,

.vval.v_string = (char_u *)xstrdup((const char *)di-&gt;di_key),

});

tv_list_append_tv(sub_l, &amp;di-&gt;di_tv);

break;

}

}

tv_list_append_owned_tv(rettv-&gt;vval.v_list, tv_item);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tv_to_argv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>cmd_tv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>executable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmd_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_str</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>cmd_tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cmd</name> <operator>=</operator> <name>cmd_str</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>shell_build_argv</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"expected String or List"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>argl</name> <init>= <expr><name><name>cmd_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name>argl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg0</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>argl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exe_resolved</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg0</name> <operator>||</operator> <operator>!</operator><call><name>os_can_exe</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exe_resolved</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg0</name> <operator>&amp;&amp;</operator> <name>executable</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IOSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"'%s' is not executable"</literal></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG3</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargNval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>executable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cmd</name> <operator>=</operator> <name>exe_resolved</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>TV_LIST_ITER_CONST</name><argument_list>(<argument>argl</argument>, <argument>arg</argument>, <argument>{

const char *a = tv_get_string_chk(TV_LIST_ITEM_TV(arg));

if (!a) {

shell_free_argv(argv);

xfree(exe_resolved);

return NULL;

}

argv[i++] = xstrdup(a);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>exe_resolved</name></expr>;</expr_stmt>

<return>return <expr><name>argv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mapblock_fill_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>mapblock_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mp</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>buffer_value</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>compatible</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lhs</name> <init>= <expr><call><name>str2special_save</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>,

<argument><expr><name>compatible</name></expr></argument>, <argument><expr><operator>!</operator><name>compatible</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mapmode</name> <init>= <expr><call><name>map_mode_to_chars</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>noremap_value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compatible</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>noremap_value</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>noremap_value</name> <operator>=</operator> <ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><operator>!</operator><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compatible</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"rhs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_allocated_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"rhs"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>str2special_save</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tv_dict_add_allocated_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"lhs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"noremap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>noremap_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"expr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"silent"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"sid"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"lnum"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name><operator>.</operator><name>sc_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>buffer_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"nowait"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_nowait</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_allocated_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mapmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>matchadd_dict_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>conceal_char</name></decl></parameter>,

<parameter><decl><type><name>win_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>di</name> <operator>=</operator> <call><name>tv_dict_find</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"conceal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>conceal_char</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>di</name> <operator>=</operator> <call><name>tv_dict_find</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>win</name> <operator>=</operator> <call><name>find_win_by_nr_or_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E957: Invalid window number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>return_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>regname</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>screenchar_adjust_grid</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier><modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_scroll_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name> <operator>&amp;&amp;</operator> <name><name>msg_grid</name><operator>.</operator><name>comp_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>row</name> <operator>&gt;=</operator> <name><name>msg_grid</name><operator>.</operator><name>comp_row</name></name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>row</name> <operator>&lt;</operator> <operator>(</operator><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name> <operator>+</operator> <name><name>msg_grid</name><operator>.</operator><name>comp_row</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>col</name> <operator>&lt;</operator> <name><name>msg_grid</name><operator>.</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>grid</name> <operator>=</operator> <operator>&amp;</operator><name>msg_grid</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>row</name> <operator>-=</operator> <name><name>msg_grid</name><operator>.</operator><name>comp_row</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_buffer_lines</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum_arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>append</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>typval_T</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>4<operator>,</operator> 5</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name>lnum_arg</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>append</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>append_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>curbuf_save</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>curwin_save</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_curbuf</name> <init>= <expr><name>buf</name> <operator>==</operator> <name>curbuf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>is_curbuf</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <name>lnum</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_curbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curbuf_save</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin_save</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_win_for_curbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>append</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>append_lnum</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>append_lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lines</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>lines</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>tv_list_first</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lines</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>u_sync_once</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>u_sync_once</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>append</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_savesub</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_curbuf</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>added</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>u_save</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>added</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>added</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><name>append_lnum</name></expr></argument>, <argument><expr><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>curbuf</name> <operator>||</operator> <name>wp</name> <operator>==</operator> <name>curwin</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>append_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_curbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>curbuf_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>curwin_save</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>setwinvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>win</name> <init>= <expr><call><name>find_win_by_nr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_switch_win</name> <init>= <expr><name>tp</name> <operator>!=</operator> <name>curtab</name> <operator>||</operator> <name>win</name> <operator>!=</operator> <name>curwin</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_switch_win</name>

<operator>||</operator> <call><name>switch_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>varname</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>numval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>varname</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>numval</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>strval</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>strval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><name>numval</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>varname_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>winvarname</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>varname_len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>winvarname</name></expr></argument>, <argument><expr><literal type="string">"w:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>winvarname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>varname_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name>winvarname</name></expr></argument>, <argument><expr><name>varname_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>winvarname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_switch_win</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_xdg_var_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XDGVarType</name></type> <name>xdg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenShouldKnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dirs</name> <init>= <expr><call><name>stdpaths_get_xdg_var</name><argument_list>(<argument><expr><name>xdg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dirs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>dir_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>vim_env_iter</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dir_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir_with_nvim</name> <init>= <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dir_with_nvim</name> <operator>=</operator> <call><name>concat_fnames_realloc</name><argument_list>(<argument><expr><name>dir_with_nvim</name></expr></argument>, <argument><expr><literal type="string">"nvim"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>dir_with_nvim</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dir_with_nvim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dir_with_nvim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>list_T</name> <modifier>*</modifier></type><name>string_to_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>keepempty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keepempty</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenMayKnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>encode_list_write</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_system_output_as_rettv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>retlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>wait_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>profiling</name> <init>= <expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>input_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>save_tv_as_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>input</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>executable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>tv_to_argv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>executable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>executable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_SHELL_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><call><name>shell_argv_to_str</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Executing command: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>profiling</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prof_child_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>os_system</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>input_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>profiling</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prof_child_exit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_SHELL_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>retlist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_alloc_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retlist</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>keepempty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keepempty</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <call><name>string_to_list</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator><name>keepempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memchrsub</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>res</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CAR</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>callback_from_typval</name><parameter_list>(<parameter><decl><type><name>Callback</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name> <operator>&amp;&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>partial</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>partial</name><operator>-&gt;</operator><name>pt_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>kCallbackPartial</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name>

<operator>&amp;&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>funcref</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>kCallbackFuncref</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name> <operator>&amp;&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>kCallbackNone</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E921: Invalid callback argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>callback_call</name><parameter_list>(<parameter><decl><type><name>Callback</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callback</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>argcount_in</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>argvars_in</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rettv</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>callback</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kCallbackFuncref</name></expr>:</case>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>callback</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>funcref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>partial</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kCallbackPartial</name></expr>:</case>

<expr_stmt><expr><name>partial</name> <operator>=</operator> <name><name>callback</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>partial</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name>partial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kCallbackNone</name></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<return>return <expr><call><name>call_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>argcount_in</name></expr></argument>, <argument><expr><name>argvars_in</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_ref_in_callback</name><parameter_list>(<parameter><decl><type><name>Callback</name> <modifier>*</modifier></type><name>callback</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>,

<parameter><decl><type><name>ht_stack_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_stack</name></decl></parameter>,

<parameter><decl><type><name>list_stack_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_stack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>callback</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kCallbackFuncref</name></expr>:</case>

<case>case <expr><name>kCallbackNone</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>kCallbackPartial</name></expr>:</case>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name><name>callback</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>partial</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>ht_stack</name></expr></argument>, <argument><expr><name>list_stack</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>set_ref_in_callback_reader</name><parameter_list>(<parameter><decl><type><name>CallbackReader</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>,

<parameter><decl><type><name>ht_stack_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_stack</name></decl></parameter>,

<parameter><decl><type><name>list_stack_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_stack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>set_ref_in_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>ht_stack</name></expr></argument>, <argument><expr><name>list_stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>ht_stack</name></expr></argument>, <argument><expr><name>list_stack</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>timer_T</name> <modifier>*</modifier></type><name>find_timer_by_nr</name><parameter_list>(<parameter><decl><type><name>varnumber_T</name></type> <name>xx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>timers</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_timer_info</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_list_append_dict</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>timer_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"paused"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>paused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"repeat"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>timer</name><operator>-&gt;</operator><name>repeat_count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>timer</name><operator>-&gt;</operator><name>repeat_count</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>tv_dict_item_alloc</name><argument_list>(<argument><expr><literal type="string">"callback"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>callback</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kCallbackPartial</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>callback</name><operator>.</operator><name>data</name><operator>.</operator><name>partial</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>callback</name><operator>.</operator><name>data</name><operator>.</operator><name>partial</name><operator>-&gt;</operator><name>pt_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>callback</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kCallbackFuncref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FUNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>callback</name><operator>.</operator><name>data</name><operator>.</operator><name>funcref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_timer_info_all</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tv_list_alloc_ret</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name><name>timers</name><operator>-&gt;</operator><name>table</name><operator>-&gt;</operator><name>n_occupied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<macro><name>map_foreach_value</name><argument_list>(<argument>timers</argument>, <argument>timer</argument>, <argument>{

if (!timer-&gt;stopped) {

add_timer_info(rettv, timer);

}

}</argument>)</argument_list></macro>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>timer_due_cb</name><parameter_list>(<parameter><decl><type><name>TimeWatcher</name> <modifier>*</modifier></type><name>tw</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>(</operator><name>timer_T</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_called_emsg</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>save_ex_pressedreturn</name> <init>= <expr><call><name>get_pressedreturn</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>stopped</name></name> <operator>||</operator> <name><name>timer</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>repeat_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>timer</name><operator>-&gt;</operator><name>repeat_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>timer_stop</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>TV_INITIAL_VALUE</name></expr>, <expr><name>TV_INITIAL_VALUE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>timer_id</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name> <init>= <expr><name>TV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_call</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>callback</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>called_emsg</name> <operator>&amp;&amp;</operator> <name>did_emsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>emsg_count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_exception</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>save_called_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_pressedreturn</name><argument_list>(<argument><expr><name>save_ex_pressedreturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>emsg_count</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>timer_stop</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>timer</name><operator>-&gt;</operator><name>stopped</name></name> <operator>&amp;&amp;</operator> <name><name>timer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>time_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>tw</name></name></expr></argument>, <argument><expr><name>timer_due_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>timer_decref</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>timer_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>timeout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>repeat_count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>Callback</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>timer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>emsg_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>repeat_count</name></name> <operator>=</operator> <name>repeat_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>timer_id</name></name> <operator>=</operator> <name>last_timer_id</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <operator>*</operator><name>callback</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>tw</name></name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>tw</name><operator>.</operator><name>events</name></name> <operator>=</operator> <call><name>multiqueue_new_child</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>tw</name><operator>.</operator><name>blockable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>tw</name></name></expr></argument>, <argument><expr><name>timer_due_cb</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>pmap_put</name></type>(<name>uint64_t</name>)<parameter_list>(<parameter><decl><type><name>timers</name></type></decl></parameter>, <parameter><decl><type><name><name>timer</name><operator>-&gt;</operator><name>timer_id</name></name></type></decl></parameter>, <parameter><decl><type><name>timer</name></type></decl></parameter>)</parameter_list>;</function_decl>

<return>return <expr><name><name>timer</name><operator>-&gt;</operator><name>timer_id</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>timer_stop</name><parameter_list>(<parameter><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>tw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>tw</name></name></expr></argument>, <argument><expr><name>timer_close_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer_close_cb</name><parameter_list>(<parameter><decl><type><name>TimeWatcher</name> <modifier>*</modifier></type><name>tw</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>(</operator><name>timer_T</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>multiqueue_free</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>tw</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>pmap_del</name></type>(<name>uint64_t</name>)<parameter_list>(<parameter><decl><type><name>timers</name></type></decl></parameter>, <parameter><decl><type><name><name>timer</name><operator>-&gt;</operator><name>timer_id</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>timer_decref</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer_decref</name><parameter_list>(<parameter><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>timer</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>timer_stop_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>timer_T</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<macro><name>map_foreach_value</name><argument_list>(<argument>timers</argument>, <argument>timer</argument>, <argument>{

timer_stop(timer);

}</argument>)</argument_list></macro>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>timer_teardown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>timer_stop_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>write_list</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>binary</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>TV_LIST_ITER_CONST</name><argument_list>(<argument>list</argument>, <argument>li</argument>, <argument>{

const char *const s = tv_get_string_chk(TV_LIST_ITEM_TV(li));

if (s == NULL) {

return false;

}

const char *hunk_start = s;

for (const char *p = hunk_start;; p++) {

if (*p == NUL || *p == NL) {

if (p != hunk_start) {

const ptrdiff_t written = file_write(fp, hunk_start,

(size_t)(p - hunk_start));

if (written &lt; <literal type="number">0</literal>) {

error = (int)written;

goto write_list_error;

}

}

if (*p == NUL) {

break;

} else {

hunk_start = p + <literal type="number">1</literal>;

const ptrdiff_t written = file_write(fp, (char[]){ NUL }, <literal type="number">1</literal>);

if (written &lt; <literal type="number">0</literal>) {

error = (int)written;

break;

}

}

}

}

if (!binary || TV_LIST_ITEM_NEXT(list, li) != NULL) {

const ptrdiff_t written = file_write(fp, <literal type="string">"\n"</literal>, <literal type="number">1</literal>);

if (written &lt; <literal type="number">0</literal>) {

error = (int)written;

goto write_list_error;

}

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name> <operator>=</operator> <call><name>file_flush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>write_list_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>write_list_error</name>:</label>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E80: Error while writing: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>os_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block>

<function><type><name>char</name> <modifier>*</modifier></type><name>save_tv_as_string</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>endnl</name></decl></parameter>)</parameter_list>

FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nobufnr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NUL</name></expr> </then><else>: <expr><operator>*</operator><name>p</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>end</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<macro><name>TV_LIST_ITER_CONST</name><argument_list>(<argument>list</argument>, <argument>li</argument>, <argument>{

*len += strlen(tv_get_string(TV_LIST_ITEM_TV(li))) + <literal type="number">1</literal>;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><operator>*</operator><name>len</name> <operator>+</operator> <name>endnl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>

<macro><name>TV_LIST_ITER_CONST</name><argument_list>(<argument>list</argument>, <argument>li</argument>, <argument>{

for (const char *s = tv_get_string(TV_LIST_ITEM_TV(li)); *s != NUL; s++) {

*end++ = (*s == <literal type="char">'\n'</literal>) ? NUL : *s;

}

if (endnl || TV_LIST_ITEM_NEXT(list, li) != NULL) {

*end++ = <literal type="char">'\n'</literal>;

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pos_T</name> <modifier>*</modifier></type><name>var2fpos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dollar_lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_fnum</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>||</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>tv_list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name>

<operator>&amp;&amp;</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>VIsual</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>getmark_buf_fnum</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ret_fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>(</operator><name>pos_T</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>&amp;&amp;</operator> <name>dollar_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>dollar_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>&amp;</operator><name>pos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>list2fpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>posp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fnump</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>curswantp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name>

<operator>||</operator> <operator>(</operator><name>l</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>tv_list_len</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>fnump</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator>

<operator>||</operator> <call><name>tv_list_len</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name>fnump</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fnump</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fnump</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>posp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>posp</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>posp</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>posp</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curswantp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curswantp</name> <operator>=</operator> <call><name>tv_list_find_nr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_env_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</init> <condition><expr><call><name>vim_isIDc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>*</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_id_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</init> <condition><expr><call><name>eval_isnamec</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>*</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>namespace_char</name></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>*</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_name_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>alias</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>alias</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator><name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator><name>KS_EXTRA</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator><name>KE_SNR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><call><name>get_id_len</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>eval_fname_script</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>find_name_end</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>expr_start</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>expr_end</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>FNE_CHECK_START</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>*</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>temp_string</name> <init>= <expr><call><name>make_expanded_name</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>expr_start</name></expr></argument>,

<argument><expr><name>expr_end</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>alias</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>temp_string</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>temp_string</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>get_id_len</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>verbose</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invexpr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>find_name_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>expr_start</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>expr_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_nest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>br_nest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>expr_start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>expr_end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FNE_CHECK_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>eval_isnamec</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FNE_INCL_BR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <name>mb_nest</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name>br_nest</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\''</literal></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>br_nest</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mb_nest</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'}'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>namespace_char</name></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_nest</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>br_nest</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>br_nest</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>br_nest</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb_nest</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_start</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>expr_start</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>expr_start</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb_nest</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_start</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>mb_nest</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>expr_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>expr_end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>make_expanded_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>in_start</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_start</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_end</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>in_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name>c1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>temp_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>nextcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>in_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>expr_start</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>expr_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>in_end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>in_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_result</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>expr_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextcmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp_result</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nextcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>temp_result</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>expr_start</name> <operator>-</operator> <name>in_start</name><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>in_end</name> <operator>-</operator> <name>expr_end</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>in_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>temp_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>expr_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>temp_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>in_end</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>expr_start</name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>expr_end</name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp_result</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>find_name_end</name><argument_list>(<argument><expr><name>retval</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>expr_start</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>expr_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp_result</name> <operator>=</operator> <call><name>make_expanded_name</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>expr_start</name></expr></argument>,

<argument><expr><name>expr_end</name></expr></argument>, <argument><expr><name>temp_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>temp_result</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval_isnamec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>AUTOLOAD_CHAR</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval_isnamec1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>varnumber_T</name></type> <name>get_vim_var_nr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> FUNC_ATTR_PURE

<block>{<block_content>

<return>return <expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_nr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_vim_var_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> FUNC_ATTR_PURE FUNC_ATTR_NONNULL_RET

<block>{<block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>list_T</name> <modifier>*</modifier></type><name>get_vim_var_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> FUNC_ATTR_PURE

<block>{<block_content>

<return>return <expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>dict_T</name> <modifier>*</modifier></type><name>get_vim_var_dict</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> FUNC_ATTR_PURE

<block>{<block_content>

<return>return <expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_dict</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_vim_var_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CHAR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_vcount</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set_prevcount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>set_prevcount</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_PREVCOUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>VV_COUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_COUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_COUNT1</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>count1</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_vim_var_nr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VimVarIndex</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>varnumber_T</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_vim_var_special</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VimVarIndex</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SpecialVarValue</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_special</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_vim_var_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VimVarIndex</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_vim_var_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VimVarIndex</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_list</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_vim_var_dict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VimVarIndex</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_dict</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_set_keys_readonly</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_reg_var</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>regname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vimvars</name><index>[<expr><name>VV_REG</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>vimvars</name><index>[<expr><name>VV_REG</name></expr>]</index></name><operator>.</operator><name><name>vv_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_REG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>v_exception</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>vimvars</name><index>[<expr><name>VV_EXCEPTION</name></expr>]</index></name><operator>.</operator><name>vv_str</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_EXCEPTION</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>v_throwpoint</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>vimvars</name><index>[<expr><name>VV_THROWPOINT</name></expr>]</index></name><operator>.</operator><name>vv_str</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_THROWPOINT</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>set_cmdarg</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldarg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name> <init>= <expr><name><name>vimvars</name><index>[<expr><name>VV_CMDARG</name></expr>]</index></name><operator>.</operator><name>vv_str</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_CMDARG</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>oldarg</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_BIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_NOBIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>read_edit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_enc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name> <operator>+</operator> <name><name>eap</name><operator>-&gt;</operator><name>force_enc</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>newval_len</name> <init>= <expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newval</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>newval_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_BIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name></expr></argument>, <argument><expr><literal type="string">" ++bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_NOBIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name></expr></argument>, <argument><expr><literal type="string">" ++nobin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>newval</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>read_edit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">" ++edit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newval_len</name></expr></argument>, <argument><expr><literal type="string">" ++ff=%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>==</operator> <literal type="char">'u'</literal></expr> ?</condition><then> <expr><literal type="string">"unix"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>==</operator> <literal type="char">'d'</literal></expr> ?</condition><then> <expr><literal type="string">"dos"</literal></expr> </then><else>: <expr><literal type="string">"mac"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_enc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newval_len</name></expr></argument>, <argument><expr><literal type="string">" ++enc=%s"</literal></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name> <operator>+</operator> <name><name>eap</name><operator>-&gt;</operator><name>force_enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name> <operator>==</operator> <name>BAD_KEEP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" ++bad=keep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name> <operator>==</operator> <name>BAD_DROP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" ++bad=drop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newval_len</name></expr></argument>, <argument><expr><literal type="string">" ++bad=%c"</literal></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_CMDARG</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>

<return>return <expr><name>oldval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_var_tv</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, 

<parameter><decl><type><name>dictitem_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>dip</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>no_autoload</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>no_autoload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dip</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E121: Undefined variable: %.*s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_vars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>eval_lavars_used</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>find_var_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <call><name>get_funccal_local_ht</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ht</name> <operator>==</operator> <call><name>get_funccal_args_ht</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eval_lavars_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tv_is_luafunc</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>==</operator> <name>vvlua_partial</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_luafunc_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paren</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>(</operator><ternary><condition><expr><name>paren</name></expr> ?</condition><then> <expr><literal type="char">'('</literal></expr> </then><else>: <expr><name>NUL</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name><operator>-</operator><name>str</name><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>handle_subscript</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>evaluate</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>functv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>lua</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_is_luafunc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lua</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>check_luafunc_name</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator> <operator>+=</operator> <name>slen</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'['</literal>

<operator>||</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>evaluate</name> <operator>||</operator> <call><name>tv_is_func</name><argument_list>(<argument><expr><operator>*</operator><name>rettv</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>functv</name> <operator>=</operator> <operator>*</operator><name>rettv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>functv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>functv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lua</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>functv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_func_tv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>lua</name></expr> ?</condition><then> <expr><name>slen</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>evaluate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>functv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selfdict</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>selfdict</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selfdict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>selfdict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>selfdict</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval_index</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>evaluate</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>selfdict</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>tv_is_func</name><argument_list>(<argument><expr><operator>*</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_selfdict</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_selfdict</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_auto</name></name>

<operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname_buf</name><index>[<expr><name>FLEN_FIXED</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name> <operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_func</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <ternary><condition><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>

?</condition><then> <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>

</then><else>: <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_name</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>fname_trans_sid</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_DICT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><operator>(</operator><name>partial_T</name> <operator>*</operator><operator>)</operator><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>partial_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>=</operator> <name>selfdict</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name><name>selfdict</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_auto</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>ret_pt</name> <init>= <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret_pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>ret_pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>=</operator> <name><name>ret_pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ptr_ref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret_pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>arg_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>typval_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ret_pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>=</operator> <operator>(</operator><name>typval_T</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>arg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>=</operator> <name><name>ret_pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret_pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>partial_unref</name><argument_list>(<argument><expr><name>ret_pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tv_stringify</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>varp</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name>

<operator>||</operator> <name><name>varp</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name>

<operator>||</operator> <name><name>varp</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name>

<operator>||</operator> <name><name>varp</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name>

<operator>||</operator> <name><name>varp</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f_string</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>res</name> <init>= <expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>dictitem_T</name> <modifier>*</modifier></type><name>find_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>,

<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>htp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_autoload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ht</name> <init>= <expr><call><name>find_var_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>htp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>htp</name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret</name> <init>= <expr><call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>,

<argument><expr><name>varname</name></expr></argument>,

<argument><expr><name>name_len</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>varname</name> <operator>-</operator> <name>name</name><operator>)</operator></expr></argument>,

<argument><expr><name>no_autoload</name> <operator>||</operator> <name>htp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>find_var_in_scoped_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>no_autoload</name> <operator>||</operator> <name>htp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>dictitem_T</name> <modifier>*</modifier></type><name>find_var_in_ht</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ht</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>htname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>varname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>varname_len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>no_autoload</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varname_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>htname</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>SCRIPT_SV</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>sv_var</name></expr>;</return>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>globvars_var</name></expr>;</return>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vimvars_var</name></expr>;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_bufvar</name></name></expr>;</return>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_winvar</name></name></expr>;</return>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>curtab</name><operator>-&gt;</operator><name>tp_winvar</name></name></expr>;</return>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <return>return <expr><operator>(</operator><ternary><condition><expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>current_funccal</name><operator>-&gt;</operator><name>l_vars_var</name></name></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><operator>(</operator><ternary><condition><expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>get_funccal</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>l_avars_var</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find_len</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>varname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>globvarht</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_autoload</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>script_autoload</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><name>varname_len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find_len</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>varname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>funccall_T</name> <modifier>*</modifier></type><name>get_funccal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>funccal</name> <init>= <expr><name>current_funccal</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_backtrace_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>debug_backtrace_level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>temp_funccal</name> <init>= <expr><name><name>funccal</name><operator>-&gt;</operator><name>caller</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp_funccal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>funccal</name> <operator>=</operator> <name>temp_funccal</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>debug_backtrace_level</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>funccal</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>hashtab_T</name> <modifier>*</modifier></type><name>get_funccal_args_ht</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><call><name>get_funccal</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>l_avars</name><operator>.</operator><name>dv_hashtab</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>hashtab_T</name> <modifier>*</modifier></type><name>get_funccal_local_ht</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><call><name>get_funccal</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>l_vars</name><operator>.</operator><name>dv_hashtab</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>hashtab_T</name> <modifier>*</modifier></type><name>find_var_ht_dict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>varname</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>AUTOLOAD_CHAR</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>varname</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compat_hashtab</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>compat_hashtab</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>&amp;</operator><name>globvardict</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>&amp;</operator><call><name>get_funccal</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>l_vars</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>varname</name> <operator>=</operator> <name>name</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>&amp;</operator><name>globvardict</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>memchr</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>name_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>, <argument><expr><name>name_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_vars</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_vars</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_vars</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>&amp;</operator><name>vimvardict</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>current_funccal</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>&amp;</operator><call><name>get_funccal</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>l_avars</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name>current_funccal</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>&amp;</operator><call><name>get_funccal</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>l_vars</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'s'</literal> 

<operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>&amp;</operator><call><name>SCRIPT_SV</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>sv_dict</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>d</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>d</name><operator>)</operator><operator>-&gt;</operator><name>dv_hashtab</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>hashtab_T</name> <modifier>*</modifier></type><name>find_var_ht</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<return>return <expr><call><name>find_var_ht_dict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_var_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>new_script_vars</name><parameter_list>(<parameter><decl><type><name>scid_T</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scriptvar_T</name> <modifier>*</modifier></type><name>sv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_scripts</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>id</name> <operator>-</operator> <name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_mask</name></name> <operator>==</operator> <name>HT_INIT_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_smallarray</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>SCRIPT_SV</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_var</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sv</name><operator>-&gt;</operator><name>sv_dict</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name> <operator>&lt;</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>SCRIPT_SV</name><argument_list>(<argument><expr><name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scriptvar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sv</name><operator>-&gt;</operator><name>sv_dict</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sv</name><operator>-&gt;</operator><name>sv_var</name></name></expr></argument>, <argument><expr><name>VAR_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ga_scripts</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_var_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>ScopeDictDictItem</name> <modifier>*</modifier></type><name>dict_var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_scope</name></name> <operator>=</operator> <name>scope</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name> <operator>=</operator> <name>DO_NOT_FREE_CNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name>dict</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>watchers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>unref_var_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name> <operator>-=</operator> <name>DO_NOT_FREE_CNT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vars_clear</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vars_clear_ext</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vars_clear_ext</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_lock</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DI_FLAGS_ALLOC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_var</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_one_var</name><parameter_list>(<parameter><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><call><name>encode_tv2echo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_one_var_a</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>s</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_one_var_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>msg_puts_attr_len</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>string</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>string</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>copy</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><call><name>set_var_const</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_var_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>copy</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_const</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>find_var_ht_dict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>watched</name> <init>= <expr><call><name>tv_dict_is_watched</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>varname</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_illvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>name_len</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>varname</name> <operator>-</operator> <name>name</name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var_in_scoped_ht</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_is_func</name><argument_list>(<argument><expr><operator>*</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>var_check_func_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>oldtv</name> <init>= <expr><name>TV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_cannot_mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_check_ro</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>vimvarht</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"searchforward"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_search_direction</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr> ?</condition><then> <expr><literal type="char">'/'</literal></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"hlsearch"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>no_hlsearch</name> <operator>=</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E963: setting %s to value with wrong type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>watched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>vimvarht</name> <operator>||</operator> <name>ht</name> <operator>==</operator> <call><name>get_funccal_args_ht</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_illvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_varname</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictitem_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_ALLOC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DI_FLAGS_LOCK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_init</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>watched</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oldtv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_watcher_notify</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_watcher_notify</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_const</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>|=</operator> <name>VAR_LOCKED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>var_check_ro</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DI_FLAGS_RO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error_message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><name>e_readonlyvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DI_FLAGS_RO_SBX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>sandbox</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error_message</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E794: Cannot set variable in the sandbox: \"%.*s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error_message</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>==</operator> <name>TV_TRANSLATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>name_len</name> <operator>==</operator> <name>TV_CSTRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>error_message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>name_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>var_check_fixed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DI_FLAGS_FIX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>==</operator> <name>TV_TRANSLATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>name_len</name> <operator>==</operator> <name>TV_CSTRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EMSG3</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E795: Cannot delete variable %.*s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>name_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>var_check_func_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>new_var</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"wbst"</literal></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ASCII_ISUPPER</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>

</then><else>: <expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E704: Funcref variable name must start with a capital: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_var</name> <operator>&amp;&amp;</operator> <call><name>function_exists</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E705: Variable name conflicts with existing function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>valid_varname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>varname</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>==</operator> <name>varname</name> <operator>||</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>AUTOLOAD_CHAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_illvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>var_item_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vimconv_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>conv</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>from</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>to</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>deep</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2<operator>,</operator> 3</function>)

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recurse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recurse</name> <operator>&gt;=</operator> <name>DICT_MAXNEST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E698: variable nested too deep for making a copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>recurse</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case>

<case>case <expr><name>VAR_FUNC</name></expr>:</case>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_STRING</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>conv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>conv</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name>

<operator>||</operator> <name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>(</operator><name>vimconv_T</name> <operator>*</operator><operator>)</operator><name>conv</name></expr></argument>,

<argument><expr><name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VAR_LIST</name></expr>:</case>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>copyID</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>tv_list_copyid</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>copyID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <call><name>tv_list_latest_copy</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <call><name>tv_list_copy</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VAR_DICT</name></expr>:</case>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>copyID</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>==</operator> <name>copyID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_copydict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <call><name>tv_dict_copy</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>from</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"var_item_copy(UNKNOWN)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><operator>--</operator><name>recurse</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

<function><type><name>void</name></type> <name>ex_echo</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>atstart</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_clear</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>did_emsg_before</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>need_clr_eos</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>did_emsg</name> <operator>==</operator> <name>did_emsg_before</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invexpr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_clr_eos</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_clr_eos</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>atstart</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>atstart</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_echo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_sb_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_echo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>echo_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><call><name>encode_tv2echo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tofree</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_ext_set_kind</name><argument_list>(<argument><expr><literal type="string">"echo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_multiline_attr</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>, <argument><expr><name>echo_attr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg_skip</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>need_clear</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_echo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_echohl</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>echo_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>echo_attr</name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_execute</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>eval1_emsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>argstr</name> <init>= <expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_execute</name></expr>

?</condition><then> <expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>tv_stringify</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>argstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>argstr</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_echomsg</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_echoerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_sb_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_echomsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_ext_set_kind</name><argument_list>(<argument><expr><literal type="string">"echomsg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_ATTR</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>echo_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_echoerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>save_did_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_ext_set_kind</name><argument_list>(<argument><expr><literal type="string">"echoerr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_abort</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_execute</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><name>DOCMD_NOWAIT</name><operator>|</operator><name>DOCMD_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_option_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>opt_flags</name> <operator>=</operator> <name>OPT_GLOBAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>opt_flags</name> <operator>=</operator> <name>OPT_LOCAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>opt_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_function</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>theline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line_to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>saved_did_emsg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>saved_wait_return</name> <init>= <expr><name>need_wait_return</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>newargs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>newlines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>varargs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>overwrite</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nesting</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funcdict_T</name></type> <name>fudi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>func_nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>paren</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>sourcing_lnum_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>sourcing_lnum_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_heredoc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>skip_until</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>heredoc_trimmed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>show_block</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>do_concat</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>func_name_refcount</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>list_func_head</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>p_ic</name></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_func_head</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>trans_function_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>, <argument><expr><name>TFN_NO_AUTOLOAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fudi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>paren</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>paren</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>saved_did_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paren</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret_free</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>list_func_head</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FUNCLINE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">99</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_prt_line</name><argument_list>(<argument><expr><call><name>FUNCLINE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><literal type="string">"endfunction"</literal></expr> </then><else>: <expr><literal type="string">" endfunction"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E123: Undefined function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>ret_free</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E124: Missing '(': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret_free</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newargs</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fudi</name><operator>.</operator><name>fd_di</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>tv_is_func</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <name>K_SPECIAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>arg</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>eval_isnamec1</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>eval_isnamec</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_invarg2</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fudi</name><operator>.</operator><name>fd_dict</name><operator>-&gt;</operator><name>dv_scope</name></name> <operator>==</operator> <name>VAR_DEF_SCOPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E862: Cannot use g: here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_function_args</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>newargs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varargs</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>errret_2</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyTyped</name> <operator>&amp;&amp;</operator> <call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>show_block</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_ext_cmdline_block_append</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"range"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FC_RANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"dict"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FC_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"abort"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FC_ABORT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"closure"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FC_CLOSURE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name>

<argument_list>(<argument><expr><literal type="string">"E932: Closure function should not be at top level: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line_arg</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_emsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_funcdict</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><name>e_funcexts</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>&amp;&amp;</operator> <name>did_emsg</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>erret</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sourcing_lnum_top</name> <operator>=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nesting</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>theline</name> <operator>=</operator> <name>line_arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>theline</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line_arg</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>line_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_arg</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>line_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>theline</name> <operator>=</operator> <call><name>getcmdline</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>do_concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>theline</name> <operator>=</operator> <call><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>do_concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>line_to_free</name> <operator>=</operator> <name>theline</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>theline</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E126: Missing :endfunction"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>show_block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>indent</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_ext_cmdline_block_append</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>indent</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sourcing_lnum_off</name> <operator>=</operator> <call><name>get_sourced_lnum</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcing_lnum</name> <operator>&lt;</operator> <name>sourcing_lnum_off</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sourcing_lnum_off</name> <operator>-=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sourcing_lnum_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_until</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>heredoc_trimmed</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name>is_heredoc</name> <operator>&amp;&amp;</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>theline</name><operator>)</operator>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>theline</name></expr></argument>, <argument><expr><name>heredoc_trimmed</name></expr></argument>,

<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>heredoc_trimmed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>heredoc_trimmed</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>theline</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_heredoc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>theline</name></expr>

?</condition><then> <expr><name>theline</name></expr> </then><else>: <expr><name>theline</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>heredoc_trimmed</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>theline</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>heredoc_trimmed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>skip_until</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>skip_until</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>heredoc_trimmed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_concat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_heredoc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>theline</name></expr>;</init> <condition><expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>checkforcmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"endfunction"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>nesting</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>nextcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextcmd</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>line_arg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>line_arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextcmd</name> <operator>=</operator> <name>line_arg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>give_warning2</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"W22: Text found after :endfunction: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nextcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name>nextcmd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_to_free</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name> <operator>=</operator> <name>line_to_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_to_free</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"wh"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"for"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"try"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkforcmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>eval_fname_script</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>trans_function_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nesting</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_range</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"nge"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip_until</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>skiptowhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator><literal type="char">'&lt;'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'3'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator><operator>)</operator>

<operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip_until</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>skip_until</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>skiptowhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal>

<operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal>

<operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator><literal type="char">'&lt;'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"trim"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>heredoc_trimmed</name> <operator>=</operator>

<call><name>vim_strnsave</name><argument_list>(<argument><expr><name>theline</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>theline</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>skip_until</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_concat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_heredoc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>sourcing_lnum_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>newlines</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name><name>newlines</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sourcing_lnum_off</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>newlines</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name><name>newlines</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>line_arg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line_arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line_arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>||</operator> <name>did_emsg</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>erret</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E707: Function name conflicts with variable: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_sid</name></name> <operator>!=</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name>

<operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_seq</name></name> <operator>==</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_seq</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><name>e_funcexts</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_calls</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E127: Cannot redefine function %s: It is in use"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>|=</operator> <name>FC_REMOVED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overwrite</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_clear_items</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_prof_initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_funcdict</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_di</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>,

<argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tv_check_lock</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>,

<argument><expr><name>TV_CSTRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>++</operator><name>func_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scriptname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scriptname</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>autoload_name</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>scriptname</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&gt;</operator> <name>plen</name> <operator>&amp;&amp;</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>,

<argument><expr><name>sourcing_name</name> <operator>+</operator> <name>slen</name> <operator>-</operator> <name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>scriptname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"E746: Function name does not match script file name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ufunc_T</name></expr></argument>, <argument><expr><name>uf_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_di</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fudi</name><operator>.</operator><name>fd_di</name></name> <operator>=</operator> <call><name>tv_dict_item_alloc</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name></expr></argument>, <argument><expr><name><name>fudi</name><operator>.</operator><name>fd_di</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_di</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fudi</name><operator>.</operator><name>fd_di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>fudi</name><operator>.</operator><name>fd_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FUNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fudi</name><operator>.</operator><name>fd_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FC_DICT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overwrite</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func_hashtab</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>=</operator> <call><name>UF2HIKEY</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func_hashtab</name></expr></argument>, <argument><expr><call><name>UF2HIKEY</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_args</name></name> <operator>=</operator> <name>newargs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name></name> <operator>=</operator> <name>newlines</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FC_CLOSURE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>register_closure</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prof_def_func</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>func_do_profile</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_varargs</name></name> <operator>=</operator> <name>varargs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sandbox</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FC_SANDBOX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name></name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>sourcing_lnum_top</name></expr>;</expr_stmt>

<goto>goto <name>ret_free</name>;</goto>

<label><name>erret</name>:</label>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>errret_2</name>:</label>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ret_free</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>skip_until</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>line_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>saved_did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>|=</operator> <name>saved_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_ext_cmdline_block_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>trans_function_name</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>skip</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>funcdict_T</name> <modifier>*</modifier></type><name>fdp</name></decl></parameter>, 

<parameter><decl><type><name>partial_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>partial</name></decl></parameter> 

)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lval_T</name></type> <name>lv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>funcdict_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <name>KS_EXTRA</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_id_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmemdupz</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lead</name> <operator>=</operator> <call><name>eval_fname_script</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lead</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>lead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>get_lval</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>GLV_READ_ONLY</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>lead</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>FNE_CHECK_START</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E129: Function name required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>lv</name><operator>.</operator><name>ll_tv</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lead</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>lv</name><operator>.</operator><name>ll_range</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>find_name_end</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FNE_INCL_BR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_tv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fd_dict</name></name> <operator>=</operator> <name><name>lv</name><operator>.</operator><name>ll_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fd_newkey</name></name> <operator>=</operator> <name><name>lv</name><operator>.</operator><name>ll_newkey</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lv</name><operator>.</operator><name>ll_newkey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fd_di</name></name> <operator>=</operator> <name><name>lv</name><operator>.</operator><name>ll_di</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name> <operator>&amp;&amp;</operator> <name><name>lv</name><operator>.</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>end</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name>

<operator>&amp;&amp;</operator> <name><name>lv</name><operator>.</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>==</operator> <name>vvlua_partial</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>check_luafunc_name</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><name>e_invexpr2</name></expr></argument>, <argument><expr><literal type="string">"v:lua"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>end</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>partial_name</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>end</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>partial</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>partial</name> <operator>=</operator> <name><name>lv</name><operator>.</operator><name>ll_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TFN_QUIET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fdp</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>lv</name><operator>.</operator><name>ll_dict</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fd_newkey</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_funcref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>end</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>end</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>deref_func_name</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>TFN_NO_AUTOLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>==</operator> <name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TFN_NO_DEREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>pp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>deref_func_name</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>TFN_NO_AUTOLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <operator>*</operator><name>pp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"&lt;SNR&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lead</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>==</operator> <name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name>

<operator>&amp;&amp;</operator> <name><name>lv</name><operator>.</operator><name>ll_name_len</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name></expr></argument>, <argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lv</name><operator>.</operator><name>ll_name_len</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lead</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lead</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name><name>lv</name><operator>.</operator><name>ll_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>lv</name><operator>.</operator><name>ll_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lv</name><operator>.</operator><name>ll_name_len</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>end</name> <operator>-</operator> <name><name>lv</name><operator>.</operator><name>ll_name</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sid_buf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sid_buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lead</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>eval_fname_sid</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_exp_name</name></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <call><name>eval_fname_sid</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_usingsid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sid_buf_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sid_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sid_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%"</literal> <name>PRIdSCID</name> <literal type="string">"_"</literal></expr></argument>, <argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lead</name> <operator>+=</operator> <name>sid_buf_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TFN_INT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>builtin_function</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name><name>lv</name><operator>.</operator><name>ll_name_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E128: Function name must start with a capital or \"s:\": %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TFN_QUIET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TFN_NO_DEREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>xmemrchr</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name><name>lv</name><operator>.</operator><name>ll_name_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E884: Function name cannot contain a colon: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>lead</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <name>lead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sid_buf_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>sid_buf</name></expr></argument>, <argument><expr><name>sid_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>lead</name></expr></argument>, <argument><expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>lead</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>end</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval_fname_script</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>mb_strnicmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"SID&gt;"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>mb_strnicmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"SNR&gt;"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">5</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>eval_fname_sid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_PURE FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_WARN_UNUSED_RESULT

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<return>return <expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_func_head</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><ternary><condition><expr><name>force</name></expr> ?</condition><then> <expr><literal type="string">"function! "</literal></expr> </then><else>: <expr><literal type="string">"function "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><literal type="string">"&lt;SNR&gt;"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>FUNCARG</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_varargs</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_ABORT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" abort"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_RANGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" dict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_CLOSURE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" closure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ufunc_T</name> <modifier>*</modifier></type><name>find_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func_hashtab</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>free_all_functions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>todo</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>used</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>current_funccal</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name><name>current_funccal</name><operator>-&gt;</operator><name>rettv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanup_function_call</name><argument_list>(<argument><expr><name>current_funccal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>hi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>func_name_refcount</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skipped</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_clear</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>used</name> <operator>!=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skipped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>todo</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<expr_stmt><expr><name>skipped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <name>skipped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>hi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>todo</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>func_name_refcount</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skipped</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>func_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skipped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>skipped</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func_hashtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>translated_function_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>builtin_function</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>find_internal_func</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>find_func</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>function_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_deref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>nm</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>n</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>TFN_INT</name> <operator>|</operator> <name>TFN_QUIET</name> <operator>|</operator> <name>TFN_NO_AUTOLOAD</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>no_deref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>TFN_NO_DEREF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>trans_function_name</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nm</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nm</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>nm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>nm</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>nm</name> <operator>==</operator> <literal type="char">'('</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>translated_function_exists</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>builtin_function</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ASCII_ISLOWER</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>

?</condition><then> <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>memchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>func_do_profile</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_prof_initialized</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_self</name></name> <operator>=</operator> <call><name>profile_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_total</name></name> <operator>=</operator> <call><name>profile_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proftime_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proftime_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_prof_initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>func_dump_profile</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>sorttab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>st_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>sorttab</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ufunc_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_prof_initialized</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sorttab</name><index>[<expr><name>st_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"FUNCTION &lt;SNR&gt;%s()\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"FUNCTION %s()\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_sid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>LastSet</name></type> <name>last_set</name> <init>= <expr><operator>(</operator><name>LastSet</name><operator>)</operator><block>{

<expr><operator>.</operator><name>script_ctx</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name></name></expr>,

<expr><operator>.</operator><name>channel_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_scriptname</name><argument_list>(<argument><expr><name>last_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" Defined: %s:%"</literal> <name>PRIdLINENR</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Called 1 time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Called %d times\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Total time: %s\n"</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" Self time: %s\n"</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"count total (s) self (s)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FUNCLINE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prof_func_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>FUNCLINE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>st_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sorttab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>st_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ufunc_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>prof_total_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prof_sort_list</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sorttab</name></expr></argument>, <argument><expr><name>st_len</name></expr></argument>, <argument><expr><literal type="string">"TOTAL"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sorttab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>st_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ufunc_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>prof_self_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prof_sort_list</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sorttab</name></expr></argument>, <argument><expr><name>st_len</name></expr></argument>, <argument><expr><literal type="string">"SELF"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sorttab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prof_sort_list</name><parameter_list>(

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,

<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>sorttab</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>st_len</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefer_self</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"FUNCTIONS SORTED ON %s TIME\n"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"count total (s) self (s) function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>st_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>sorttab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prof_func_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>,

<argument><expr><name>prefer_self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" &lt;SNR&gt;%s()\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" %s()\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prof_func_line</name><parameter_list>(

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>total</name></decl></parameter>,

<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefer_self</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%5d "</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefer_self</name> <operator>&amp;&amp;</operator> <call><name>profile_equal</name><argument_list>(<argument><expr><operator>*</operator><name>total</name></expr></argument>, <argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>*</operator><name>total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefer_self</name> <operator>&amp;&amp;</operator> <call><name>profile_equal</name><argument_list>(<argument><expr><operator>*</operator><name>total</name></expr></argument>, <argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prof_total_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>profile_cmp</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prof_self_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>profile_cmp</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>script_autoload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>reload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p</name> <operator>==</operator> <name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><call><name>autoload_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scriptname</name> <init>= <expr><name>tofree</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ga_loaded</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga_loaded</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>scriptname</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reload</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ga_loaded</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>ga_loaded</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GA_APPEND</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga_loaded</name></expr></argument>, <argument><expr><name>scriptname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>source_runtime</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>scriptname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>autoload_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_MALLOC FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>scriptname</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>name_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"autoload/.vim"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scriptname</name></expr></argument>, <argument><expr><literal type="string">"autoload/"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"autoload/"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scriptname</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"autoload/"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>auchar_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"autoload/"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init>

<condition><expr><name>i</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"autoload/"</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>name_len</name></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>scriptname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AUTOLOAD_CHAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>scriptname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>auchar_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scriptname</name> <operator>+</operator> <name>auchar_idx</name></expr></argument>, <argument><expr><literal type="string">".vim"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">".vim"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>scriptname</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_user_func_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>&lt;</operator> <name><name>func_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>done</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_DICT</name><operator>)</operator>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;lambda&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name>IOSIZE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cat_func_name</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_USER_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_varargs</name></name> <operator>&amp;&amp;</operator> <call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_args</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>IObuff</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cat_func_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;SNR&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>func_name_refcount</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_delfunction</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funcdict_T</name></type> <name>fudi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>trans_function_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fudi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_funcref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nofunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_calls</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E131: Cannot delete function %s: It is in use"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot delete function %s: It is being used internally"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_item_remove</name><argument_list>(<argument><expr><name><name>fudi</name><operator>.</operator><name>fd_dict</name></name></expr></argument>, <argument><expr><name><name>fudi</name><operator>.</operator><name>fd_di</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><call><name>func_name_refcount</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>func_remove</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>|=</operator> <name>FC_DELETED</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>func_clear_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>func_remove</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func_hashtab</name></expr></argument>, <argument><expr><call><name>UF2HIKEY</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>func_hashtab</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>func_clear_items</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_args</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>func_clear</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_cleared</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_cleared</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_clear_items</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>funccal_unref</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>func_free</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FC_DELETED</name> <operator>|</operator> <name>FC_REMOVED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>func_remove</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>func_clear_free</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>func_clear</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>func_unref</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>func_name_refcount</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entered_free_all_mem</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"func_unref()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"func_unref()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>func_ptr_unref</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>func_ptr_unref</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_calls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>func_clear_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>func_ref</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>func_name_refcount</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"func_ref()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>func_ptr_ref</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>fc_referenced</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>funccall_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fc</name></decl></parameter>)</parameter_list>

FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>fc</name><operator>-&gt;</operator><name>l_varlist</name><operator>.</operator><name>lv_refcount</name></name> 

<operator>!=</operator> <name>DO_NOT_FREE_CNT</name><operator>)</operator>

<operator>||</operator> <name><name>fc</name><operator>-&gt;</operator><name>l_vars</name><operator>.</operator><name>dv_refcount</name></name> <operator>!=</operator> <name>DO_NOT_FREE_CNT</name>

<operator>||</operator> <name><name>fc</name><operator>-&gt;</operator><name>l_avars</name><operator>.</operator><name>dv_refcount</name></name> <operator>!=</operator> <name>DO_NOT_FREE_CNT</name>

<operator>||</operator> <name><name>fc</name><operator>-&gt;</operator><name>fc_refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>call_user_func</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>firstline</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lastline</name></decl></parameter>,

<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 3<operator>,</operator> 4</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_sourcing_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>save_sourcing_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>using_sandbox</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fixvar_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>islambda</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>wait_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>call_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>started_profiling</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_save_redo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>save_redo_T</name></type> <name>save_redo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;=</operator> <name>p_mfd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E132: Function call depth is higher than 'maxfuncdepth'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_search_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ins_compl_active</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>saveRedobuff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_save_redo</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_calls</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fc</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>funccall_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>caller</name></name> <operator>=</operator> <name>current_funccal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>rettv</name></name> <operator>=</operator> <name>rettv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>linenr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>returned</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>ex_nesting_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>breakpoint</name></name> <operator>=</operator> <call><name>dbg_find_breakpoint</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>dbg_tick</name></name> <operator>=</operator> <name>debug_tick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>fc_refcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>fc_copyID</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>fc_funcs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ufunc_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ptr_ref</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;lambda&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>islambda</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_vars</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_vars_var</name></name></expr></argument>, <argument><expr><name>VAR_DEF_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selfdict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>fixvar</name><index>[<expr><name>fixvar_idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang_analyzer__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"self"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_vars</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name>selfdict</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>selfdict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars_var</name></name></expr></argument>, <argument><expr><name>VAR_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_nr_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name></name></expr></argument>, <argument><expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>fixvar</name><index>[<expr><name>fixvar_idx</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name>argcount</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name><operator>.</operator><name>dv_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>fixvar</name><index>[<expr><name>fixvar_idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang_analyzer__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_varlist</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_init_static</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_varlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_set_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_varlist</name></name></expr></argument>, <argument><expr><name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_nr_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name></name></expr></argument>, <argument><expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>fixvar</name><index>[<expr><name>fixvar_idx</name><operator>++</operator></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">"firstline"</literal></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_nr_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name></name></expr></argument>, <argument><expr><operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>fixvar</name><index>[<expr><name>fixvar_idx</name><operator>++</operator></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">"lastline"</literal></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>lastline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>addlocal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ai</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>FUNCARG</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>islambda</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addlocal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>numbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>ai</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fixvar_idx</name> <operator>&lt;</operator> <name>FIXVAR_CNT</name> <operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>VAR_SHORT_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>fixvar</name><index>[<expr><name>fixvar_idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictitem_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name> <operator>|</operator> <name>DI_FLAGS_ALLOC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addlocal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_vars</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ai</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ai</name> <operator>&lt;</operator> <name>MAX_FUNC_ARGS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_varlist</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_listitems</name><index>[<expr><name>ai</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_listitems</name><index>[<expr><name>ai</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_listitems</name><index>[<expr><name>ai</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_lock</name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>++</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_sourcing_name</name> <operator>=</operator> <name>sourcing_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_sourcing_lnum</name> <operator>=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sourcing_lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_SANDBOX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>using_sandbox</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sandbox</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>save_sourcing_name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>save_sourcing_name</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">27</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sourcing_name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>save_sourcing_name</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>save_sourcing_name</name></expr></argument>, <argument><expr><literal type="string">"function "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sourcing_name</name></expr></argument>,

<argument><expr><name>len</name></expr></argument>,

<argument><expr><literal type="string">"%s[%"</literal> <name>PRId64</name> <literal type="string">"].."</literal></expr></argument>,

<argument><expr><name>save_sourcing_name</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>save_sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>sourcing_name</name></expr></argument>, <argument><expr><literal type="string">"function "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>cat_func_name</name><argument_list>(<argument><expr><name>sourcing_name</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"calling %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>emsg_off</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><call><name>encode_tv2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>tofree</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MSG_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strsize</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MSG_BUF_CLEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trunc_string</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_BUF_CLEN</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_profiling_yes</name> <init>= <expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>func_not_yet_profiling_but_should</name> <init>=

<expr><name>do_profiling_yes</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>&amp;&amp;</operator> <call><name>has_profiling</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func_not_yet_profiling_but_should</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>started_profiling</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_do_profile</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>func_or_func_caller_profiling</name> <init>=

<expr><name>do_profiling_yes</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name>

<operator>||</operator> <operator>(</operator><name><name>fc</name><operator>-&gt;</operator><name>caller</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>caller</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_profiling</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func_or_func_caller_profiling</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>call_start</name> <operator>=</operator> <call><name>profile_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_children</name></name> <operator>=</operator> <call><name>profile_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_profiling_yes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>script_prof_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wait_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>sctx_T</name></type> <name>save_current_sctx</name> <init>= <expr><name>current_sctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>current_sctx</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_did_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>get_func_line</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fc</name></expr></argument>,

<argument><expr><name>DOCMD_NOWAIT</name><operator>|</operator><name>DOCMD_VERBOSE</name><operator>|</operator><name>DOCMD_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>did_emsg</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_ABORT</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>func_or_func_caller_profiling</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>call_start</name> <operator>=</operator> <call><name>profile_end</name><argument_list>(<argument><expr><name>call_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>call_start</name> <operator>=</operator> <call><name>profile_sub_wait</name><argument_list>(<argument><expr><name>wait_start</name></expr></argument>, <argument><expr><name>call_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_total</name></name> <operator>=</operator> <call><name>profile_add</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>, <argument><expr><name>call_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_self</name></name> <operator>=</operator> <call><name>profile_self</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>, <argument><expr><name>call_start</name></expr></argument>,

<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>caller</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>caller</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_profiling</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>caller</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tm_children</name></name> <operator>=</operator>

<call><name>profile_add</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>caller</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tm_children</name></name></expr></argument>, <argument><expr><name>call_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>caller</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tml_children</name></name> <operator>=</operator>

<call><name>profile_add</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>caller</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tml_children</name></name></expr></argument>, <argument><expr><name>call_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>started_profiling</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s aborted"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s returning #%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>sourcing_name</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>fc</name><operator>-&gt;</operator><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MSG_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>encode_tv2string</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>rettv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MSG_BUF_CLEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trunc_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MSG_BUF_CLEN</name></expr></argument>, <argument><expr><name>MSG_BUF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s returning %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sourcing_name</name> <operator>=</operator> <name>save_sourcing_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sourcing_lnum</name> <operator>=</operator> <name>save_sourcing_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_sctx</name> <operator>=</operator> <name>save_current_sctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_profiling_yes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>script_prof_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wait_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>using_sandbox</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sandbox</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>sourcing_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"continuing in %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>save_did_emsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanup_function_call</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_calls</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_refcount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>func_clear_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_save_redo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>restoreRedobuff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>restore_search_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>funccal_unref</name><parameter_list>(<parameter><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>pfc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>fc_refcount</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>force</name></expr> ?</condition><then> <expr><name><name>fc</name><operator>-&gt;</operator><name>fc_refcount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> </then><else>: <expr><operator>!</operator><call><name>fc_referenced</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>pfc</name> <operator>=</operator> <operator>&amp;</operator><name>previous_funccal</name></expr>;</init> <condition><expr><operator>*</operator><name>pfc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pfc</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pfc</name><operator>)</operator><operator>-&gt;</operator><name>caller</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>==</operator> <operator>*</operator><name>pfc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pfc</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>caller</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_funccal</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fc</name><operator>-&gt;</operator><name>fc_funcs</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>fc</name><operator>-&gt;</operator><name>fc_funcs</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>fc</name><operator>-&gt;</operator><name>fc_funcs</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>can_free_funccal</name><parameter_list>(<parameter><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>fc</name><operator>-&gt;</operator><name>l_varlist</name><operator>.</operator><name>lv_copyID</name></name> <operator>!=</operator> <name>copyID</name>

<operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>l_vars</name><operator>.</operator><name>dv_copyID</name></name> <operator>!=</operator> <name>copyID</name>

<operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>l_avars</name><operator>.</operator><name>dv_copyID</name></name> <operator>!=</operator> <name>copyID</name>

<operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>fc_copyID</name></name> <operator>!=</operator> <name>copyID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_funccal</name><parameter_list>(

<parameter><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>free_val</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fc</name><operator>-&gt;</operator><name>fc_funcs</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>fc</name><operator>-&gt;</operator><name>fc_funcs</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name> <operator>==</operator> <name>fc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_scoped</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>fc_funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vars_clear_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_avars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>free_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vars_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>l_vars</name><operator>.</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_val</name></expr>)</condition> <block>{<block_content>

<macro><name>TV_LIST_ITER</name><argument_list>(<argument>&amp;fc-&gt;l_varlist</argument>, <argument>li</argument>, <argument>{

tv_clear(TV_LIST_ITEM_TV(li));

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>func_ptr_unref</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_function_call</name><parameter_list>(<parameter><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>caller</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fc_referenced</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_funccal</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>caller</name></name> <operator>=</operator> <name>previous_funccal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>previous_funccal</name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>

<macro><name>TV_DICT_ITER</name><argument_list>(<argument>&amp;fc-&gt;l_avars</argument>, <argument>di</argument>, <argument>{

tv_copy(&amp;di-&gt;di_tv, &amp;di-&gt;di_tv);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>TV_LIST_ITER</name><argument_list>(<argument>&amp;fc-&gt;l_varlist</argument>, <argument>li</argument>, <argument>{

tv_copy(TV_LIST_ITEM_TV(li), TV_LIST_ITEM_TV(li));

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_nr_var</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang_analyzer__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_return</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>returning</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E133: :return not inside a function"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>eval0</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>returning</name> <operator>=</operator> <call><name>do_return</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>update_force_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>returning</name> <operator>=</operator> <call><name>do_return</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>returning</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_return</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reanimate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reanimate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current_funccal</name><operator>-&gt;</operator><name>returned</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>cleanup_conditionals</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>CSTP_RETURN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_cmd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reanimate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>rettv</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reanimate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>current_funccal</name><operator>-&gt;</operator><name>rettv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rettv</name> <operator>=</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>rettv</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>typval_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>typval_T</name> <operator>*</operator><operator>)</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>typval_T</name> <operator>*</operator><operator>)</operator><name>rettv</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reanimate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current_funccal</name><operator>-&gt;</operator><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_funccal</name><operator>-&gt;</operator><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>report_make_pending</name><argument_list>(<argument><expr><name>CSTP_RETURN</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>current_funccal</name><operator>-&gt;</operator><name>returned</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reanimate</name> <operator>&amp;&amp;</operator> <name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name><name>current_funccal</name><operator>-&gt;</operator><name>rettv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>current_funccal</name><operator>-&gt;</operator><name>rettv</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>typval_T</name> <operator>*</operator><operator>)</operator><name>rettv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_return_cmd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>encode_tv2echo</name><argument_list>(<argument><expr><operator>(</operator><name>typval_T</name> <operator>*</operator><operator>)</operator> <name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">":return "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <name>IOSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>IOSIZE</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_func_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>do_concat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fcp</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>fcp</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>fcp</name><operator>-&gt;</operator><name>dbg_tick</name></name> <operator>!=</operator> <name>debug_tick</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcp</name><operator>-&gt;</operator><name>breakpoint</name></name> <operator>=</operator> <call><name>dbg_find_breakpoint</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>,

<argument><expr><name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcp</name><operator>-&gt;</operator><name>dbg_tick</name></name> <operator>=</operator> <name>debug_tick</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>func_line_end</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_ABORT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>did_emsg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>aborted_in_try</name><argument_list>()</argument_list></call><operator>)</operator>

<operator>||</operator> <name><name>fcp</name><operator>-&gt;</operator><name>returned</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<while>while <condition>(<expr><name><name>fcp</name><operator>-&gt;</operator><name>linenr</name></name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name><name>fcp</name><operator>-&gt;</operator><name>linenr</name></name></expr>]</index> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>fcp</name><operator>-&gt;</operator><name>linenr</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>fcp</name><operator>-&gt;</operator><name>linenr</name></name> <operator>&gt;=</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name><name>fcp</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sourcing_lnum</name> <operator>=</operator> <name><name>fcp</name><operator>-&gt;</operator><name>linenr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>func_line_start</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fcp</name><operator>-&gt;</operator><name>breakpoint</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fcp</name><operator>-&gt;</operator><name>breakpoint</name></name> <operator>&lt;=</operator> <name>sourcing_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dbg_breakpoint</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>, <argument><expr><name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcp</name><operator>-&gt;</operator><name>breakpoint</name></name> <operator>=</operator> <call><name>dbg_find_breakpoint</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>,

<argument><expr><name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcp</name><operator>-&gt;</operator><name>dbg_tick</name></name> <operator>=</operator> <name>debug_tick</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>func_line_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fcp</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>fcp</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>&amp;&amp;</operator> <name>sourcing_lnum</name> <operator>&gt;=</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>sourcing_lnum</name> <operator>&lt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>=</operator> <name>sourcing_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FUNCLINE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_execed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name> <operator>=</operator> <call><name>profile_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_children</name></name> <operator>=</operator> <call><name>profile_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_wait</name></name> <operator>=</operator> <call><name>profile_get_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>func_line_exec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fcp</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>fcp</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_execed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>func_line_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fcp</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>fcp</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_execed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name><index>[<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name> <operator>=</operator> <call><name>profile_end</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name> <operator>=</operator> <call><name>profile_sub_wait</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_wait</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name><index>[<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>]</index></name> <operator>=</operator>

<call><name>profile_add</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name><index>[<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name><index>[<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>]</index></name> <operator>=</operator>

<call><name>profile_self</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name><index>[<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>,

<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>func_has_ended</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fcp</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>fcp</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_ABORT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>did_emsg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>aborted_in_try</name><argument_list>()</argument_list></call><operator>)</operator>

<operator>||</operator> <name><name>fcp</name><operator>-&gt;</operator><name>returned</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>func_has_abort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name><operator>)</operator><operator>-&gt;</operator><name><name>func</name><operator>-&gt;</operator><name>uf_flags</name></name> <operator>&amp;</operator> <name>FC_ABORT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>var_flavour_T</name></type> <name>var_flavour</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>varname</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASCII_ISUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>p</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ASCII_ISLOWER</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VAR_FLAVOUR_SESSION</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></while>

<return>return <expr><name>VAR_FLAVOUR_SHADA</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>VAR_FLAVOUR_DEFAULT</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>hashitem_T</name> <modifier>*</modifier></type><name>find_hi_in_scoped_ht</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>pht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>old_current_funccal</name> <init>= <expr><name>current_funccal</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>current_funccal</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>find_var_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>varname</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find_len</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>namelen</name> <operator>-</operator> <operator>(</operator><name>varname</name> <operator>-</operator> <name>name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pht</name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name>old_current_funccal</name></expr>;</expr_stmt>

<return>return <expr><name>hi</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>dictitem_T</name> <modifier>*</modifier></type><name>find_var_in_scoped_ht</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>namelen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>no_autoload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>old_current_funccal</name> <init>= <expr><name>current_funccal</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>current_funccal</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>find_var_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>varname</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>,

<argument><expr><name>namelen</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>varname</name> <operator>-</operator> <name>name</name><operator>)</operator></expr></argument>, <argument><expr><name>no_autoload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_funccal</name> <operator>==</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name><name>current_funccal</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_scoped</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name>old_current_funccal</name></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>var_shada_iter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><specifier>const</specifier> <name>iter</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><specifier>const</specifier> <name>name</name></expr></argument>,

<argument><expr><name>typval_T</name> <operator>*</operator><name>rettv</name></expr></argument>, <argument><expr><name>var_flavour_T</name> <name>flavour</name></expr></argument>)</argument_list>

<name>FUNC_ATTR_WARN_UNUSED_RESULT</name> <name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>hashitem_T</name> <modifier>*</modifier></type><name>hifirst</name> <init>= <expr><name><name>globvarht</name><operator>.</operator><name>ht_array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hinum</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>globvarht</name><operator>.</operator><name>ht_mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>globvarht</name><operator>.</operator><name>ht_array</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>hifirst</name><operator>)</operator> <operator>&lt;</operator> <name>hinum</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><operator>(</operator><call><name>var_flavour</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>flavour</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hi</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>hifirst</name><operator>)</operator> <operator>==</operator> <name>hinum</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>hashitem_T</name> <operator>*</operator><operator>)</operator> <name>iter</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_key</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_tv</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>++</operator><name>hi</name> <operator>-</operator> <name>hifirst</name><operator>)</operator> <operator>&lt;</operator> <name>hinum</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>var_flavour</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>flavour</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>hi</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>var_set_global</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>typval_T</name></type> <name>vartv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>saved_current_funccal</name> <init>= <expr><name>current_funccal</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>vartv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_funccal</name> <operator>=</operator> <name>saved_current_funccal</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>store_session_globals</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>TV_DICT_ITER</name><argument_list>(<argument>&amp;globvardict</argument>, <argument>this_var</argument>, <argument>{

if ((this_var-&gt;di_tv.v_type == VAR_NUMBER

|| this_var-&gt;di_tv.v_type == VAR_STRING)

&amp;&amp; var_flavour(this_var-&gt;di_key) == VAR_FLAVOUR_SESSION) {

char_u *const p = vim_strsave_escaped(

(const char_u *)tv_get_string(&amp;this_var-&gt;di_tv),

(const char_u *)<literal type="string">"\\\"\n\r"</literal>);

for (char_u *t = p; *t != NUL; t++) {

if (*t == <literal type="char">'\n'</literal>) {

*t = <literal type="char">'n'</literal>;

} else if (*t == <literal type="char">'\r'</literal>) {

*t = <literal type="char">'r'</literal>;

}

}

if ((fprintf(fd, <literal type="string">"let %s = %c%s%c"</literal>,

this_var-&gt;di_key,

((this_var-&gt;di_tv.v_type == VAR_STRING) ? <literal type="char">'"'</literal>

: <literal type="char">' '</literal>),

p,

((this_var-&gt;di_tv.v_type == VAR_STRING) ? <literal type="char">'"'</literal>

: <literal type="char">' '</literal>)) &lt; <literal type="number">0</literal>)

|| put_eol(fd) == FAIL) {

xfree(p);

return FAIL;

}

xfree(p);

} else if (this_var-&gt;di_tv.v_type == VAR_FLOAT

&amp;&amp; var_flavour(this_var-&gt;di_key) == VAR_FLAVOUR_SESSION) {

float_T f = this_var-&gt;di_tv.vval.v_float;

int sign = <literal type="char">' '</literal>;

if (f &lt; <literal type="number">0</literal>) {

f = -f;

sign = <literal type="char">'-'</literal>;

}

if ((fprintf(fd, <literal type="string">"let %s = %c%f"</literal>, this_var-&gt;di_key, sign, f) &lt; <literal type="number">0</literal>)

|| put_eol(fd) == FAIL) {

return FAIL;

}

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>last_set_msg</name><parameter_list>(<parameter><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>LastSet</name></type> <name>last_set</name> <init>= <expr><operator>(</operator><name>LastSet</name><operator>)</operator><block>{

<expr><operator>.</operator><name>script_ctx</name> <operator>=</operator> <name>script_ctx</name></expr>,

<expr><operator>.</operator><name>channel_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>option_last_set_msg</name><argument_list>(<argument><expr><name>last_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>option_last_set_msg</name><parameter_list>(<parameter><decl><type><name>LastSet</name></type> <name>last_set</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>last_set</name><operator>.</operator><name>script_ctx</name><operator>.</operator><name>sc_sid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_scriptname</name><argument_list>(<argument><expr><name>last_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n\tLast set from "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>last_set</name><operator>.</operator><name>script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>line_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>last_set</name><operator>.</operator><name>script_ctx</name><operator>.</operator><name>sc_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_v_option_vars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_NEW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>modify_fname</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>tilde_file</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>usedlen</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnamep</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>fnamelen</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>dirname</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_fullname</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>repeat</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>has_fullname</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>VALID_PATH</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>usedlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>fnamep</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'~'</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>fnamep</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'/'</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>fnamep</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'\\'</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>fnamep</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <name>NUL</name><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>tilde_file</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>fnamep</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fnamep</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <operator>*</operator><name>fnamep</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnamep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>fnamep</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>!</operator><call><name>vim_isAbsName</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fnamep</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>FullName_save</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>fnamep</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <operator>*</operator><name>fnamep</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnamep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_isdir</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fnamep</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <operator>*</operator><name>fnamep</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnamep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'~'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'8'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>usedlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'8'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_fullname</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>fnamep</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pbuf</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pbuf</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>FullName_save</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>fnamep</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>fnamep</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>has_fullname</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_dirname</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>path_shorten_fname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fnamep</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name>pbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dirname</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamep</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>path_tail</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>VALID_HEAD</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>usedlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_past_head</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tail</name> <operator>&gt;</operator> <name>s</name> <operator>&amp;&amp;</operator> <call><name>after_pathsep</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>tail</name> <operator>-</operator> <operator>*</operator><name>fnamep</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnamelen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <operator>*</operator><name>fnamep</name> <operator>=</operator> <name>tail</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>tail</name> <operator>&gt;</operator> <name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>after_pathsep</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'8'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>usedlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>usedlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>tail</name> <operator>-</operator> <operator>*</operator><name>fnamep</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamep</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_second_e</name> <init>= <expr><operator>*</operator><name>fnamep</name> <operator>&gt;</operator> <name>tail</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name>is_second_e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>fnamep</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>fnamep</name> <operator>+</operator> <operator>*</operator><name>fnamelen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>s</name> <operator>&gt;</operator> <name>tail</name></expr>;</condition> <incr><expr><name>s</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>tail</name> <operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>is_second_e</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>==</operator> <name>tail</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newstart</name> <init>= <expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>distance_stepped_back</name> <init>= <expr><operator>*</operator><name>fnamep</name> <operator>-</operator> <name>newstart</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>+=</operator> <name>distance_stepped_back</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamep</name> <operator>=</operator> <name>newstart</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>fnamep</name> <operator>&lt;=</operator> <name>tail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><operator>*</operator><name>fnamep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <operator>*</operator><name>fnamep</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>usedlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal>

<operator>||</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>didit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>src</name> <operator>+</operator> <operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g"</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>, <argument><expr><operator>*</operator><name>fnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>usedlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>do_string_sub</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamep</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>didit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>didit</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>repeat</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><operator>*</operator><name>usedlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>fnamep</name><operator>)</operator><index>[<expr><operator>*</operator><name>fnamelen</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>fnamep</name><operator>)</operator><index>[<expr><operator>*</operator><name>fnamelen</name></expr>]</index> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_shellescape</name><argument_list>(<argument><expr><operator>*</operator><name>fnamep</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>fnamep</name><operator>)</operator><index>[<expr><operator>*</operator><name>fnamelen</name></expr>]</index> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <operator>*</operator><name>fnamep</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fnamelen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>usedlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>valid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>do_string_sub</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sublen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_all</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cpo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>zero_width</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>save_cpo</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_all</name> <operator>=</operator> <operator>(</operator><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>p_ic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>str</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>vim_regexec_nl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>tail</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>zero_width</name> <operator>==</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zero_width</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sublen</name> <operator>=</operator> <call><name>vim_regsub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>tail</name><operator>)</operator> <operator>+</operator> <name>sublen</name> <operator>-</operator>

<operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>tail</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_regsub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name>

<operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>i</name> <operator>+</operator> <name>sublen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_all</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>str</name></expr> </then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_cpo</name> <operator>==</operator> <name>empty_option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>save_cpo</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>save_cpo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>common_job_callbacks</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>vopts</name></decl></parameter>,

<parameter><decl><type><name>CallbackReader</name> <modifier>*</modifier></type><name>on_stdout</name></decl></parameter>,

<parameter><decl><type><name>CallbackReader</name> <modifier>*</modifier></type><name>on_stderr</name></decl></parameter>,

<parameter><decl><type><name>Callback</name> <modifier>*</modifier></type><name>on_exit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_get_callback</name><argument_list>(<argument><expr><name>vopts</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"on_stdout"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>on_stdout</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator><call><name>tv_dict_get_callback</name><argument_list>(<argument><expr><name>vopts</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"on_stderr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>on_stderr</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>tv_dict_get_callback</name><argument_list>(<argument><expr><name>vopts</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"on_exit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>on_exit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>on_stdout</name><operator>-&gt;</operator><name>buffered</name></name> <operator>=</operator> <call><name>tv_dict_get_number</name><argument_list>(<argument><expr><name>vopts</name></expr></argument>, <argument><expr><literal type="string">"stdout_buffered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>on_stderr</name><operator>-&gt;</operator><name>buffered</name></name> <operator>=</operator> <call><name>tv_dict_get_number</name><argument_list>(<argument><expr><name>vopts</name></expr></argument>, <argument><expr><literal type="string">"stderr_buffered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>on_stdout</name><operator>-&gt;</operator><name>buffered</name></name> <operator>&amp;&amp;</operator> <name><name>on_stdout</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kCallbackNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>on_stdout</name><operator>-&gt;</operator><name>self</name></name> <operator>=</operator> <name>vopts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>on_stderr</name><operator>-&gt;</operator><name>buffered</name></name> <operator>&amp;&amp;</operator> <name><name>on_stderr</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kCallbackNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>on_stderr</name><operator>-&gt;</operator><name>self</name></name> <operator>=</operator> <name>vopts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vopts</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>callback_reader_free</name><argument_list>(<argument><expr><name>on_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_reader_free</name><argument_list>(<argument><expr><name>on_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_free</name><argument_list>(<argument><expr><name>on_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Channel</name> <modifier>*</modifier></type><name>find_job</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>find_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>streamtype</name></name> <operator>!=</operator> <name>kChannelStreamProc</name>

<operator>||</operator> <call><name>process_is_stopped</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>show_error</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>streamtype</name></name> <operator>!=</operator> <name>kChannelStreamProc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invchanjob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invchan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>script_host_eval</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <call><name>eval_call_provider</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"eval"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>typval_T</name></type> <name>eval_call_provider</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>provider</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>arguments</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_has_provider</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><literal type="string">"E319: No \"%s\" provider found. Run \":checkhealth provider\""</literal></expr></argument>,

<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>typval_T</name><operator>)</operator><block>{

<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>,

<expr><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>,

<expr><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><literal type="number">0</literal></expr>

}</block></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>func</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"provider#%s#Call"</literal></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>caller_scope</name></name></type> <name>saved_provider_caller_scope</name> <init>= <expr><name>provider_caller_scope</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>provider_caller_scope</name> <operator>=</operator> <operator>(</operator>struct <name>caller_scope</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>script_ctx</name> <operator>=</operator> <name>current_sctx</name></expr>,

<expr><operator>.</operator><name>sourcing_name</name> <operator>=</operator> <name>sourcing_name</name></expr>,

<expr><operator>.</operator><name>sourcing_lnum</name> <operator>=</operator> <name>sourcing_lnum</name></expr>,

<expr><operator>.</operator><name>autocmd_fname</name> <operator>=</operator> <name>autocmd_fname</name></expr>,

<expr><operator>.</operator><name>autocmd_match</name> <operator>=</operator> <name>autocmd_match</name></expr>,

<expr><operator>.</operator><name>autocmd_bufnr</name> <operator>=</operator> <name>autocmd_bufnr</name></expr>,

<expr><operator>.</operator><name>funccalp</name> <operator>=</operator> <macro><name>save_funccal</name><argument_list>()</argument_list></macro></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>provider_call_nesting</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>, <expr><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>method</name></expr>, <expr><operator>.</operator><name>v_lock</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>, <expr><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>arguments</name></expr>, <expr><operator>.</operator><name>v_lock</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name> <init>= <expr><block>{ <expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>, <expr><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>call_func</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>func</name></expr></argument>,

<argument><expr><name>name_len</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>argvars</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_unref</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_funccal</name><argument_list>(<argument><expr><name><name>provider_caller_scope</name><operator>.</operator><name>funccalp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>provider_caller_scope</name> <operator>=</operator> <name>saved_provider_caller_scope</name></expr>;</expr_stmt>

<expr_stmt><expr><name>provider_call_nesting</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>provider_call_nesting</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rettv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>eval_has_provider</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>feat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"clipboard"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"python"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"python3"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"python_compiled"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"python_dynamic"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"python3_compiled"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"python3_dynamic"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"perl"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"ruby"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name>feat</name></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>feat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strchrsub</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"g:loaded_%s_provider"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_var_tv</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"provider#%s#bogus"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>script_autoload</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"g:loaded_%s_provider"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_var_tv</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"provider#%s#Call"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><call><name>find_func</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p_lpl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><literal type="string">"provider: %s: missing required variable g:loaded_%s_provider"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name><operator>)</operator></expr>

?</condition><then> <expr><literal type="number">2</literal> <operator>==</operator> <name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr> 

</then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"provider#%s#Call"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_func</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><literal type="string">"provider: %s: g:loaded_%s_provider=2 but %s is not defined"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>eval_fmt_source_name_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sourcing_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"%s:%"</literal> <name>PRIdLINENR</name></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>, <argument><expr><name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_checkhealth</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>find_func</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"health#check"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name>

<operator>&amp;&amp;</operator> <call><name>script_autoload</name><argument_list>(<argument><expr><literal type="string">"health#check"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"health#check"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>find_func</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"health#check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vimruntime_env</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"VIMRUNTIME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vimruntime_env</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5009: $VIMRUNTIME is empty or unset"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>rtp_ok</name> <init>= <expr><name>NULL</name> <operator>!=</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_rtp</name></expr></argument>, <argument><expr><name>vimruntime_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rtp_ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5009: Invalid $VIMRUNTIME: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vimruntime_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5009: Invalid 'runtimepath'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"call health#check('')"</literal></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"call health#check('%s')"</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>invoke_prompt_callback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_callback</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kCallbackNone</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>prompt_text</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_call</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_callback</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>invoke_prompt_interrupt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_interrupt</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kCallbackNone</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>callback_call</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_interrupt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
