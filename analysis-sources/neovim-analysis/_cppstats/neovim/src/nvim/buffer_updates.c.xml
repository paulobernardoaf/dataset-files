<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\buffer_updates.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_updates.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lua/executor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer_updates.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>buf_updates_register</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>,

<parameter><decl><type><name>BufUpdateCallbacks</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>send_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_id</name> <operator>==</operator> <name>LUA_INTERNAL_CALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>.</operator><name>utf_sizes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>update_need_codepoints</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>channel_id</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>send_buffer</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>linedata</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>SIZE_MAX</name> <operator>&gt;=</operator> <name>MAXLNUM</name></expr></argument>, <argument><expr><literal type="string">"size_t smaller than MAXLNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line_count</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>linedata</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linedata</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_collect_lines</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linedata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>linedata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_send_event</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><literal type="string">"nvim_buf_lines_event"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>buf_updates_changedtick_single</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>buf_updates_active</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>buf_updates_send_end</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>channelid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_send_event</name><argument_list>(<argument><expr><name>channelid</name></expr></argument>, <argument><expr><literal type="string">"nvim_buf_detach_event"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>buf_updates_unregister</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>channelid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>channelid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <name>found</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_updates_send_end</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>channelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_init</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>buf_updates_unregister_all</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>buf_updates_send_end</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_init</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BufUpdateCallbacks</name></type> <name>cb</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>.</operator><name>on_detach</name></name> <operator>!=</operator> <name>LUA_NOREF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textlock</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>executor_exec_lua_cb</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_detach</name></name></expr></argument>, <argument><expr><literal type="string">"detach"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textlock</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_update_callbacks</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_init</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>buf_updates_send_changes</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>firstline</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>num_added</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>num_removed</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>send_tick</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>deleted_codepoints</name></decl>, <decl><type ref="prev"/><name>deleted_codeunits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>deleted_bytes</name> <init>= <expr><call><name>ml_flush_deleted_bytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deleted_codepoints</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>deleted_codeunits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buf_updates_active</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>badchannelid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channelid</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>send_tick</name></expr> ?</condition><then> <expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NIL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>firstline</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>firstline</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>num_removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>linedata</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_added</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>SIZE_MAX</name> <operator>&gt;=</operator> <name>MAXLNUM</name></expr></argument>, <argument><expr><literal type="string">"size_t smaller than MAXLNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linedata</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>num_added</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linedata</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>num_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_collect_lines</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>num_added</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linedata</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>linedata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rpc_send_event</name><argument_list>(<argument><expr><name>channelid</name></expr></argument>, <argument><expr><literal type="string">"nvim_buf_lines_event"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badchannelid</name> <operator>=</operator> <name>channelid</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>badchannelid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Disabling buffer updates for dead channel %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name>badchannelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_updates_unregister</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>badchannelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BufUpdateCallbacks</name></type> <name>cb</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>keep</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>.</operator><name>on_lines</name></name> <operator>!=</operator> <name>LUA_NOREF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name><name>items</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>send_tick</name></expr> ?</condition><then> <expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NIL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>firstline</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>firstline</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>num_removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>firstline</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>num_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>deleted_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>.</operator><name>utf_sizes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>deleted_codepoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>deleted_codeunits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>textlock</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>res</name> <init>= <expr><call><name>executor_exec_lua_cb</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_lines</name></name></expr></argument>, <argument><expr><literal type="string">"lines"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>textlock</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeBoolean</name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_update_callbacks</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>buf_updates_send_splice</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>start_line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>oldextent_line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>oldextent_col</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>newextent_line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>newextent_col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buf_updates_active</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BufUpdateCallbacks</name></type> <name>cb</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>keep</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>.</operator><name>on_bytes</name></name> <operator>!=</operator> <name>LUA_NOREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FIXED_TEMP_ARRAY</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>start_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>start_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>oldextent_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>oldextent_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>newextent_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>newextent_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textlock</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>res</name> <init>= <expr><call><name>executor_exec_lua_cb</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_bytes</name></name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>textlock</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeBoolean</name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_update_callbacks</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>buf_updates_changedtick</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_id</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_channels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>buf_updates_changedtick_single</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BufUpdateCallbacks</name></type> <name>cb</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>keep</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>.</operator><name>on_changedtick</name></name> <operator>!=</operator> <name>LUA_NOREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FIXED_TEMP_ARRAY</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textlock</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>res</name> <init>= <expr><call><name>executor_exec_lua_cb</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_changedtick</name></name></expr></argument>, <argument><expr><literal type="string">"changedtick"</literal></expr></argument>,

<argument><expr><name>args</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>textlock</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeBoolean</name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_update_callbacks</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>update_callbacks</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>buf_updates_changedtick_single</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_send_event</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><literal type="string">"nvim_buf_changedtick_event"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_update_callbacks</name><parameter_list>(<parameter><decl><type><name>BufUpdateCallbacks</name></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_changedtick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
