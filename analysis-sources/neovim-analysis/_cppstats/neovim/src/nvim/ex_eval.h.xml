<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\ex_eval.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_TRUE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_ACTIVE</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_ELSE</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_WHILE</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_FOR</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_TRY</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_FINALLY</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_THROWN</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_CAUGHT</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSF_SILENT</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTP_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTP_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTP_INTERRUPT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTP_THROW</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTP_BREAK</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTP_CONTINUE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTP_RETURN</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTP_FINISH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<struct>struct <name>msglist</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>throw_msg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>ET_USER</name></decl>, 

<decl><name>ET_ERROR</name></decl>, 

<decl><name>ET_INTERRUPT</name></decl>, 

}</block></enum></type> <name>except_type_T</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vim_exception</name></name></type> <name>except_T</name>;</typedef>

<struct>struct <name>vim_exception</name> <block>{

<decl_stmt><decl><type><name>except_type_T</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier></type><name>messages</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>throw_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>throw_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>except_T</name> <modifier>*</modifier></type><name>caught</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>cleanup_stuff</name></name></type> <name>cleanup_T</name>;</typedef>

<struct>struct <name>cleanup_stuff</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pending</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>except_T</name> <modifier>*</modifier></type><name>exception</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ex_eval.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
