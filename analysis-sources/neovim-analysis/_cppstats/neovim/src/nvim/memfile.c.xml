<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\memfile.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMFILE_PAGE_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memfile.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>memfile_T</name> <modifier>*</modifier></type><name>mf_open</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memfile_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_ffname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mf_do_open</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_free_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>=</operator> <name>MEMFILE_PAGE_SIZE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FileInfo</name></type> <name>file_info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>os_fileinfo_fd</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>blocksize</name> <init>= <expr><call><name>os_fileinfo_blocksize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>&gt;=</operator> <name>MIN_SWAP_PAGE_SIZE</name> <operator>&amp;&amp;</operator> <name>blocksize</name> <operator>&lt;=</operator> <name>MAX_SWAP_PAGE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>MAX_SWAP_PAGE_SIZE</name> <operator>&lt;=</operator> <name>UINT_MAX</name></expr></argument>,

<argument><expr><literal type="string">"MAX_SWAP_PAGE_SIZE must fit into an unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>blocksize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>off_T</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>O_TRUNC</name><operator>|</operator><name>O_EXCL</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>size</name> <operator>=</operator> <call><name>vim_lseek</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_T</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>blocknr_T</name></expr></argument>)</argument_list></sizeof>

<operator>&amp;&amp;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>INT64_MAX</name> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>blocknr_T</name><operator>)</operator><name>size</name> <operator>+</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>/</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_min</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_neg_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name></expr>;</expr_stmt>

<return>return <expr><name>mfp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mf_open_file</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mf_do_open</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_close</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>del_file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_swapclose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>del_file</name> <operator>&amp;&amp;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_remove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_first</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextp</name></decl>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name>nextp</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>nextp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_free_bhdr</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_free_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>mf_rem_free</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>mf_hash_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_hash_free_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mf_free_fnames</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_close_file</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>getlines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>getlines</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_swapclose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_remove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mf_free_fnames</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_new_page_size</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>new_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bhdr_T</name> <modifier>*</modifier></type><name>mf_new</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>negative</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>page_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>freep</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_free_first</name></name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>negative</name> <operator>&amp;&amp;</operator> <name>freep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>freep</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>&gt;=</operator> <name>page_count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>freep</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>&gt;</operator> <name>page_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>mf_alloc_bhdr</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>page_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>=</operator> <name><name>freep</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freep</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>+=</operator> <name>page_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freep</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>-=</operator> <name>page_count</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>*</operator> <name>page_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>mf_rem_free</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>mf_alloc_bhdr</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>page_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_min</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_neg_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name> <operator>+=</operator> <name>page_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>=</operator> <name>BH_LOCKED</name> <operator>|</operator> <name>BH_DIRTY</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>=</operator> <name>page_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_ins_used</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_ins_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>*</operator> <name>page_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bhdr_T</name> <modifier>*</modifier></type><name>mf_get</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>blocknr_T</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>page_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name> <operator>||</operator> <name>nr</name> <operator>&lt;=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_min</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><call><name>mf_find_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nr</name> <operator>&gt;=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>mf_alloc_bhdr</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>page_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>=</operator> <name>page_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mf_read</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>mf_free_bhdr</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mf_rem_used</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mf_rem_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>|=</operator> <name>BH_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_ins_used</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mf_ins_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>hp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_put</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dirty</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>infile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BH_LOCKED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>IEMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E293: block was not locked"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>BH_LOCKED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dirty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BH_DIRTY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>infile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mf_trans_add</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_free</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mf_rem_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mf_rem_used</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_neg_count</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mf_ins_free</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mf_sync</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>got_int_save</name> <init>= <expr><name>got_int</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_used_last</name></name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MFS_ALL</name><operator>)</operator> <operator>||</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>&amp;</operator> <name>BH_DIRTY</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>==</operator> <name>OK</name> <operator>||</operator> <operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>&lt;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MFS_ZERO</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mf_write</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MFS_STOP</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>os_char_avail</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MFS_FLUSH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>os_fsync</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_int</name> <operator>|=</operator> <name>got_int_save</name></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_set_dirty</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_last</name></name></expr></init></decl>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>|=</operator> <name>BH_DIRTY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_ins_hash</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mf_hash_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_hash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>mf_hashitem_T</name> <operator>*</operator><operator>)</operator><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_rem_hash</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mf_hash_rem_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_hash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>mf_hashitem_T</name> <operator>*</operator><operator>)</operator><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type><name>mf_find_hash</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>blocknr_T</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>bhdr_T</name> <operator>*</operator><operator>)</operator><call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_hash</name></name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_ins_used</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_next</name></name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_used_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_first</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_last</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_next</name><operator>-&gt;</operator><name>bh_prev</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_rem_used</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_last</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_next</name><operator>-&gt;</operator><name>bh_prev</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_first</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name><operator>-&gt;</operator><name>bh_next</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mf_release_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_may_swap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ml_open_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_used_last</name></name></expr></init></decl>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>&amp;</operator> <name>BH_LOCKED</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>&amp;</operator> <name>BH_DIRTY</name><operator>)</operator>

<operator>||</operator> <call><name>mf_write</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mf_rem_used</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_rem_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_free_bhdr</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_used_last</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type><name>mf_alloc_bhdr</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>page_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bhdr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>*</operator> <name>page_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>=</operator> <name>page_count</name></expr>;</expr_stmt>

<return>return <expr><name>hp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_free_bhdr</name><parameter_list>(<parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_ins_free</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_next</name></name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_free_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_free_first</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type><name>mf_rem_free</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_free_first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_free_first</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_next</name></name></expr>;</expr_stmt>

<return>return <expr><name>hp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mf_read</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>page_size</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_T</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>off_T</name><operator>)</operator><operator>(</operator><name>page_size</name> <operator>*</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_lseek</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E294: Seek error in swap file read"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>&lt;=</operator> <name>UINT_MAX</name> <operator>/</operator> <name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name> <init>= <expr><name>page_size</name> <operator>*</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_page_count</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>read_eintr</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E295: Read error in swap file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mf_write</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>off_T</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>nr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>page_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>page_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<if_stmt><if>if <condition>(<expr><call><name>mf_trans_add</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>page_size</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hp2</name> <operator>=</operator> <call><name>mf_find_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hp2</name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>off_T</name><operator>)</operator><operator>(</operator><name>page_size</name> <operator>*</operator> <name>nr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_lseek</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E296: Seek error in swap file write"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hp2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <name><name>hp2</name><operator>-&gt;</operator><name>bh_page_count</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>page_size</name> <operator>*</operator> <name>page_count</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>hp2</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name></expr> </then><else>: <expr><name><name>hp2</name><operator>-&gt;</operator><name>bh_data</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>write_eintr</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_swapwrite_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E297: Write error in swap file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_swapwrite_msg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_swapwrite_msg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>hp2</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BH_DIRTY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>+</operator> <operator>(</operator><name>blocknr_T</name><operator>)</operator><name>page_count</name> <operator>&gt;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name> <operator>=</operator> <name>nr</name> <operator>+</operator> <name>page_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>==</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mf_trans_add</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mf_blocknr_trans_item_T</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mf_blocknr_trans_item_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>new_bnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>freep</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_free_first</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>page_count</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>bh_page_count</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>freep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>freep</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>&gt;=</operator> <name>page_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_bnum</name> <operator>=</operator> <name><name>freep</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>freep</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>&gt;</operator> <name>page_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>freep</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>+=</operator> <name>page_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freep</name><operator>-&gt;</operator><name>bh_page_count</name></name> <operator>-=</operator> <name>page_count</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>freep</name> <operator>=</operator> <call><name>mf_rem_free</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>freep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>new_bnum</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name> <operator>+=</operator> <name>page_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>nt_old_bnum</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>nt_new_bnum</name></name> <operator>=</operator> <name>new_bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_rem_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>=</operator> <name>new_bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_ins_hash</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mf_hash_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_trans</name></name></expr></argument>, <argument><expr><operator>(</operator><name>mf_hashitem_T</name> <operator>*</operator><operator>)</operator><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>blocknr_T</name></type> <name>mf_trans_del</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>blocknr_T</name></type> <name>old_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mf_blocknr_trans_item_T</name> <modifier>*</modifier></type><name>np</name> <init>=

<expr><operator>(</operator><name>mf_blocknr_trans_item_T</name> <operator>*</operator><operator>)</operator><call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_trans</name></name></expr></argument>, <argument><expr><name>old_nr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>old_nr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_neg_count</name></name><operator>--</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>new_bnum</name> <init>= <expr><name><name>np</name><operator>-&gt;</operator><name>nt_new_bnum</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mf_hash_rem_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_trans</name></name></expr></argument>, <argument><expr><operator>(</operator><name>mf_hashitem_T</name> <operator>*</operator><operator>)</operator><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_bnum</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_free_fnames</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_set_fnames</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_ffname</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>FullName_save</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mf_fullname</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_ffname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_ffname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mf_need_trans</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_neg_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mf_do_open</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mf_set_fnames</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FileInfo</name></type> <name>file_info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_CREAT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>os_fileinfo_link</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E300: Swap file already exists (symlink attack?)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>=</operator> <call><name>mch_open_rw</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mf_free_fnames</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>os_set_cloexec</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHT_LOG_LOAD_FACTOR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHT_GROWTH_FACTOR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_hash_init</name><parameter_list>(<parameter><decl><type><name>mf_hashtab_T</name> <modifier>*</modifier></type><name>mht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mf_hashtab_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name></name> <operator>=</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_small_buckets</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name> <operator>=</operator> <name>MHT_INIT_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_hash_free</name><parameter_list>(<parameter><decl><type><name>mf_hashtab_T</name> <modifier>*</modifier></type><name>mht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name></name> <operator>!=</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_small_buckets</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_hash_free_all</name><parameter_list>(<parameter><decl><type><name>mf_hashtab_T</name> <modifier>*</modifier></type><name>mht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name>mhi</name> <init>= <expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>mhi</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mhi</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mf_hash_free</name><argument_list>(<argument><expr><name>mht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mf_hashitem_T</name> <modifier>*</modifier></type><name>mf_hash_find</name><parameter_list>(<parameter><decl><type><name>mf_hashtab_T</name> <modifier>*</modifier></type><name>mht</name></decl></parameter>, <parameter><decl><type><name>blocknr_T</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name>mhi</name> <init>= <expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>key</name> <operator>&amp;</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>mhi</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mhi</name><operator>-&gt;</operator><name>mhi_key</name></name> <operator>!=</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mhi</name> <operator>=</operator> <name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>mhi</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_hash_add_item</name><parameter_list>(<parameter><decl><type><name>mf_hashtab_T</name> <modifier>*</modifier></type><name>mht</name></decl></parameter>, <parameter><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name>mhi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>mhi</name><operator>-&gt;</operator><name>mhi_key</name></name> <operator>&amp;</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name></name> <operator>=</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name><operator>-&gt;</operator><name>mhi_prev</name></name> <operator>=</operator> <name>mhi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>mhi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mht</name><operator>-&gt;</operator><name>mht_count</name></name> <operator>&gt;&gt;</operator> <name>MHT_LOG_LOAD_FACTOR</name><operator>)</operator> <operator>&gt;</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mf_hash_grow</name><argument_list>(<argument><expr><name>mht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_hash_rem_item</name><parameter_list>(<parameter><decl><type><name>mf_hashtab_T</name> <modifier>*</modifier></type><name>mht</name></decl></parameter>, <parameter><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name>mhi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>mhi</name><operator>-&gt;</operator><name>mhi_key</name></name> <operator>&amp;</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name></expr>]</index></name> <operator>=</operator>

<name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_prev</name><operator>-&gt;</operator><name>mhi_next</name></name> <operator>=</operator> <name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name><operator>-&gt;</operator><name>mhi_prev</name></name> <operator>=</operator> <name><name>mhi</name><operator>-&gt;</operator><name>mhi_prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_count</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mf_hash_grow</name><parameter_list>(<parameter><decl><type><name>mf_hashtab_T</name> <modifier>*</modifier></type><name>mht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>MHT_GROWTH_FACTOR</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>buckets</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name><name>tails</name><index>[<expr><name>MHT_GROWTH_FACTOR</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tails</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tails</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name>mhi</name> <init>= <expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init>

<condition><expr><name>mhi</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mhi</name> <operator>=</operator> <name><name>mhi</name><operator>-&gt;</operator><name>mhi_next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><operator>(</operator><name><name>mhi</name><operator>-&gt;</operator><name>mhi_key</name></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MHT_GROWTH_FACTOR</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tails</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buckets</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>mhi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tails</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>mhi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>tails</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>mhi_next</name> <operator>=</operator> <name>mhi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mhi</name><operator>-&gt;</operator><name>mhi_prev</name></name> <operator>=</operator> <name><name>tails</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tails</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>mhi</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MHT_GROWTH_FACTOR</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tails</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tails</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>mhi_next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name></name> <operator>!=</operator> <name><name>mht</name><operator>-&gt;</operator><name>mht_small_buckets</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_buckets</name></name> <operator>=</operator> <name>buckets</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name> <operator>=</operator> <operator>(</operator><name><name>mht</name><operator>-&gt;</operator><name>mht_mask</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>MHT_GROWTH_FACTOR</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
