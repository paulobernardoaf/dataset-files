<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\viml\parser\parser.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>allocated</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ParserLine</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ParserLineGetter</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><name>ParserLine</name> <modifier>*</modifier></type><name>ret_pline</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>col</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ParserPosition</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<enum>enum <block>{

<decl><name>kPTopStateParsingCommand</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>kPTopStateParsingExpression</name></decl>,

}</block> <decl><name>type</name></decl>;</enum>

<union>union <block>{

<struct>struct <block>{

<enum>enum <block>{

<decl><name>kExprUnknown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

}</block> <decl><name>type</name></decl>;</enum>

}</block> <decl><name>expr</name></decl>;</struct>

}</block> <decl><name>data</name></decl>;</union>

}</block></struct></type> <name>ParserStateItem</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ParserLineGetter</name></type> <name>get_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl>;</decl_stmt>

<macro><name>kvec_withinit_t</name><argument_list>(<argument>ParserLine</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>lines</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>

}</block></struct></type> <name>ParserInputReader</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ParserPosition</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>end_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ParserHighlightChunk</name>;</typedef>

<typedef>typedef <macro><name>kvec_withinit_t</name><argument_list>(<argument>ParserHighlightChunk</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>ParserHighlight</name></expr>;</expr_stmt></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ParserInputReader</name></type> <name>reader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParserPosition</name></type> <name>pos</name></decl>;</decl_stmt>

<macro><name>kvec_withinit_t</name><argument_list>(<argument>ParserStateItem</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>stack</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ParserHighlight</name> <modifier>*</modifier></type><name>colors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_continuate</name></decl>;</decl_stmt>

}</block></struct></type> <name>ParserState</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_parser_init</name><argument_list>(

<argument><expr><name>ParserState</name> <operator>*</operator><specifier>const</specifier> <name>ret_pstate</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>ParserLineGetter</name> <name>get_line</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><specifier>const</specifier> <name>cookie</name></expr></argument>,

<argument><expr><name>ParserHighlight</name> <operator>*</operator><specifier>const</specifier> <name>colors</name></expr></argument>)</argument_list>

<name>REAL_FATTR_ALWAYS_INLINE</name> <name>REAL_FATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_parser_init</name><parameter_list>(

<parameter><decl><type><name>ParserState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_pstate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ParserLineGetter</name></type> <name>get_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cookie</name></decl></parameter>,

<parameter><decl><type><name>ParserHighlight</name> <modifier>*</modifier><specifier>const</specifier></type> <name>colors</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_pstate</name> <operator>=</operator> <operator>(</operator><name>ParserState</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>reader</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>get_line</name> <operator>=</operator> <name>get_line</name></expr>,

<expr><operator>.</operator><name>cookie</name> <operator>=</operator> <name>cookie</name></expr>,

<expr><operator>.</operator><name>conv</name> <operator>=</operator> <name>MBYTE_NONE_CONV</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>pos</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>colors</name> <operator>=</operator> <name>colors</name></expr>,

<expr><operator>.</operator><name>can_continuate</name> <operator>=</operator> <name>false</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kvi_init</name><argument_list>(<argument><expr><name><name>ret_pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kvi_init</name><argument_list>(<argument><expr><name><name>ret_pstate</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_parser_destroy</name><argument_list>(<argument><expr><name>ParserState</name> <operator>*</operator><specifier>const</specifier> <name>pstate</name></expr></argument>)</argument_list>

<name>REAL_FATTR_NONNULL_ALL</name> <name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_parser_destroy</name><parameter_list>(<parameter><decl><type><name>ParserState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pstate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ParserLine</name></type> <name>pline</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pline</name><operator>.</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pline</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>kvi_destroy</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kvi_destroy</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_preader_get_line</name><argument_list>(<argument><expr><name>ParserInputReader</name> <operator>*</operator><specifier>const</specifier> <name>preader</name></expr></argument>,

<argument><expr><name>ParserLine</name> <operator>*</operator><specifier>const</specifier> <name>ret_pline</name></expr></argument>)</argument_list>

<name>REAL_FATTR_NONNULL_ALL</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_preader_get_line</name><parameter_list>(<parameter><decl><type><name>ParserInputReader</name> <modifier>*</modifier><specifier>const</specifier></type> <name>preader</name></decl></parameter>,

<parameter><decl><type><name>ParserLine</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_pline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ParserLine</name></type> <name>pline</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>preader</name><operator>-&gt;</operator><name>get_line</name></name><argument_list>(<argument><expr><name><name>preader</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preader</name><operator>-&gt;</operator><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name> <operator>&amp;&amp;</operator> <name><name>pline</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ParserLine</name></type> <name>cpline</name> <init>= <expr><block>{

<expr><operator>.</operator><name>allocated</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>pline</name><operator>.</operator><name>size</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cpline</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>preader</name><operator>-&gt;</operator><name>conv</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>pline</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>cpline</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pline</name><operator>.</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pline</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pline</name> <operator>=</operator> <name>cpline</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kvi_push</name><argument_list>(<argument><expr><name><name>preader</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>, <argument><expr><name>pline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_pline</name> <operator>=</operator> <name>pline</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>viml_parser_get_remaining_line</name><argument_list>(<argument><expr><name>ParserState</name> <operator>*</operator><specifier>const</specifier> <name>pstate</name></expr></argument>,

<argument><expr><name>ParserLine</name> <operator>*</operator><specifier>const</specifier> <name>ret_pline</name></expr></argument>)</argument_list>

<name>REAL_FATTR_ALWAYS_INLINE</name> <name>REAL_FATTR_WARN_UNUSED_RESULT</name> <name>REAL_FATTR_NONNULL_ALL</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>viml_parser_get_remaining_line</name><parameter_list>(<parameter><decl><type><name>ParserState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pstate</name></decl></parameter>,

<parameter><decl><type><name>ParserLine</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_pline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_lines</name> <init>= <expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>line</name></name> <operator>==</operator> <name>num_lines</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>viml_preader_get_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pstate</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>, <argument><expr><name>ret_pline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_pline</name> <operator>=</operator> <call><name>kv_last</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>line</name></name> <operator>==</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret_pline</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret_pline</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret_pline</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ret_pline</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_parser_advance</name><argument_list>(<argument><expr><name>ParserState</name> <operator>*</operator><specifier>const</specifier> <name>pstate</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>size_t</name> <name>len</name></expr></argument>)</argument_list>

<name>REAL_FATTR_ALWAYS_INLINE</name> <name>REAL_FATTR_NONNULL_ALL</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_parser_advance</name><parameter_list>(<parameter><decl><type><name>ParserState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pstate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>line</name></name> <operator>==</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ParserLine</name></type> <name>pline</name> <init>= <expr><call><name>kv_last</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name><name>pline</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>line</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_parser_highlight</name><argument_list>(<argument><expr><name>ParserState</name> <operator>*</operator><specifier>const</specifier> <name>pstate</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>ParserPosition</name> <name>start</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>size_t</name> <name>end_col</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>group</name></expr></argument>)</argument_list>

<name>REAL_FATTR_ALWAYS_INLINE</name> <name>REAL_FATTR_NONNULL_ALL</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>viml_parser_highlight</name><parameter_list>(<parameter><decl><type><name>ParserState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pstate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ParserPosition</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pstate</name><operator>-&gt;</operator><name>colors</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><operator>*</operator><name><name>pstate</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>kv_Z</name><argument_list>(<argument><expr><operator>*</operator><name><name>pstate</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>start</name><operator>.</operator><name>line</name></name> <operator>&lt;</operator> <name><name>start</name><operator>.</operator><name>line</name></name>

<operator>||</operator> <call><name>kv_Z</name><argument_list>(<argument><expr><operator>*</operator><name><name>pstate</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>end_col</name> <operator>&lt;=</operator> <name><name>start</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>kvi_push</name><argument_list>(<argument>*pstate-&gt;colors</argument>, <argument>((ParserHighlightChunk) {

.start = start,

.end_col = start.col + len,

.group = group,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"viml/parser/parser.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
