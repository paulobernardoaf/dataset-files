<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\mark.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FMARK</name><parameter_list>(<parameter><type><name>fmarkp_</name></type></parameter>, <parameter><type><name>mark_</name></type></parameter>, <parameter><type><name>fnum_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fmark_T *const fmarkp__ = fmarkp_; fmarkp__-&gt;mark = mark_; fmarkp__-&gt;fnum = fnum_; fmarkp__-&gt;timestamp = os_time(); fmarkp__-&gt;additional_data = NULL; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_FMARK</name><parameter_list>(<parameter><type><name>fmarkp_</name></type></parameter>, <parameter><type><name>mark_</name></type></parameter>, <parameter><type><name>fnum_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fmark_T *const fmarkp___ = fmarkp_; free_fmark(*fmarkp___); SET_FMARK(fmarkp___, mark_, fnum_); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR_FMARK</name><parameter_list>(<parameter><type><name>fmarkp_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RESET_FMARK(fmarkp_, ((pos_T) { 0, 0, 0 }), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_XFMARK</name><parameter_list>(<parameter><type><name>xfmarkp_</name></type></parameter>, <parameter><type><name>mark_</name></type></parameter>, <parameter><type><name>fnum_</name></type></parameter>, <parameter><type><name>fname_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { xfmark_T *const xfmarkp__ = xfmarkp_; xfmarkp__-&gt;fname = fname_; SET_FMARK(&amp;(xfmarkp__-&gt;fmark), mark_, fnum_); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_XFMARK</name><parameter_list>(<parameter><type><name>xfmarkp_</name></type></parameter>, <parameter><type><name>mark_</name></type></parameter>, <parameter><type><name>fnum_</name></type></parameter>, <parameter><type><name>fname_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { xfmark_T *const xfmarkp__ = xfmarkp_; free_xfmark(*xfmarkp__); xfmarkp__-&gt;fname = fname_; SET_FMARK(&amp;(xfmarkp__-&gt;fmark), mark_, fnum_); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>mark_global_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_CONST

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ASCII_ISUPPER</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><operator>(</operator><name>name</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><operator>(</operator><name>NMARKS</name> <operator>+</operator> <operator>(</operator><name>name</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr>

</then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>mark_local_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_CONST

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ASCII_ISLOWER</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><operator>(</operator><name>name</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>name</name> <operator>==</operator> <literal type="char">'"'</literal></expr>

?</condition><then> <expr><name>NMARKS</name></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>name</name> <operator>==</operator> <literal type="char">'^'</literal></expr>

?</condition><then> <expr><name>NMARKS</name> <operator>+</operator> <literal type="number">1</literal></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>name</name> <operator>==</operator> <literal type="char">'.'</literal></expr>

?</condition><then> <expr><name>NMARKS</name> <operator>+</operator> <literal type="number">2</literal></expr>

</then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lt</name><argument_list>(<argument><expr><name>pos_T</name></expr></argument>, <argument><expr><name>pos_T</name></expr></argument>)</argument_list> <name>REAL_FATTR_CONST</name> <name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>equalpos</name><argument_list>(<argument><expr><name>pos_T</name></expr></argument>, <argument><expr><name>pos_T</name></expr></argument>)</argument_list>

<name>REAL_FATTR_CONST</name> <name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ltoreq</name><argument_list>(<argument><expr><name>pos_T</name></expr></argument>, <argument><expr><name>pos_T</name></expr></argument>)</argument_list>

<name>REAL_FATTR_CONST</name> <name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>clearpos</name><argument_list>(<argument><expr><name>pos_T</name> <operator>*</operator></expr></argument>)</argument_list>

<name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lt</name><parameter_list>(<parameter><decl><type><name>pos_T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pos_T</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>a</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>lnum</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>a</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>col</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>a</name><operator>.</operator><name>coladd</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>coladd</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>equalpos</name><parameter_list>(<parameter><decl><type><name>pos_T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pos_T</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>lnum</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>col</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>coladd</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>coladd</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ltoreq</name><parameter_list>(<parameter><decl><type><name>pos_T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pos_T</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>equalpos</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>clearpos</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mark.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
