<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\vim.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_FILE</name></cpp:macro> <cpp:value>"Session.vim"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MSG_HIST_LEN</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_OPTWIN_FILE</name></cpp:macro> <cpp:value>"$VIMRUNTIME/optwin.vim"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUNTIME_DIRNAME</name></cpp:macro> <cpp:value>"runtime"</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"auto/config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PATHDEF</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> Configure did not run properly.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_defs.h"</cpp:file></cpp:include> 

<enum>enum <block>{ <decl><name>NUMBUFLEN</name> <init>= <expr><literal type="number">65</literal></expr></init></decl> }</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TYPENR</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROOT_UID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/gettext.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_HIST</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMAL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VISUAL</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_PENDING</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LANGMAP</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_FLAG</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE</name></cpp:macro> <cpp:value>(REPLACE_FLAG + INSERT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VREPLACE_FLAG</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VREPLACE</name></cpp:macro> <cpp:value>(REPLACE_FLAG + VREPLACE_FLAG + INSERT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LREPLACE</name></cpp:macro> <cpp:value>(REPLACE_FLAG + LANGMAP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMAL_BUSY</name></cpp:macro> <cpp:value>(0x100 + NORMAL)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HITRETURN</name></cpp:macro> <cpp:value>(0x200 + NORMAL)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASKMORE</name></cpp:macro> <cpp:value>0x300</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETWSIZE</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABBREV</name></cpp:macro> <cpp:value>0x500</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERNCMD</name></cpp:macro> <cpp:value>0x600</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOWMATCH</name></cpp:macro> <cpp:value>(0x700 + INSERT)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIRM</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECTMODE</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_FOCUS</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDPREVIEW</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ALL_MODES</name></cpp:macro> <cpp:value>(0x3f | SELECTMODE | TERM_FOCUS)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kDirectionNotSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>FORWARD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BACKWARD</name> <init>= <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,

<decl><name>FORWARD_FILE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>BACKWARD_FILE</name> <init>= <expr><operator>(</operator><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>,

}</block></enum></type> <name>Direction</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>OK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>OK</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTDONE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_TYPE_NUMBER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_TYPE_STRING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_TYPE_FUNC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_TYPE_LIST</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_TYPE_DICT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_TYPE_FLOAT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_TYPE_BOOL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>EXPAND_UNSUCCESSFUL</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>EXPAND_OK</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>EXPAND_NOTHING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>EXPAND_COMMANDS</name></decl>,

<decl><name>EXPAND_FILES</name></decl>,

<decl><name>EXPAND_DIRECTORIES</name></decl>,

<decl><name>EXPAND_SETTINGS</name></decl>,

<decl><name>EXPAND_BOOL_SETTINGS</name></decl>,

<decl><name>EXPAND_TAGS</name></decl>,

<decl><name>EXPAND_OLD_SETTING</name></decl>,

<decl><name>EXPAND_HELP</name></decl>,

<decl><name>EXPAND_BUFFERS</name></decl>,

<decl><name>EXPAND_EVENTS</name></decl>,

<decl><name>EXPAND_MENUS</name></decl>,

<decl><name>EXPAND_SYNTAX</name></decl>,

<decl><name>EXPAND_HIGHLIGHT</name></decl>,

<decl><name>EXPAND_AUGROUP</name></decl>,

<decl><name>EXPAND_USER_VARS</name></decl>,

<decl><name>EXPAND_MAPPINGS</name></decl>,

<decl><name>EXPAND_TAGS_LISTFILES</name></decl>,

<decl><name>EXPAND_FUNCTIONS</name></decl>,

<decl><name>EXPAND_USER_FUNC</name></decl>,

<decl><name>EXPAND_EXPRESSION</name></decl>,

<decl><name>EXPAND_MENUNAMES</name></decl>,

<decl><name>EXPAND_USER_COMMANDS</name></decl>,

<decl><name>EXPAND_USER_CMD_FLAGS</name></decl>,

<decl><name>EXPAND_USER_NARGS</name></decl>,

<decl><name>EXPAND_USER_COMPLETE</name></decl>,

<decl><name>EXPAND_ENV_VARS</name></decl>,

<decl><name>EXPAND_LANGUAGE</name></decl>,

<decl><name>EXPAND_COLORS</name></decl>,

<decl><name>EXPAND_COMPILER</name></decl>,

<decl><name>EXPAND_USER_DEFINED</name></decl>,

<decl><name>EXPAND_USER_LIST</name></decl>,

<decl><name>EXPAND_SHELLCMD</name></decl>,

<decl><name>EXPAND_CSCOPE</name></decl>,

<decl><name>EXPAND_SIGN</name></decl>,

<decl><name>EXPAND_PROFILE</name></decl>,

<decl><name>EXPAND_BEHAVE</name></decl>,

<decl><name>EXPAND_FILETYPE</name></decl>,

<decl><name>EXPAND_FILES_IN_PATH</name></decl>,

<decl><name>EXPAND_OWNSYNTAX</name></decl>,

<decl><name>EXPAND_LOCALES</name></decl>,

<decl><name>EXPAND_HISTORY</name></decl>,

<decl><name>EXPAND_USER</name></decl>,

<decl><name>EXPAND_SYNTIME</name></decl>,

<decl><name>EXPAND_USER_ADDR_TYPE</name></decl>,

<decl><name>EXPAND_PACKADD</name></decl>,

<decl><name>EXPAND_MESSAGES</name></decl>,

<decl><name>EXPAND_MAPCLEAR</name></decl>,

<decl><name>EXPAND_ARGLIST</name></decl>,

<decl><name>EXPAND_CHECKHEALTH</name></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_SWAP_PAGE_SIZE</name></cpp:macro> <cpp:value>1048</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SWAP_PAGE_SIZE</name></cpp:macro> <cpp:value>50000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAYBE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_HEIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QF_WINHEIGHT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CMDBUFFSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDBUFFSIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIALOG_MSG_SIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define> 

<enum>enum <block>{ <decl><name>FOLD_TEXT_LEN</name> <init>= <expr><literal type="number">51</literal></expr></init></decl> }</block>;</enum> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMAPLEN</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNDO_HASH_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRLEN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen((char *)(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRCPY</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcpy((char *)(d), (char *)(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNCPY</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncpy((char *)(d), (char *)(s), (size_t)(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRLCPY</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xstrlcpy((char *)(d), (char *)(s), (size_t)(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRCMP</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcmp((char *)(d), (char *)(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNCMP</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncmp((char *)(d), (char *)(s), (size_t)(n))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRCASECMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICMP</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcasecmp((char *)(d), (char *)(s))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRICMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICMP</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stricmp((char *)(d), (char *)(s))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICMP</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vim_stricmp((char *)(d), (char *)(s))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRMOVE</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memmove((d), (s), STRLEN(s) + 1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRNCASECMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNICMP</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncasecmp((char *)(d), (char *)(s), (size_t)(n))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRNICMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNICMP</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strnicmp((char *)(d), (char *)(s), (size_t)(n))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNICMP</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vim_strnicmp((char *)(d), (char *)(s), (size_t)(n))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRRCHR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(char_u *)strrchr((const char *)(s), (c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRCAT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcat((char *)(d), (char *)(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNCAT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncat((char *)(d), (char *)(s), (size_t)(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRLCAT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xstrlcat((char *)(d), (char *)(s), (size_t)(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_strpbrk</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>cs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(char_u *)strpbrk((char *)(s), (char *)(cs))</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERROR</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) emsgf("%s: %s", msg, strerror(errno))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOWCMD_COLS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_MAX_ITEM</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fnamecmp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>path_fnamecmp((const char *)(x), (const char *)(y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fnamencmp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>path_fnamencmp((const char *)(x), (const char *)(y), (size_t)(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HL_ATTR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>highlight_attr[(int)(n)]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_MAXBYTES</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mch_errmsg</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "%s", (str))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mch_msg</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s", (str))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_ALL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_DIR</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_ERR</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_START</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_OPT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_NORTP</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_NOAFTER</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIP_AFTER</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWEST_WIN_ID</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>BSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_kernel__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>S_ISCHR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN_CHR_FILES</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CR_NCHAR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_NL_NCHAR</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

</unit>
