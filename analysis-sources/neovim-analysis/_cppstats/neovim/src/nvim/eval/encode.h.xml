<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\eval\encode.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;msgpack.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include> 

<function_decl><type><name>int</name></type> <name>encode_vim_to_msgpack</name><parameter_list>(<parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>packer</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>objname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>encode_vim_to_echo</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>packer</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>objname</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>li_length</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ListReaderState</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ListReaderState</name></type> <name>encode_init_lrstate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ListReaderState</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>list</name> <operator>=</operator> <name>list</name></expr>,

<expr><operator>.</operator><name>li</name> <operator>=</operator> <call><name>tv_list_first</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>li_length</name> <operator>=</operator> <operator>(</operator><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name>

<operator>?</operator> <literal type="number">0</literal>

<operator>:</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(

<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>,

}</block></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>encode_special_var_names</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROGATE_HI_START</name></cpp:macro> <cpp:value>0xD800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROGATE_HI_END</name></cpp:macro> <cpp:value>0xDBFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROGATE_LO_START</name></cpp:macro> <cpp:value>0xDC00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROGATE_LO_END</name></cpp:macro> <cpp:value>0xDFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROGATE_FIRST_CHAR</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval/encode.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
