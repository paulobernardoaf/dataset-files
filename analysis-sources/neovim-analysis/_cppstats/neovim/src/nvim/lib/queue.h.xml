<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\lib\queue.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>_queue</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>_queue</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_queue</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

}</block></struct></type> <name>QUEUE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_DATA</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)((char *)(ptr) - offsetof(type, field)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_FOREACH</name><parameter_list>(<parameter><type><name>q</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ( (q) = (h)-&gt;next; (q) != (h); (q) = (q)-&gt;next)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>QUEUE_EMPTY</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>q</name></decl></parameter>)</parameter_list>

FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><name>q</name> <operator>==</operator> <name><name>q</name><operator>-&gt;</operator><name>next</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_HEAD</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(q)-&gt;next</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>QUEUE_INIT</name><parameter_list>(<parameter><decl><type><name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>q</name></decl></parameter>)</parameter_list> FUNC_ATTR_ALWAYS_INLINE

<block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>QUEUE_ADD</name><parameter_list>(<parameter><decl><type><name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>n</name></decl></parameter>)</parameter_list>

FUNC_ATTR_ALWAYS_INLINE

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>QUEUE_INSERT_HEAD</name><parameter_list>(<parameter><decl><type><name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>q</name></decl></parameter>)</parameter_list>

FUNC_ATTR_ALWAYS_INLINE

<block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>QUEUE_INSERT_TAIL</name><parameter_list>(<parameter><decl><type><name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>q</name></decl></parameter>)</parameter_list>

FUNC_ATTR_ALWAYS_INLINE

<block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>QUEUE_REMOVE</name><parameter_list>(<parameter><decl><type><name>QUEUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>q</name></decl></parameter>)</parameter_list> FUNC_ATTR_ALWAYS_INLINE

<block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
