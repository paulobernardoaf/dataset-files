<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\lib\klist.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KMEMPOOL_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>kmptype_t</name></type></parameter>, <parameter><type><name>kmpfree_f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { size_t cnt, n, max; kmptype_t **buf; } kmp_##name##_t; static inline kmp_##name##_t *kmp_init_##name(void) { return xcalloc(1, sizeof(kmp_##name##_t)); } static inline void kmp_destroy_##name(kmp_##name##_t *mp) REAL_FATTR_UNUSED; static inline void kmp_destroy_##name(kmp_##name##_t *mp) { size_t k; for (k = 0; k &lt; mp-&gt;n; k++) { kmpfree_f(mp-&gt;buf[k]); XFREE_CLEAR(mp-&gt;buf[k]); } XFREE_CLEAR(mp-&gt;buf); XFREE_CLEAR(mp); } static inline kmptype_t *kmp_alloc_##name(kmp_##name##_t *mp) { mp-&gt;cnt++; if (mp-&gt;n == 0) { return xcalloc(1, sizeof(kmptype_t)); } return mp-&gt;buf[--mp-&gt;n]; } static inline void kmp_free_##name(kmp_##name##_t *mp, kmptype_t *p) { mp-&gt;cnt--; if (mp-&gt;n == mp-&gt;max) { mp-&gt;max = mp-&gt;max ? (mp-&gt;max &lt;&lt; 1) : 16; mp-&gt;buf = xrealloc(mp-&gt;buf, sizeof(kmptype_t *) * mp-&gt;max); } mp-&gt;buf[mp-&gt;n++] = p; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmempool_t</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kmp_##name##_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmp_init</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kmp_init_##name()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmp_destroy</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kmp_destroy_##name(mp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmp_alloc</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kmp_alloc_##name(mp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmp_free</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mp</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kmp_free_##name(mp, p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KLIST_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>kltype_t</name></type></parameter>, <parameter><type><name>kmpfree_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct __kl1_##name { kltype_t data; struct __kl1_##name *next; }; typedef struct __kl1_##name kl1_##name; KMEMPOOL_INIT(name, kl1_##name, kmpfree_t) typedef struct { kl1_##name *head, *tail; kmp_##name##_t *mp; size_t size; } kl_##name##_t; static inline kl_##name##_t *kl_init_##name(void) { kl_##name##_t *kl = xcalloc(1, sizeof(kl_##name##_t)); kl-&gt;mp = kmp_init(name); kl-&gt;head = kl-&gt;tail = kmp_alloc(name, kl-&gt;mp); kl-&gt;head-&gt;next = 0; return kl; } static inline void kl_destroy_##name(kl_##name##_t *kl) REAL_FATTR_UNUSED; static inline void kl_destroy_##name(kl_##name##_t *kl) { kl1_##name *p; for (p = kl-&gt;head; p != kl-&gt;tail; p = p-&gt;next) { kmp_free(name, kl-&gt;mp, p); } kmp_free(name, kl-&gt;mp, p); kmp_destroy(name, kl-&gt;mp); XFREE_CLEAR(kl); } static inline void kl_push_##name(kl_##name##_t *kl, kltype_t d) { kl1_##name *q, *p = kmp_alloc(name, kl-&gt;mp); q = kl-&gt;tail; p-&gt;next = 0; kl-&gt;tail-&gt;next = p; kl-&gt;tail = p; kl-&gt;size++; q-&gt;data = d; } static inline kltype_t kl_shift_at_##name(kl_##name##_t *kl, kl1_##name **n) { assert((*n)-&gt;next); kl1_##name *p; kl-&gt;size--; p = *n; *n = (*n)-&gt;next; if (p == kl-&gt;head) { kl-&gt;head = *n; } kltype_t d = p-&gt;data; kmp_free(name, kl-&gt;mp, p); return d; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kliter_t</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kl1_##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>klist_t</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kl_##name##_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_val</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((iter)-&gt;data)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_next</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((iter)-&gt;next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_begin</name><parameter_list>(<parameter><type><name>kl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kl)-&gt;head)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_end</name><parameter_list>(<parameter><type><name>kl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kl)-&gt;tail)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_init</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kl_init_##name()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_destroy</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>kl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kl_destroy_##name(kl)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_push</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>kl</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kl_push_##name(kl, d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_shift_at</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>kl</name></type></parameter>, <parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kl_shift_at_##name(kl, node)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_shift</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>kl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kl_shift_at(name, kl, &amp;kl-&gt;head)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_empty</name><parameter_list>(<parameter><type><name>kl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kl)-&gt;size == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_iter</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>kl</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kl_iter_at(name, kl, p, NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl_iter_at</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>kl</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (kl1_##name **p = h ? h : &amp;kl-&gt;head; *p != kl-&gt;tail; p = &amp;(*p)-&gt;next)</cpp:value></cpp:define>

</unit>
