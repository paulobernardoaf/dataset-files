<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\syntax.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor_shape.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/hashtab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/indent_c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/sign.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/terminal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_syntax_onoff</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>hl_group</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_name_u</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>sg_cleared</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_attr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_link</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>sctx_T</name></type> <name>sg_script_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_cterm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_cterm_fg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_cterm_bg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>sg_cterm_bold</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_gui</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RgbValue</name></type> <name>sg_rgb_fg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RgbValue</name></type> <name>sg_rgb_bg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RgbValue</name></type> <name>sg_rgb_sp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sg_rgb_fg_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sg_rgb_bg_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sg_rgb_sp_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_blend</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SG_CTERM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SG_GUI</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SG_LINK</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>highlight_ga</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>hl_group</name></name> <modifier>*</modifier></type> <name>HL_TABLE</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator>struct <name>hl_group</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name><name>highlight_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HL_ID</name></cpp:macro> <cpp:value>20000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_MS_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_ME_OFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_HS_OFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_HE_OFF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_RS_OFF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_RE_OFF</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_LC_OFF</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_COUNT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>include_none</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>include_default</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>include_link</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>hl_name_table</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{ <expr><literal type="string">"bold"</literal></expr>, <expr><literal type="string">"standout"</literal></expr>, <expr><literal type="string">"underline"</literal></expr>, <expr><literal type="string">"undercurl"</literal></expr>,

<expr><literal type="string">"italic"</literal></expr>, <expr><literal type="string">"reverse"</literal></expr>, <expr><literal type="string">"inverse"</literal></expr>, <expr><literal type="string">"strikethrough"</literal></expr>, <expr><literal type="string">"nocombine"</literal></expr>, <expr><literal type="string">"NONE"</literal></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>hl_attr_table</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>HL_BOLD</name></expr>, <expr><name>HL_STANDOUT</name></expr>, <expr><name>HL_UNDERLINE</name></expr>, <expr><name>HL_UNDERCURL</name></expr>, <expr><name>HL_ITALIC</name></expr>, <expr><name>HL_INVERSE</name></expr>,

<expr><name>HL_INVERSE</name></expr>, <expr><name>HL_STRIKETHROUGH</name></expr>, <expr><name>HL_NOCOMBINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>syn_pattern</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name>sp_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>sp_syncing</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>sp_syn_match_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>sp_off_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>sp_offsets</name><index>[<expr><name>SPO_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_cchar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_ic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_sync_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_line_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_startcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sp_cont_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sp_next_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>sp_syn</name></name></type> <name>sp_syn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sp_pattern</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>sp_prog</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>syn_time_T</name></type> <name>sp_time</name></decl>;</decl_stmt>

}</block></struct></type> <name>synpat_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>syn_cluster_S</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scl_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scl_name_u</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>scl_list</name></decl>;</decl_stmt> 

}</block></struct></type> <name>syn_cluster_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>state_item</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>si_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_trans_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_m_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_m_startcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>si_m_endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>si_h_startpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>si_h_endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>si_eoe_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_end_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_ends</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_attr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>si_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_seqnr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_cchar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>si_cont_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>si_next_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>si_extmatch</name></decl>;</decl_stmt> 

}</block></struct></type> <name>stateitem_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>keyword</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>sync_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>has_cont_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cont_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cont_in_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>next_list</name></decl>;</decl_stmt> 

}</block></struct></type> <name>syn_opt_arg_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>proftime_T</name></type> <name>total</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>slowest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>average</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>

}</block></struct></type> <name>time_entry_T</name>;</typedef>

<struct>struct <name>name_list</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syntax.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>spo_name_tab</name><index>[<expr><name>SPO_COUNT</name></expr>]</index></name><operator>)</operator> <operator>=</operator>

<block>{<expr><literal type="string">"ms="</literal></expr>, <expr><literal type="string">"me="</literal></expr>, <expr><literal type="string">"hs="</literal></expr>, <expr><literal type="string">"he="</literal></expr>, <expr><literal type="string">"rs="</literal></expr>, <expr><literal type="string">"re="</literal></expr>, <expr><literal type="string">"lc="</literal></expr>}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTYPE_MATCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTYPE_START</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTYPE_END</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTYPE_SKIP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_ITEMS</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((synpat_T *)((buf)-&gt;b_syn_patterns.ga_data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONE_IDX</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_CCOMMENT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_MATCH</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_STATE_P</name><parameter_list>(<parameter><type><name>ssp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bufstate_T *)((ssp)-&gt;ga_data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXKEYWLEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_trans_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_seqnr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_sub_char</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REPLACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_ADD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_SUBTRACT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_CLSTR</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((syn_cluster_T *)((buf)-&gt;b_syn_clusters.ga_data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNID_ALLBUT</name></cpp:macro> <cpp:value>MAX_HL_ID</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNID_TOP</name></cpp:macro> <cpp:value>21000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNID_CONTAINED</name></cpp:macro> <cpp:value>22000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNID_CLUSTER</name></cpp:macro> <cpp:value>23000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SYN_INC_TAG</name></cpp:macro> <cpp:value>999</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CLUSTER_ID</name></cpp:macro> <cpp:value>(32767 - SYNID_CLUSTER)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>syn_cmdlinep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_syn_inc_tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>running_syn_inc_tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>keyentry_T</name></type> <name>dumkey</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KE2HIKEY</name><parameter_list>(<parameter><type><name>kp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kp)-&gt;keyword)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIKEY2KE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((keyentry_T *)((p) - (dumkey.keyword - (char_u *)&amp;dumkey)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI2KE</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIKEY2KE((hi)-&gt;hi_key)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>keepend_level</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msg_no_items</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"No Syntax items defined for this buffer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYWORD_IDX</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_LIST_ALL</name></cpp:macro> <cpp:value>(int16_t *)-1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_seqnr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_match_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_m_endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_h_startpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_h_endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_match_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>next_match_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_eos_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_eoe_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_match_end_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>reg_extmatch_T</name> <modifier>*</modifier></type><name>next_match_extmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_STATE</name><parameter_list>(<parameter><type><name>ssp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ssp)-&gt;ga_itemsize == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_STATE</name><parameter_list>(<parameter><type><name>ssp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ssp)-&gt;ga_itemsize != 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>syn_win</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type><name>syn_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>synblock_T</name> <modifier>*</modifier></type><name>syn_block</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name> <modifier>*</modifier></type><name>syn_tm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>current_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>colnr_T</name></type> <name>current_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_state_stored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>current_state</name> 

<init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>current_next_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_next_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_line_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUR_STATE</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stateitem_T *)(current_state.ga_data))[idx]</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_time_on</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_SYN_TIME</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>syn_set_timeout</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>syn_tm</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>syntax_start</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>last_valid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>last_min_valid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>parsed_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>first_stored</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>changedtick</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>current_sub_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>syn_block</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name>

<operator>||</operator> <name>syn_buf</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name>

<operator>||</operator> <name>changedtick</name> <operator>!=</operator> <call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_buf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_block</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>changedtick</name> <operator>=</operator> <call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_win</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_lasttick</name></name> <operator>=</operator> <name>display_tick</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>current_lnum</name> <operator>&lt;</operator> <name>lnum</name>

<operator>&amp;&amp;</operator> <name>current_lnum</name> <operator>&lt;</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_finish_line</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_state_stored</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>store_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lnum</name> <operator>!=</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INVALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_valid</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&gt;=</operator> <name>lnum</name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_min_valid</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_min_valid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>load_current_state</name><argument_list>(<argument><expr><name>last_min_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INVALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_sync</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>last_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_stored</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>first_stored</name> <operator>=</operator> <name>current_lnum</name> <operator>+</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>first_stored</name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>&lt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <literal type="number">999999</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>/</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name>Rows</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>current_lnum</name> <operator>&lt;</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_start_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_finish_line</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lnum</name> <operator>&gt;=</operator> <name>first_stored</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>current_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&lt;</operator> <name>current_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <call><name>syn_stack_equal</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parsed_lnum</name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>&lt;=</operator> <name>parsed_lnum</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&lt;=</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>load_current_state</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>current_lnum</name> <operator>==</operator> <name>lnum</name>

<operator>||</operator> <name>current_lnum</name> <operator>&gt;=</operator> <name><name>prev</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name>dist</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>store_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>syn_start_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_syn_state</name><parameter_list>(<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>&gt;</operator> <name>SST_FIX_STATES</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNREF_BUFSTATE_EXTMATCH</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unref_extmatch((bs)-&gt;bs_extmatch)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GA_DEEP_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bufstate_T</name></expr></argument>, <argument><expr><name>UNREF_BUFSTATE_EXTMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNREF_STATEITEM_EXTMATCH</name><parameter_list>(<parameter><type><name>si</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unref_extmatch((si)-&gt;si_extmatch)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GA_DEEP_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>, <argument><expr><name>stateitem_T</name></expr></argument>, <argument><expr><name>UNREF_STATEITEM_EXTMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_sync</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl></parameter>, <parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>last_valid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>curbuf_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>curwin_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>cursor_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>break_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>had_sync_point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_match_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>found_current_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_current_col</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>found_m_endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>prev_current_col</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&gt;</operator> <name>start_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>start_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>start_lnum</name> <operator>-=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>&amp;</operator> <name>SF_CCOMMENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curwin_save</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf_save</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>syn_buf</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>start_lnum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>start_lnum</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>start_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>line</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_save</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_start_comment</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name>

<operator>==</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_id</name></name>

<operator>&amp;&amp;</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_START</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_current_state</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>cursor_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>curwin_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>curbuf_save</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>&amp;</operator> <name>SF_MATCH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>start_lnum</name> <operator>&gt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>break_lnum</name> <operator>=</operator> <name>start_lnum</name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>break_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>found_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>found_m_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>lnum</name> <operator>&gt;</operator> <name>break_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_valid</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>last_valid</name><operator>-&gt;</operator><name>sst_lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>load_current_state</name><argument_list>(<argument><expr><name>last_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>syn_match_linecont</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>current_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</init> <condition><expr><name>current_lnum</name> <operator>&lt;</operator> <name>end_lnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>current_lnum</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>syn_start_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>had_sync_point</name> <operator>=</operator> <call><name>syn_finish_line</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>had_sync_point</name> <operator>&amp;&amp;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>start_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>end_lnum</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>found_match_idx</name> <operator>=</operator> <name>KEYWORD_IDX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>found_flags</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_match_idx</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_sync_idx</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>found_current_lnum</name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_current_col</name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_m_endpos</name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>found_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>current_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lnum</name> <operator>&gt;=</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>found_m_endpos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>current_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_current_col</name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name>prev_current_col</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found_flags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found_match_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>push_current_state</name><argument_list>(<argument><expr><name>found_match_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_flags</name> <operator>&amp;</operator> <name>HL_SYNC_HERE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>found_current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>found_current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_si_end</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_finish_line</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name>break_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>break_lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>save_chartab</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>chartab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_isk</name></name> <operator>!=</operator> <name>empty_option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>chartab</name></expr></argument>, <argument><expr><name><name>syn_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>syn_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><name><name>syn_win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_chartab</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_chartab</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>chartab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name> <operator>!=</operator> <name>empty_option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>syn_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><name>chartab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_match_linecont</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>save_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>syn_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>IF_SYN_TIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_start_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>current_finished</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_update_ends</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_line_id</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>next_seqnr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_update_ends</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startofline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seen_keepend</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>startofline</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>)</operator><operator>.</operator><name>sp_type</name>

<operator>==</operator> <name>SPTYPE_MATCH</name>

<operator>&amp;&amp;</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>current_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_MATCHCONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>keepend_level</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_EXTEND</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seen_keepend</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>seen_keepend</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>startofline</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>startofline</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCHCONT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_si_end</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr></argument>, <argument><expr><operator>!</operator><name>startofline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>startofline</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seen_keepend</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_stack_free_block</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>clear_syn_state</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>syn_stack_free_all</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_stack_free_block</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>==</operator> <name>block</name> <operator>&amp;&amp;</operator> <call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_stack_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>to</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sstp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>/</operator> <name>SST_DIST</name> <operator>+</operator> <name>Rows</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>SST_MIN_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SST_MIN_ENTRIES</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SST_MAX_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SST_MAX_ENTRIES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>&gt;</operator> <name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>SST_DIST</name> <operator>+</operator> <name>Rows</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>SST_MIN_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SST_MIN_ENTRIES</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SST_MAX_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SST_MAX_ENTRIES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>len</name>

<operator>&amp;&amp;</operator> <call><name>syn_stack_cleanup</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sstp</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>synstate_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>sstp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>from</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>from</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>from</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <operator>*</operator><name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>!=</operator> <name>sstp</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>sstp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>sstp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name> <operator>=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>++</operator><name>to</name> <operator>&lt;</operator> <name>sstp</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>(</operator><name>sstp</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>sst_next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>=</operator> <name>sstp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>syn_stack_apply_changes</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_stack_apply_changes_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_stack_apply_changes_block</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_stack_apply_changes_block</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>syn_stack_free_entry</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_stack_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>disptick_T</name></type> <name>tick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>above</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>&lt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <literal type="number">999999</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>/</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name>Rows</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tick</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_lasttick</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>above</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name>dist</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>&gt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_lasttick</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>above</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>&lt;</operator> <name>tick</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tick</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>above</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>above</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>&lt;</operator> <name>tick</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tick</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>==</operator> <name>tick</name> <operator>&amp;&amp;</operator> <name><name>prev</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name>dist</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_entry</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_stack_free_entry</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_syn_state</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>synstate_T</name> <modifier>*</modifier></type><name>syn_stack_find_entry</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>prev</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>synstate_T</name> <modifier>*</modifier></type><name>store_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufstate_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>current_lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name>

<operator>||</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name>

<operator>||</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name>

<operator>||</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name>

<operator>&amp;&amp;</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>==</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>==</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>syn_stack_free_entry</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>!=</operator> <name>current_lnum</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_stack_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>current_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_syn_state</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <name>SST_FIX_STATES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bufstate_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name></expr></argument>, <argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>SYN_STATE_P</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_stack</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_idx</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_flags</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_seqnr</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_seqnr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_cchar</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_cchar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name> <operator>=</operator> <call><name>ref_extmatch</name><argument_list>(<argument><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_next_flags</name></name> <operator>=</operator> <name>current_next_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_next_list</name></name> <operator>=</operator> <name>current_next_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>=</operator> <name>display_tick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_state_stored</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>sp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_current_state</name><parameter_list>(<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufstate_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>&gt;</operator> <name>SST_FIX_STATES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>SYN_STATE_P</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>from</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_stack</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_seqnr</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_seqnr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_cchar</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_cchar</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name> <operator>=</operator> <call><name>ref_extmatch</name><argument_list>(<argument><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_ends</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_m_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_next_list</name> <operator>=</operator>

<operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name></expr>]</index><operator>)</operator><operator>.</operator><name>sp_next_list</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_next_flags</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_next_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_stack_equal</name><parameter_list>(<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bufstate_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>six</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bsx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>!=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name>

<operator>||</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next_list</name></name> <operator>!=</operator> <name>current_next_list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>&gt;</operator> <name>SST_FIX_STATES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>SYN_STATE_P</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_stack</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_idx</name> <operator>!=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name> <operator>==</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bsx</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>six</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bsx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>six</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsx</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>six</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsx</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>six</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_strcmp_ic</name><argument_list>(<argument><expr><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name></expr>]</index><operator>)</operator><operator>.</operator><name>sp_ic</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>bsx</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>six</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>NSUBEXP</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>syntax_end_parsing</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&lt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invalidate_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_state</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>validate_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>current_state</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stateitem_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_set_growsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syntax_check_changed</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name>current_lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_finish_line</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_stack_equal</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>store_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>syn_finish_line</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>syncing</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name>current_finished</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_current_attr</name><argument_list>(<argument><expr><name>syncing</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>syncing</name> <operator>&amp;&amp;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>stateitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cur_si</name> <init>= <expr><operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_flags</name>

<operator>&amp;</operator> <operator>(</operator><name>HL_SYNC_HERE</name><operator>|</operator><name>HL_SYNC_THERE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>colnr_T</name></type> <name>prev_current_col</name> <init>= <expr><name>current_col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name>prev_current_col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_syntax_attr</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>colnr_T</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>can_spell</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>keep_state</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>can_spell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <ternary><condition><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_DEFAULT</name></expr>

?</condition><then> <expr><operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_TOP</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_buf</name><operator>-&gt;</operator><name>b_p_smc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>syn_buf</name><operator>-&gt;</operator><name>b_p_smc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_trans_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_seqnr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INVALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>current_col</name> <operator>&lt;=</operator> <name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>syn_current_attr</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>can_spell</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>current_col</name> <operator>==</operator> <name>col</name></expr> ?</condition><then> <expr><name>keep_state</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>attr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_current_attr</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>syncing</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>displaying</name></decl></parameter>, 

<parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>can_spell</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>keep_state</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>hl_startpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>hl_endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>eos_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>eoe_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>end_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>next_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found_match</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_next_column</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>cur_extmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>keep_next_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>zero_width_next_list</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>zero_width_next_ga</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>current_col</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>current_col</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>next_match_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next_match_col</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_col</name>

<operator>&amp;&amp;</operator> <name>next_match_col</name> <operator>!=</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>push_next_match</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_state_stored</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>current_col</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>line</name><index>[<expr><name>current_col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_state_stored</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>try_next_column</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>try_next_column</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_keywords</name> <init>= <expr><operator>!</operator><name>syncing</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab_ic</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>found_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keep_next_list</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>||</operator> <name>cur_si</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_keywords</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>cur_pos</name> <init>= <expr><name>line</name> <operator>+</operator> <name>current_col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>current_col</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>vim_iswordp_buf</name><argument_list>(

<argument><expr><name>cur_pos</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>cur_pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <call><name>check_keyword_id</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>next_list</name></expr></argument>, <argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>syn_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>push_current_state</name><argument_list>(<argument><expr><name>KEYWORD_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_startcol</name></name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>endcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>endcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_seqnr</name></name> <operator>=</operator> <name>next_seqnr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cchar</name></name> <operator>=</operator> <name>cchar</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator>

<call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name>

<operator>&amp;</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_id</name></name> <operator>=</operator> <name>syn_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <name>syn_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HL_TRANSP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(

<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(

<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_trans_id</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_next_list</name></name> <operator>=</operator> <name>next_list</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>syn_id</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>next_match_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>next_match_col</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>next_match_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</init> <condition><expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>spp</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syncing</name></name> <operator>==</operator> <name>syncing</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>displaying</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_DISPLAY</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_MATCH</name>

<operator>||</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>current_next_list</name> <operator>!=</operator> <name>NULL</name></expr>

?</condition><then> <expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>current_next_list</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>cur_si</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>!</operator><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator></expr>

</then><else>: <expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>,

<argument><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name></name></expr></argument>,

<argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_line_id</name></name> <operator>==</operator> <name>current_line_id</name>

<operator>&amp;&amp;</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_startcol</name></name> <operator>&gt;=</operator> <name>next_match_col</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_line_id</name></name> <operator>=</operator> <name>current_line_id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>lc_col</name> <init>= <expr><name>current_col</name> <operator>-</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_LC_OFF</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lc_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lc_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_prog</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>syn_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>current_lnum</name></expr></argument>, <argument><expr><name>lc_col</name></expr></argument>,

<argument><expr><call><name>IF_SYN_TIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_startcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>syn_add_start_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_MS_OFF</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>current_lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_startcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_startcol</name></name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;=</operator> <name>next_match_col</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>did_match_already</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>try_next_column</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_add_start_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hl_startpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_HS_OFF</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eos_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_RS_OFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>cur_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_extmatch</name> <operator>=</operator> <name>re_extmatch_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>re_extmatch_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eoe_pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>eoe_pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hl_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_ONELINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>startpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_endpos</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hl_endpos</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eoe_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_idx</name></expr></argument>, <argument><expr><name>cur_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_MATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hl_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>,

<argument><expr><name>SPO_HE_OFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>,

<argument><expr><name>SPO_ME_OFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>endpos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>syncing</name> <operator>&lt;</operator> <name>startcol</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>==</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>try_next_column</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hl_startpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>hl_startpos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>startcol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hl_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>limit_pos_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hl_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_m_endpos</name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_h_endpos</name> <operator>=</operator> <name>hl_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_h_startpos</name> <operator>=</operator> <name>hl_startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_eos_pos</name> <operator>=</operator> <name>eos_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_eoe_pos</name> <operator>=</operator> <name>eoe_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_end_idx</name> <operator>=</operator> <name>end_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>next_match_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_extmatch</name> <operator>=</operator> <name>cur_extmatch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_extmatch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_match_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next_match_col</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>lspp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lspp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>next_match_idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next_match_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <name><name>next_match_m_endpos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>current_col</name>

<operator>&amp;&amp;</operator> <name><name>lspp</name><operator>-&gt;</operator><name>sp_next_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name><name>lspp</name><operator>-&gt;</operator><name>sp_next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_next_flags</name> <operator>=</operator> <name><name>lspp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>keep_next_list</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zero_width_next_list</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GA_APPEND</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>, <argument><expr><name>next_match_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <call><name>push_next_match</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>found_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_next_list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keep_next_list</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <name>HL_SKIPWHITE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>current_col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <name>HL_SKIPEMPTY</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zero_width_next_list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>found_match</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>restore_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_trans_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_seqnr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_si</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sip</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current_lnum</name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name>current_lnum</name> <operator>==</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name>current_col</name> <operator>&gt;=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>col</name></name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name>current_lnum</name> <operator>&lt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name>current_lnum</name> <operator>==</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name>current_col</name> <operator>&lt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>col</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_attr</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_attr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_id</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_trans_id</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_trans_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_flags</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_seqnr</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_seqnr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_sub_char</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_cchar</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>can_spell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sp_syn</name></name></type> <name>sps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name>current_trans_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>!=</operator> <name>SYNSPL_NOTOP</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <operator>!</operator><call><name>in_id_list</name><argument_list>(<argument><expr><name>sip</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_trans_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_TOP</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <call><name>in_id_list</name><argument_list>(<argument><expr><name>sip</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>sip</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syncing</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keep_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>current_col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>can_spell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <ternary><condition><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_DEFAULT</name></expr>

?</condition><then> <expr><operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_TOP</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_next_list</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>=</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><name>current_col</name></expr>]</index> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>current_col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <operator>(</operator><name>HL_SKIPNL</name> <operator>|</operator> <name>HL_SKIPEMPTY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>re_extmatch_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re_extmatch_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>cur_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>current_attr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>did_match_already</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_m_startcol</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_col</name>

<operator>&amp;&amp;</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_m_lnum</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_lnum</name>

<operator>&amp;&amp;</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></init></decl>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stateitem_T</name> <modifier>*</modifier></type><name>push_next_match</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>next_match_idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_current_state</name><argument_list>(<argument><expr><name>next_match_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name></name> <operator>=</operator> <name>next_match_h_startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_startcol</name></name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_seqnr</name></name> <operator>=</operator> <name>next_seqnr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cchar</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_cchar</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator>

<call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_next_list</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_extmatch</name></name> <operator>=</operator> <call><name>ref_extmatch</name><argument_list>(<argument><expr><name>next_match_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_ONELINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_si_end</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>next_match_m_endpos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name> <operator>=</operator> <name>next_match_m_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name>next_match_h_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>next_match_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name></name> <operator>=</operator> <name>next_match_eoe_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <name>next_match_end_idx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_flags</name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_CONCEAL</name> <operator>|</operator> <name>HL_CONCEALENDS</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name> <operator>&amp;&amp;</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>push_current_state</name><argument_list>(<argument><expr><name>next_match_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name></name> <operator>=</operator> <name>next_match_h_startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_startcol</name></name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name> <operator>=</operator> <name>next_match_eos_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name>next_match_eos_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>=</operator> <name>HL_MATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_seqnr</name></name> <operator>=</operator> <name>next_seqnr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>save_flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_CONCEALENDS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_next_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>cur_si</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_state_ends</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_extend</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>current_lnum</name>

<operator>||</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name>current_col</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>current_lnum</name>

<operator>||</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>current_col</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_MATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_seqnr</name></name> <operator>=</operator> <name>next_seqnr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_CONCEALENDS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_next_flags</name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <operator>(</operator><name>HL_SKIPNL</name> <operator>|</operator> <name>HL_SKIPEMPTY</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>had_extend</name> <operator>=</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_EXTEND</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pop_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>had_extend</name> <operator>&amp;&amp;</operator> <name>keepend_level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_update_ends</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_type</name>

<operator>==</operator> <name>SPTYPE_START</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_MATCH</name> <operator>|</operator> <name>HL_KEEPEND</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_si_end</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <name>HL_HAS_EOL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>keepend_level</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_si_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>sip</name> <init>= <expr><operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_cont_list</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_TRANSP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <name>ID_LIST_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_trans_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_h_startpos</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_h_startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_h_endpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_TRANS_CONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_cont_list</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_keepend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>maxpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>maxpos_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>sip</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>keepend_level</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_EXTEND</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>maxpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>maxpos_h</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>maxpos_h</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sip</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>limit_pos_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>limit_pos_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxpos_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>limit_pos_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sip</name><operator>-&gt;</operator><name>si_eoe_pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>maxpos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxpos</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>maxpos_h</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>maxpos_h</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name><name>maxpos_h</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>maxpos_h</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxpos_h</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>update_si_end</name><parameter_list>(

<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>sip</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>startcol</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>hl_endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>end_endpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>startpos</name> <init>= <expr><block>{

<expr><operator>.</operator><name>lnum</name> <operator>=</operator> <name>current_lnum</name></expr>,

<expr><operator>.</operator><name>col</name> <operator>=</operator> <name>startcol</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>endpos</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>find_endpos</name><argument_list>(<argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hl_endpos</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_idx</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_extmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_flags</name> <operator>&amp;</operator> <name>HL_ONELINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>syn_getcurline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name></name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name>hl_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_eoe_pos</name></name> <operator>=</operator> <name>end_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <name>end_idx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>push_current_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GA_APPEND_VIA_PTR</name><argument_list>(<argument><expr><name>stateitem_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pop_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&gt;=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_endpos</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, 

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>startpos</name></decl></parameter>, 

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>m_endpos</name></decl></parameter>, 

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>hl_endpos</name></decl></parameter>, 

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>flagsp</name></decl></parameter>, 

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>end_endpos</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end_idx</name></decl></parameter>, 

<parameter><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>start_ext</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>matchcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spp_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>best_regmatch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>!=</operator> <name>SPTYPE_START</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hl_endpos</name> <operator>=</operator> <operator>*</operator><name>startpos</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>!=</operator> <name>SPTYPE_START</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_SKIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>spp_skip</name> <operator>=</operator> <name>spp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>spp_skip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>re_extmatch_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re_extmatch_in</name> <operator>=</operator> <call><name>ref_extmatch</name><argument_list>(<argument><expr><name>start_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>start_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>save_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>best_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>start_idx</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lc_col</name> <init>= <expr><name>matchcol</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>!=</operator> <name>SPTYPE_END</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lc_col</name> <operator>-=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_LC_OFF</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lc_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lc_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_prog</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>syn_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>lc_col</name></expr></argument>,

<argument><expr><call><name>IF_SYN_TIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>best_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name>

<operator>&lt;</operator> <name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spp_skip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lc_col</name> <init>= <expr><name>matchcol</name> <operator>-</operator> <name><name>spp_skip</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_LC_OFF</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lc_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lc_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name><name>spp_skip</name><operator>-&gt;</operator><name>sp_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>spp_skip</name><operator>-&gt;</operator><name>sp_prog</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>syn_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>lc_col</name></expr></argument>,

<argument><expr><call><name>IF_SYN_TIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp_skip</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spp_skip</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&lt;=</operator> <name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>spp_skip</name></expr></argument>, <argument><expr><name>SPO_ME_OFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name>matchcol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matchcol</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>matchcol</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</init>

<condition><expr><name>matchcol</name> <operator>&lt;</operator> <name>line_len</name> <operator>&amp;&amp;</operator> <name>matchcol</name> <operator>&lt;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</condition>

<incr><expr><name>matchcol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matchcol</name> <operator>&gt;=</operator> <name>line_len</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>best_idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><name>m_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_regmatch</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_ME_OFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name><name>m_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><name>end_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_regmatch</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_HE_OFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>end_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>end_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>end_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>limit_pos</name><argument_list>(<argument><expr><name>end_endpos</name></expr></argument>, <argument><expr><name>m_endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name> <operator>!=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>&amp;&amp;</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end_idx</name> <operator>=</operator> <name>best_idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>SPO_RE_OFF</name> <operator>+</operator> <name>SPO_COUNT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>best_regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>best_regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>+=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_RE_OFF</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>limit_pos</name><argument_list>(<argument><expr><name>hl_endpos</name></expr></argument>, <argument><expr><name>m_endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>m_endpos</name> <operator>=</operator> <operator>*</operator><name>hl_endpos</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hl_endpos</name> <operator>=</operator> <operator>*</operator><name>end_endpos</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>had_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>restore_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>re_extmatch_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re_extmatch_in</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>limit_pos</name><parameter_list>(<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>limit</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>limit</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>limit</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <name><name>limit</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>limit</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>limit_pos_zero</name><parameter_list>(<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>limit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>limit_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_add_end_off</name><parameter_list>(

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, 

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, 

<parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idx</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>off</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>off</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>base</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>base</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_add_start_off</name><parameter_list>(

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, 

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, 

<parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <name>SPO_COUNT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>off</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>off</name><operator>++</operator> <operator>&amp;&amp;</operator> <name>base</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>base</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>syn_getcurline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name>current_lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_regexec</name><parameter_list>(<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>syn_time_T</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timed_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l_syn_time_on</name> <init>= <expr><name>syn_time_on</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l_syn_time_on</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>profile_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>rmm_maxcol</name></name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_p_smc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>syn_win</name></expr></argument>, <argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,

<argument><expr><name>syn_tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l_syn_time_on</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>profile_end</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <call><name>profile_add</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>profile_cmp</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>slowest</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>slowest</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>-&gt;</operator><name>match</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timed_out</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>syn_win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>syn_win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'redrawtime' exceeded, syntax highlighting disabled"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>+=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>+=</operator> <name>lnum</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_keyword_id</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>line</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>startcol</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>endcolp</name></decl></parameter>, 

<parameter><decl><type><name>long</name> <modifier>*</modifier><specifier>const</specifier></type> <name>flagsp</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>next_listp</name></decl></parameter>, 

<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cur_si</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ccharp</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>kwp</name> <init>= <expr><name>line</name> <operator>+</operator> <name>startcol</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kwlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kwlen</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>kwp</name> <operator>+</operator> <name>kwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>kwlen</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>kwp</name> <operator>+</operator> <name>kwlen</name></expr></argument>, <argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>kwlen</name> <operator>&gt;</operator> <name>MAXKEYWLEN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>keyword</name><index>[<expr><name>MAXKEYWLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>kwp</name></expr></argument>, <argument><expr><name>kwlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab</name><operator>.</operator><name>ht_used</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>match_keyword</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>, <argument><expr><name>cur_si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab_ic</name><operator>.</operator><name>ht_used</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>str_foldcase</name><argument_list>(<argument><expr><name>kwp</name></expr></argument>, <argument><expr><name>kwlen</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>MAXKEYWLEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>match_keyword</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>, <argument><expr><name>cur_si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>endcolp</name> <operator>=</operator> <name>startcol</name> <operator>+</operator> <name>kwlen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>next_listp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ccharp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>k_char</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>id</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>keyentry_T</name> <modifier>*</modifier></type><name>match_keyword</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>, <parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,

<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><call><name>hash_find</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name> <init>= <expr><call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>kp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>kp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>current_next_list</name> <operator>!=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>current_next_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>cur_si</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>!</operator><operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator></expr>

</then><else>: <expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name></name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>

<return>return <expr><name>kp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_conceal</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_conceal</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax conceal on"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax conceal off"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_conceal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_conceal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E390: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_case</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax case ignore"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax case match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"ignore"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E390: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_spell</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_TOP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax spell toplevel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_NOTOP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax spell notoplevel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax spell default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"toplevel"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>=</operator> <name>SYNSPL_TOP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"notoplevel"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>=</operator> <name>SYNSPL_NOTOP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>=</operator> <name>SYNSPL_DEFAULT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E390: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_iskeyword</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>save_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_isk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name> <operator>!=</operator> <name>empty_option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax iskeyword "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax iskeyword not set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_chartab</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>save_chartab</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_isk</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_chartab</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><name>save_chartab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <name>save_isk</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>syntax_clear</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_slow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_ic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>=</operator> <name>SYNSPL_DEFAULT</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_conceal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_keywtab</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_keywtab</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>syn_clear_pattern</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>syn_clear_cluster</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_folditems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>running_syn_inc_tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_synblock</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syntax_clear</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syntax_sync_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_syncing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_remove_pattern</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_remove_pattern</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_FOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_folditems</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>syn_clear_pattern</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>spp</name></expr></argument>, <argument><expr><name>spp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>synpat_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_pattern</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sp_type</name> <operator>!=</operator> <name>SPTYPE_START</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_cont_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_next_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_cluster</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_clear</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>syncing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syntax_sync_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>syntax_clear</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"b:current_syntax"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"w:current_syntax"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_scl_namen2id</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E391: No such syntax cluster: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scl_id</name> <init>= <expr><name>id</name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>scl_id</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_namen2id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nogroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_clear_one</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>syncing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syncing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_clear_keyword</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_clear_keyword</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</init> <condition><expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name>id</name> <operator>||</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syncing</name></name> <operator>!=</operator> <name>syncing</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>syn_remove_pattern</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_on</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="string">"syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_enable</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"syntax_cmd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"enable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="string">"syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"g:syntax_cmd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_reset</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"syntax_cmd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><literal type="string">"runtime! syntax/syncolor.vim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"g:syntax_cmd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_manual</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="string">"manual"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_off</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="string">"nosyntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_onoff</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_syntax_onoff</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"so "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>SYNTAX_FNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>syn_maybe_on</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_syntax_onoff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>exarg_T</name></type> <name>ea</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>skip</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><literal type="string">"syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_list</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg_no_items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>syncing</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>&amp;</operator> <name>SF_CCOMMENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syncing on C-style comments"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_lines_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_match_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>&amp;</operator> <name>SF_MATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no syncing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syncing starts "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" lines before top line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_match_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Syntax sync items ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nsyncing on items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_lines_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_match_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Syntax items ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>&lt;=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>syn_list_one</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>syncing</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>id</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>syn_list_cluster</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_scl_namen2id</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E392: No such syntax cluster: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_list_cluster</name><argument_list>(<argument><expr><name>id</name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_namen2id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nogroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>syn_list_one</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>syncing</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_lines_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"minimal "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"maximal "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" lines before top line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_match_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"; match "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" line breaks"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_matchgroup</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_list_one</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>syncing</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>link_only</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>did_header</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>name_list</name></name></type> <name><name>namelist1</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>HL_DISPLAY</name></expr>, <expr><literal type="string">"display"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_CONTAINED</name></expr>, <expr><literal type="string">"contained"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_ONELINE</name></expr>, <expr><literal type="string">"oneline"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_KEEPEND</name></expr>, <expr><literal type="string">"keepend"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_EXTEND</name></expr>, <expr><literal type="string">"extend"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_EXCLUDENL</name></expr>, <expr><literal type="string">"excludenl"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_TRANSP</name></expr>, <expr><literal type="string">"transparent"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_FOLD</name></expr>, <expr><literal type="string">"fold"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_CONCEAL</name></expr>, <expr><literal type="string">"conceal"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_CONCEALENDS</name></expr>, <expr><literal type="string">"concealends"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>name_list</name></name></type> <name><name>namelist2</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>HL_SKIPWHITE</name></expr>, <expr><literal type="string">"skipwhite"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_SKIPNL</name></expr>, <expr><literal type="string">"skipnl"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_SKIPEMPTY</name></expr>, <expr><literal type="string">"skipempty"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syncing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_header</name> <operator>=</operator> <call><name>syn_list_keywords</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_header</name> <operator>=</operator> <call><name>syn_list_keywords</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>,

<argument><expr><name>did_header</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>

<condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition>

<incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>synpat_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>spp</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name>id</name> <operator>||</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syncing</name></name> <operator>!=</operator> <name>syncing</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_list_header</name><argument_list>(<argument><expr><name>did_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_header</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_matchgroup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_MATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_pattern</name><argument_list>(<argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>spp</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_START</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_pattern</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_SKIP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_pattern</name><argument_list>(<argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name>

<operator>&amp;&amp;</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_pattern</name><argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>syn_list_flags</name><argument_list>(<argument><expr><name>namelist1</name></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_cont_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><literal type="string">"contains"</literal></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_cont_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><literal type="string">"containedin"</literal></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_next_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><literal type="string">"nextgroup"</literal></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_next_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_list_flags</name><argument_list>(<argument><expr><name>namelist2</name></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_SYNC_HERE</name><operator>|</operator><name>HL_SYNC_THERE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_SYNC_HERE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"grouphere"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"groupthere"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_sync_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call>

<index>[<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_sync_idx</name></name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_link</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>did_header</name> <operator>||</operator> <name>link_only</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_list_header</name><argument_list>(<argument><expr><name>did_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"links to"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_link</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_list_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>nlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>nlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name><name>nlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_list_cluster</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>endcol</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>id</name></expr>]</index><operator>.</operator><name>scl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>endcol</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>msg_col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;=</operator> <name>endcol</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>id</name></expr>]</index><operator>.</operator><name>scl_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><literal type="string">"cluster"</literal></expr></argument>, <argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>id</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"cluster"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"=NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_id_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>list</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <name>SYNID_ALLBUT</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name>SYNID_TOP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"ALLBUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <name>SYNID_TOP</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name>SYNID_CONTAINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"TOP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <name>SYNID_CONTAINED</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name>SYNID_CLUSTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"CONTAINED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <name>SYNID_CLUSTER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scl_id</name> <init>= <expr><operator>*</operator><name>p</name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>scl_id</name></expr>]</index><operator>.</operator><name>scl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>synpat_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>spp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>sepchars</name> <init>= <expr><literal type="string">"/+=-#@\"|'^&amp;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_matchgroup</name> <operator>!=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_matchgroup</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"matchgroup"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_matchgroup</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>last_matchgroup</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr></argument>, <argument><expr><name><name>sepchars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sepchars</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>sepchars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>sepchars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SPO_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>mask</name> <operator>+</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>SPO_COUNT</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name><name>spo_name_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>n</name> <init>= <expr><name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>SPO_LC_OFF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>SPO_LC_OFF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>syn_list_keywords</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>hashtab_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ht</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>did_header</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev_contained</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>prev_next_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>prev_cont_in_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_skipnl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_skipwhite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_skipempty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr></init></decl>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>hi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>todo</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name> <init>= <expr><call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>kp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>kp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>outlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force_newline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_contained</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator>

<operator>||</operator> <name>prev_skipnl</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPNL</name><operator>)</operator>

<operator>||</operator> <name>prev_skipwhite</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPWHITE</name><operator>)</operator>

<operator>||</operator> <name>prev_skipempty</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPEMPTY</name><operator>)</operator>

<operator>||</operator> <name>prev_cont_in_list</name> <operator>!=</operator> <name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name>

<operator>||</operator> <name>prev_next_list</name> <operator>!=</operator> <name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>force_newline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_list_header</name><argument_list>(<argument><expr><name>did_header</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>force_newline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev_contained</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_cont_in_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipnl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipwhite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipempty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_header</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_contained</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"contained"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_contained</name> <operator>=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>prev_cont_in_list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><literal type="string">"containedin"</literal></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_cont_in_list</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name> <operator>!=</operator> <name>prev_next_list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><literal type="string">"nextgroup"</literal></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_next_list</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPNL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"skipnl"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipnl</name> <operator>=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPNL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPWHITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"skipwhite"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipwhite</name> <operator>=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPWHITE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPEMPTY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"skipempty"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipempty</name> <operator>=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPEMPTY</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>did_header</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_keyword</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_lock</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kp_prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kp</name> <operator>=</operator> <call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>kp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kp_next</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kp_prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kp_next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>=</operator> <call><name>KE2HIKEY</name><argument_list>(<argument><expr><name>kp_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>kp_prev</name><operator>-&gt;</operator><name>ke_next</name></name> <operator>=</operator> <name>kp_next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <name>kp_next</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>kp_prev</name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_unlock</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_keywtab</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kp</name> <operator>=</operator> <call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>kp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>kp</name> <operator>=</operator> <name>kp_next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>kp_next</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_keyword</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cont_in_list</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>next_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>conceal_char</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name_folded</name><index>[<expr><name>MAXKEYWLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name_ic</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name><operator>)</operator></expr>

?</condition><then> <expr><call><name>str_foldcase</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name_folded</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name_folded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>name</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>kp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyentry_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name_ic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>name_ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator> <name>current_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>k_char</name></name> <operator>=</operator> <name>conceal_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <call><name>copy_id_list</name><argument_list>(<argument><expr><name>cont_in_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cont_in_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name> <operator>=</operator> <call><name>copy_id_list</name><argument_list>(<argument><expr><name>next_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>hash_T</name></type> <name>hash</name> <init>= <expr><call><name>hash_hash</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ht</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name><operator>)</operator></expr>

?</condition><then> <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr>

</then><else>: <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>hi</name> <init>= <expr><call><name>hash_lookup</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>,

<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_add_item</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name> <operator>=</operator> <call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>=</operator> <call><name>KE2HIKEY</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_group_name</name> <parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>name_end</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>name_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>rest</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>rest</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_syn_options</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, 

<parameter><decl><type><name>syn_opt_arg_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>conceal_char</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>gname_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fidx</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>flag</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block> <decl><name><name>flagtab</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="string">"cCoOnNtTaAiInNeEdD"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_CONTAINED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"oOnNeElLiInNeE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_ONELINE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"kKeEeEpPeEnNdD"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_KEEPEND</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eExXtTeEnNdD"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_EXTEND</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eExXcClLuUdDeEnNlL"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_EXCLUDENL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tTrRaAnNsSpPaArReEnNtT"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_TRANSP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sSkKiIpPnNlL"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SKIPNL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sSkKiIpPwWhHiItTeE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SKIPWHITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sSkKiIpPeEmMpPtTyY"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SKIPEMPTY</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gGrRoOuUpPhHeErReE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SYNC_HERE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gGrRoOuUpPtThHeErReE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SYNC_THERE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dDiIsSpPlLaAyY"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_DISPLAY</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fFoOlLdD"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_FOLD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCoOnNcCeEaAlL"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_CONCEAL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCoOnNcCeEaAlLeEnNdDsS"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_CONCEALENDS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCcChHaArR"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCoOnNtTaAiInNsS"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCoOnNtTaAiInNeEdDiInN"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"nNeExXtTgGrRoOuUpP"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>first_letters</name> <init>= <expr><literal type="string">"cCoOkKeEtTsSgGdDfFnN"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_conceal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>first_letters</name></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>fidx</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>flagtab</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>--</operator><name>fidx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><operator>++</operator><name>len</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><ternary><condition><expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>

</then><else>: <expr><call><name>ends_excmd</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>keyword</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_DISPLAY</name>

<operator>||</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_FOLD</name>

<operator>||</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_EXTEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fidx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fidx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>has_cont_list</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E395: contains argument not accepted here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_id_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>cont_list</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_id_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>cont_in_list</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_id_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>==</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>conceal_char</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isprintc_strict</name><argument_list>(<argument><expr><operator>*</operator><name>conceal_char</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E844: invalid cchar value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_SYNC_HERE</name>

<operator>||</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_SYNC_THERE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>sync_idx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E393: group[t]here not accepted here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gname_start</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gname_start</name> <operator>==</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gname</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>gname_start</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>gname_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>gname</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>sync_idx</name></name> <operator>=</operator> <name>NONE_IDX</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name>gname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>syn_id</name>

<operator>&amp;&amp;</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_START</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>sync_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E394: Didn't find region item for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>gname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>gname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_FOLD</name>

<operator>&amp;&amp;</operator> <call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_incl_toplevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flagsp</name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>|=</operator> <name>HL_CONTAINED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>&gt;=</operator> <name>SYNID_CLUSTER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>grp_list</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>grp_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tlg_id</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>grp_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grp_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_combine_list</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>tlg_id</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>grp_list</name></expr></argument>,

<argument><expr><name>CLUSTER_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_include</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sgl_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errormsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_toplvl_grp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_syn_inc_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>source</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E397: Filename required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sgl_id</name> <operator>=</operator> <call><name>syn_check_cluster</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sgl_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>argt</name></name> <operator>|=</operator> <operator>(</operator><name>XFILE</name> <operator>|</operator> <name>NOSPC</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>separate_nextcmd</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <call><name>path_is_absolute</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>source</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>expand_filename</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>syn_cmdlinep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errormsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>running_syn_inc_tag</name> <operator>&gt;=</operator> <name>MAX_SYN_INC_TAG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E847: Too many syntax includes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_syn_inc_tag</name> <operator>=</operator> <name>current_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_syn_inc_tag</name> <operator>=</operator> <operator>++</operator><name>running_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_toplvl_grp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>=</operator> <name>sgl_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>source</name></expr> ?</condition><then> <expr><call><name>do_source</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>

</then><else>: <expr><call><name>source_runtime</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>DIP_ALL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>=</operator> <name>prev_toplvl_grp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_syn_inc_tag</name> <operator>=</operator> <name>prev_syn_inc_tag</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_keyword</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keyword_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>syn_opt_arg_T</name></type> <name>syn_opt_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conceal_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>syn_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keyword_copy</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyword_copy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>keyword</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>sync_idx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>has_cont_list</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>keyword_copy</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>rest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_options</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_opt_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>rest</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>rest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rest</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>rest</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_incl_toplevel</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kw</name> <operator>=</operator> <name>keyword_copy</name></expr>;</init> <condition><expr><operator>--</operator><name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>kw</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_keyword</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><name>syn_id</name></expr></argument>, <argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr></argument>,

<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>,

<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr></argument>, <argument><expr><name>conceal_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E789: Missing ']': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E890: trailing char after ']': %s]%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>kw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kw</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>keyword_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_match</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name></type> <name>item</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>syn_opt_arg_T</name></type> <name>syn_opt_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sync_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conceal_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>keyword</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>sync_idx</name></name> <operator>=</operator> <ternary><condition><expr><name>syncing</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>sync_idx</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>has_cont_list</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_options</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_opt_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_syn_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_pattern</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_regcomp_had_eol</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_EXCLUDENL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HL_HAS_EOL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_options</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_opt_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>syn_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_incl_toplevel</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name> <init>= <expr><call><name>GA_APPEND_VIA_PTR</name><argument_list>(<argument><expr><name>synpat_T</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>spp</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syncing</name></name> <operator>=</operator> <name>syncing</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>=</operator> <name>SPTYPE_MATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>syn_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator> <name>current_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_sync_idx</name></name> <operator>=</operator> <name>sync_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_cont_list</name></name> <operator>=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_cchar</name></name> <operator>=</operator> <name>conceal_char</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_next_list</name></name> <operator>=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_SYNC_HERE</name><operator>|</operator><name>HL_SYNC_THERE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>|=</operator> <name>SF_MATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_FOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_folditems</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>sp_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>sp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_region</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>item</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_SKIP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_END</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_MATCHGROUP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<struct>struct <name>pat_ptr</name> <block>{

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>pp_synp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pp_matchgroup_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>pat_ptr</name></name> <modifier>*</modifier></type><name>pp_next</name></decl>;</decl_stmt> 

}</block> <decl><modifier>*</modifier>(<name><name>pat_ptrs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>);</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>pat_ptr</name></name> <modifier>*</modifier></type><name>ppp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pat_ptr</name></name> <modifier>*</modifier></type><name>ppp_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pat_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matchgroup_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>not_enough</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>illegal</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>syn_opt_arg_T</name></type> <name>syn_opt_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conceal_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat_ptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat_ptrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat_ptrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_syn_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>keyword</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>sync_idx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>has_cont_list</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_options</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_opt_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key_end</name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>key_end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>key_end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>key_end</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>key_end</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>vim_strnsave_up</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>key_end</name> <operator>-</operator> <name>rest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"MATCHGROUP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>ITEM_MATCHGROUP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"START"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>ITEM_START</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>ITEM_END</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"SKIP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pat_ptrs</name><index>[<expr><name>ITEM_SKIP</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>ITEM_SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>key_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E398: Missing '=': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>rest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>not_enough</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_MATCHGROUP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>rest</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matchgroup_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>matchgroup_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>rest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchgroup_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ppp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pat_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_next</name></name> <operator>=</operator> <name><name>pat_ptrs</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat_ptrs</name><index>[<expr><name>item</name></expr>]</index></name> <operator>=</operator> <name>ppp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>synpat_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_START</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <name>REX_SET</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>ITEM_SKIP</name> <operator>||</operator> <name>item</name> <operator>==</operator> <name>ITEM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <name>REX_USE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_pattern</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_END</name> <operator>&amp;&amp;</operator> <call><name>vim_regcomp_had_eol</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_EXCLUDENL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>|=</operator> <name>HL_HAS_EOL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_matchgroup_id</name></name> <operator>=</operator> <name>matchgroup_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pat_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>illegal</name> <operator>||</operator> <name>not_enough</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pat_ptrs</name><index>[<expr><name>ITEM_START</name></expr>]</index></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>pat_ptrs</name><index>[<expr><name>ITEM_END</name></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>not_enough</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pat_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>syn_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_incl_toplevel</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name>ITEM_START</name></expr>;</init> <condition><expr><name>item</name> <operator>&lt;=</operator> <name>ITEM_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>item</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ppp</name> <operator>=</operator> <name><name>pat_ptrs</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</init> <condition><expr><name>ppp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppp</name> <operator>=</operator> <name><name>ppp</name><operator>-&gt;</operator><name>pp_next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_syncing</name> <operator>=</operator> <name>syncing</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><name>item</name> <operator>==</operator> <name>ITEM_START</name><operator>)</operator></expr> ?</condition><then> <expr><name>SPTYPE_START</name></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>item</name> <operator>==</operator> <name>ITEM_SKIP</name><operator>)</operator></expr> ?</condition><then> <expr><name>SPTYPE_SKIP</name></expr> </then><else>: <expr><name>SPTYPE_END</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_flags</name> <operator>|=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>syn_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator>

<name>current_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_syn_match_id</name> <operator>=</operator>

<name><name>ppp</name><operator>-&gt;</operator><name>pp_matchgroup_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_cchar</name> <operator>=</operator> <name>conceal_char</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_START</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_cont_list</name> <operator>=</operator>

<name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator>

<name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_next_list</name> <operator>=</operator>

<name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_FOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_folditems</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name>ITEM_START</name></expr>;</init> <condition><expr><name>item</name> <operator>&lt;=</operator> <name>ITEM_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>item</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ppp</name> <operator>=</operator> <name><name>pat_ptrs</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</init> <condition><expr><name>ppp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppp</name> <operator>=</operator> <name>ppp_next</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name><operator>-&gt;</operator><name>sp_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ppp_next</name> <operator>=</operator> <name><name>ppp</name><operator>-&gt;</operator><name>pp_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ppp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>not_enough</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E399: Not enough arguments: syntax region %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>illegal</name> <operator>||</operator> <name>rest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_compare_stub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>v2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s1</name> <init>= <expr><name>v1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s2</name> <init>= <expr><name>v2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>s1</name> <operator>&gt;</operator> <operator>*</operator><name>s2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>*</operator><name>s1</name> <operator>&lt;</operator> <operator>*</operator><name>s2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_combine_list</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>clstr1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>clstr2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>list_op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>g1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>g2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>clstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>clstr2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>clstr1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>list_op</name> <operator>==</operator> <name>CLUSTER_REPLACE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>list_op</name> <operator>==</operator> <name>CLUSTER_REPLACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>clstr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list_op</name> <operator>==</operator> <name>CLUSTER_REPLACE</name> <operator>||</operator> <name>list_op</name> <operator>==</operator> <name>CLUSTER_ADD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>clstr1</name> <operator>=</operator> <operator>*</operator><name>clstr2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>clstr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>g1</name> <operator>=</operator> <operator>*</operator><name>clstr1</name></expr>;</init> <condition><expr><operator>*</operator><name>g1</name></expr>;</condition> <incr><expr><name>g1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>count1</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>g2</name> <operator>=</operator> <operator>*</operator><name>clstr2</name></expr>;</init> <condition><expr><operator>*</operator><name>g2</name></expr>;</condition> <incr><expr><name>g2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>count2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>*</operator><name>clstr1</name></expr></argument>, <argument><expr><name>count1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>clstr1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>syn_compare_stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>*</operator><name>clstr2</name></expr></argument>, <argument><expr><name>count2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>clstr2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>syn_compare_stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>round</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>*</operator><name>clstr1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>*</operator><name>clstr2</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>g1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>g2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>g1</name> <operator>&lt;</operator> <operator>*</operator><name>g2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>g1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g1</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list_op</name> <operator>==</operator> <name>CLUSTER_ADD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>g2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>g1</name> <operator>==</operator> <operator>*</operator><name>g2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>g1</name></expr>;</condition> <incr><expr><name>g1</name><operator>++</operator></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>g1</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>list_op</name> <operator>==</operator> <name>CLUSTER_ADD</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>g2</name></expr>;</condition> <incr><expr><name>g2</name><operator>++</operator></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>g2</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clstr</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>clstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>clstr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>clstr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>clstr1</name> <operator>=</operator> <name>clstr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_scl_name2id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_u</name> <init>= <expr><call><name>vim_strsave_up</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_name_u</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>, <argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_name_u</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>i</name> <operator>+</operator> <name>SYNID_CLUSTER</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_scl_namen2id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>linep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_scl_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_check_cluster</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_scl_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_add_cluster</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_add_cluster</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>syn_cluster_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_set_growsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>MAX_CLUSTER_ID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E848: Too many syntax clusters"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>syn_cluster_T</name> <modifier>*</modifier></type><name>scp</name> <init>= <expr><call><name>GA_APPEND_VIA_PTR</name><argument_list>(<argument><expr><name>syn_cluster_T</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>scp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>scp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scp</name><operator>-&gt;</operator><name>scl_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scp</name><operator>-&gt;</operator><name>scl_name_u</name></name> <operator>=</operator> <call><name>vim_strsave_up</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scp</name><operator>-&gt;</operator><name>scl_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Spell"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>SYNID_CLUSTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoSpell"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>SYNID_CLUSTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>len</name> <operator>+</operator> <name>SYNID_CLUSTER</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_cluster</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>got_clstr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_op</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scl_id</name> <init>= <expr><call><name>syn_check_cluster</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scl_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>scl_id</name> <operator>-=</operator> <name>SYNID_CLUSTER</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>rest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>rest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>list_op</name> <operator>=</operator> <name>CLUSTER_ADD</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>rest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>rest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>list_op</name> <operator>=</operator> <name>CLUSTER_SUBTRACT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"contains"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>rest</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>rest</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>list_op</name> <operator>=</operator> <name>CLUSTER_REPLACE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>clstr_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_id_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>, <argument><expr><name>opt_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clstr_list</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scl_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_combine_list</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>scl_id</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>clstr_list</name></expr></argument>, <argument><expr><name>list_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>clstr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>got_clstr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>got_clstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_clstr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E400: No cluster specified"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_syn_patterns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>synpat_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_set_growsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_syn_pattern</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cpo_save</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E401: Pattern delimiter not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_pattern</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cpo_save</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>cpo_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_ic</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_clear_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>SPO_COUNT</name></expr>;</init> <condition><expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>spo_name_tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>SPO_LC_OFF</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>SPO_COUNT</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idx</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>SPO_LC_OFF</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>end</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SPO_MS_OFF</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SPO_MS_OFF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_MS_OFF</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>end</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>-</operator><call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E402: Garbage after pattern: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_sync</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>illegal</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>finished</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cpo_save</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_cmd_list</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>vim_strnsave_up</name><argument_list>(<argument><expr><name>arg_start</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CCOMMENT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>|=</operator> <name>SF_CCOMMENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>next_arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>next_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_id</name></name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>next_arg</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>next_arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_id</name></name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"LINES"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"MINLINES"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"MAXLINES"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"LINEBREAKS"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>key</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>key</name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>key</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg_end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal> <operator>||</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>getdigits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg_end</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"FROMSTART"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"LINECONT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E403: syntax sync: line continuations pattern specified twice"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>next_arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>next_arg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg_end</name> <operator>!=</operator> <operator>*</operator><name>next_arg</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name> <operator>=</operator>

<call><name>vim_strnsave</name><argument_list>(<argument><expr><name>next_arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>next_arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_ic</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cpo_save</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>=</operator>

<call><name>vim_regcomp</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>cpo_save</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_clear_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>finished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>next_arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"MATCH"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_cmd_match</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"REGION"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_cmd_region</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CLEAR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_cmd_clear</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg_start</name> <operator>=</operator> <name>next_arg</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>illegal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E404: Illegal arguments: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>finished</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_id_list</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>keylen</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>list</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>skip</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>round</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E405: Missing equal sign: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E406: Empty argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">','</literal></expr>;</condition> <incr><expr><name>end</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ALLBUT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"TOP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"CONTAINED"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E407: %s not allowed here"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E408: %s must be first in contains list"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>SYNID_ALLBUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>SYNID_TOP</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>SYNID_CONTAINED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>id</name> <operator>+=</operator> <name>current_syn_inc_tag</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_check_cluster</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strpbrk</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\.*^$~["</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>total_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E409: Unknown group name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>total_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>total_count</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>failed</name> <operator>||</operator> <name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>copy_id_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>list</name><index>[<expr><name>count</name></expr>]</index></name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>retval</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>in_id_list</name><parameter_list>(

<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, 

<parameter><decl><type><name><name>struct</name> <name>sp_syn</name></name> <modifier>*</modifier></type><name>ssp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>contained</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>scl_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>id</name> <init>= <expr><name><name>ssp</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_si</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ssp</name><operator>-&gt;</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_TRANS_CONT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>cur_si</name> <operator>&gt;</operator> <operator>(</operator><name>stateitem_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>current_state</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>cur_si</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>in_id_list</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ssp</name><operator>-&gt;</operator><name>cont_in_list</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_syn</name><operator>)</operator></expr></argument>,

<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_flags</name> <operator>&amp;</operator> <name>HL_CONTAINED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>ID_LIST_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>!</operator><name>contained</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&gt;=</operator> <name>SYNID_ALLBUT</name> <operator>&amp;&amp;</operator> <name>item</name> <operator>&lt;</operator> <name>SYNID_CLUSTER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&lt;</operator> <name>SYNID_TOP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>-</operator> <name>SYNID_ALLBUT</name> <operator>!=</operator> <name><name>ssp</name><operator>-&gt;</operator><name>inc_tag</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>item</name> <operator>&lt;</operator> <name>SYNID_CONTAINED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>-</operator> <name>SYNID_TOP</name> <operator>!=</operator> <name><name>ssp</name><operator>-&gt;</operator><name>inc_tag</name></name> <operator>||</operator> <name>contained</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>-</operator> <name>SYNID_CONTAINED</name> <operator>!=</operator> <name><name>ssp</name><operator>-&gt;</operator><name>inc_tag</name></name> <operator>||</operator> <operator>!</operator><name>contained</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>item</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&gt;=</operator> <name>SYNID_CLUSTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scl_list</name> <operator>=</operator> <call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>item</name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr>]</index><operator>.</operator><name>scl_list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scl_list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>in_id_list</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scl_list</name></expr></argument>, <argument><expr><name>ssp</name></expr></argument>, <argument><expr><name>contained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>depth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>list</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>!</operator><name>retval</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>subcommand</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>subcommand</name></name></type> <name><name>subcommands</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="string">"case"</literal></expr>, <expr><name>syn_cmd_case</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clear"</literal></expr>, <expr><name>syn_cmd_clear</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cluster"</literal></expr>, <expr><name>syn_cmd_cluster</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"conceal"</literal></expr>, <expr><name>syn_cmd_conceal</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"enable"</literal></expr>, <expr><name>syn_cmd_enable</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"include"</literal></expr>, <expr><name>syn_cmd_include</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"iskeyword"</literal></expr>, <expr><name>syn_cmd_iskeyword</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"keyword"</literal></expr>, <expr><name>syn_cmd_keyword</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"list"</literal></expr>, <expr><name>syn_cmd_list</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"manual"</literal></expr>, <expr><name>syn_cmd_manual</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"match"</literal></expr>, <expr><name>syn_cmd_match</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"on"</literal></expr>, <expr><name>syn_cmd_on</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"off"</literal></expr>, <expr><name>syn_cmd_off</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"region"</literal></expr>, <expr><name>syn_cmd_region</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reset"</literal></expr>, <expr><name>syn_cmd_reset</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"spell"</literal></expr>, <expr><name>syn_cmd_spell</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sync"</literal></expr>, <expr><name>syn_cmd_sync</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><name>syn_cmd_list</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ex_syntax</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>subcmd_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>subcmd_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>syn_cmdlinep</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>subcmd_end</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>subcmd_end</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>subcmd_end</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>subcmd_name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>subcmd_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>subcommands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E410: Invalid :syntax subcommand: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subcmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>subcmd_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>subcommands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>subcmd_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name><name>subcommands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>func</name><operator>)</operator><operator>(</operator><name>eap</name><operator>,</operator> <name>FALSE</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>subcmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_ownsyntax</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>synblock_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>synblock_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><literal type="string">"b:current_syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SYNTAX</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_value</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><literal type="string">"b:current_syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"w:current_syntax"</literal></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"b:current_syntax"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b:current_syntax"</literal></expr></argument>, <argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>syntax_present</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<enum><specifier>static</specifier> enum <block>{

<decl><name>EXP_SUBCMD</name></decl>, 

<decl><name>EXP_CASE</name></decl>, 

<decl><name>EXP_SPELL</name></decl>, 

<decl><name>EXP_SYNC</name></decl> 

}</block> <decl><name>expand_what</name></decl>;</enum>

<function><type><name>void</name></type> <name>reset_expand_highlight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>include_link</name> <operator>=</operator> <name>include_default</name> <operator>=</operator> <name>include_none</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_context_in_echohl_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_HIGHLIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>include_none</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_context_in_syntax_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_SYNTAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_SUBCMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>include_link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>include_default</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"case"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_CASE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"spell"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_SPELL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_SYNC</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"keyword"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"region"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_HIGHLIGHT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_syntax_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>expand_what</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXP_SUBCMD</name></expr>:</case>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>subcommands</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

<case>case <expr><name>EXP_CASE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>case_args</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"match"</literal></expr>, <expr><literal type="string">"ignore"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>case_args</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>EXP_SPELL</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>spell_args</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"toplevel"</literal></expr>, <expr><literal type="string">"notoplevel"</literal></expr>, <expr><literal type="string">"default"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>spell_args</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>EXP_SYNC</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sync_args</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"ccomment"</literal></expr>, <expr><literal type="string">"clear"</literal></expr>, <expr><literal type="string">"fromstart"</literal></expr>,

<expr><literal type="string">"linebreaks="</literal></expr>, <expr><literal type="string">"linecont"</literal></expr>, <expr><literal type="string">"lines="</literal></expr>, <expr><literal type="string">"match"</literal></expr>,

<expr><literal type="string">"maxlines="</literal></expr>, <expr><literal type="string">"minlines="</literal></expr>, <expr><literal type="string">"region"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>sync_args</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_get_id</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>trans</name></decl></parameter>, 

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>spellp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>keep_state</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>syn_buf</name> <operator>||</operator> <name>lnum</name> <operator>!=</operator> <name>current_lnum</name> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <name>current_col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syntax_start</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>col</name> <operator>&gt;</operator> <name>current_col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>get_syntax_attr</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>spellp</name></expr></argument>, <argument><expr><name>keep_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>trans</name></expr> ?</condition><then> <expr><name>current_trans_id</name></expr> </then><else>: <expr><name>current_id</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_syntax_info</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>seqnrp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>seqnrp</name> <operator>=</operator> <name>current_seqnr</name></expr>;</expr_stmt>

<return>return <expr><name>current_flags</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_get_concealed_id</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seqnr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>syntax_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_get_id</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>syntax_flags</name> <operator>=</operator> <call><name>get_syntax_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>syntax_flags</name> <operator>&amp;</operator> <name>HL_CONCEAL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>seqnr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_get_sub_char</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>current_sub_char</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_get_stack_item</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_id</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_get_foldlevel</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_folditems</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_error</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syntax_start</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_FOLD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>level</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_syntime</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>syn_time_on</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>syn_time_on</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syntime_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"report"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syntime_report</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_time</name><parameter_list>(<parameter><decl><type><name>syn_time_T</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <call><name>profile_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>slowest</name></name> <operator>=</operator> <call><name>profile_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>match</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syntime_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg_no_items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_clear_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_syntime_arg</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"on"</literal></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"off"</literal></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"clear"</literal></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"report"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_compare_syntime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>time_entry_T</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>v1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>time_entry_T</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><name>v2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>profile_cmp</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name><name>s2</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syntime_report</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg_no_items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>total_total</name> <init>= <expr><call><name>profile_zero</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_entry_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GA_APPEND_VIA_PTR</name><argument_list>(<argument><expr><name>time_entry_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>total</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_total</name> <operator>=</operator> <call><name>profile_add</name><argument_list>(<argument><expr><name>total_total</name></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>match</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>match</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_count</name> <operator>+=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>slowest</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>slowest</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm</name> <init>= <expr><call><name>profile_divide</name><argument_list>(<argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>total</name></name></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>average</name></name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>syn_compare_syntime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">" TOTAL COUNT MATCH SLOWEST AVERAGE NAME PATTERN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>time_entry_T</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slowest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>average</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">70</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><name>total_total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name>total_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>highlight_init_both</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Conceal "</literal>

<literal type="string">"ctermbg=DarkGrey ctermfg=LightGrey guibg=DarkGrey guifg=LightGrey"</literal></expr>,

<expr><literal type="string">"Cursor guibg=fg guifg=bg"</literal></expr>,

<expr><literal type="string">"lCursor guibg=fg guifg=bg"</literal></expr>,

<expr><literal type="string">"DiffText cterm=bold ctermbg=Red gui=bold guibg=Red"</literal></expr>,

<expr><literal type="string">"ErrorMsg ctermbg=DarkRed ctermfg=White guibg=Red guifg=White"</literal></expr>,

<expr><literal type="string">"IncSearch cterm=reverse gui=reverse"</literal></expr>,

<expr><literal type="string">"ModeMsg cterm=bold gui=bold"</literal></expr>,

<expr><literal type="string">"NonText ctermfg=Blue gui=bold guifg=Blue"</literal></expr>,

<expr><literal type="string">"Normal cterm=NONE gui=NONE"</literal></expr>,

<expr><literal type="string">"PmenuSbar ctermbg=Grey guibg=Grey"</literal></expr>,

<expr><literal type="string">"StatusLine cterm=reverse,bold gui=reverse,bold"</literal></expr>,

<expr><literal type="string">"StatusLineNC cterm=reverse gui=reverse"</literal></expr>,

<expr><literal type="string">"TabLineFill cterm=reverse gui=reverse"</literal></expr>,

<expr><literal type="string">"TabLineSel cterm=bold gui=bold"</literal></expr>,

<expr><literal type="string">"TermCursor cterm=reverse gui=reverse"</literal></expr>,

<expr><literal type="string">"VertSplit cterm=reverse gui=reverse"</literal></expr>,

<expr><literal type="string">"WildMenu ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black"</literal></expr>,

<expr><literal type="string">"default link EndOfBuffer NonText"</literal></expr>,

<expr><literal type="string">"default link QuickFixLine Search"</literal></expr>,

<expr><literal type="string">"default link Substitute Search"</literal></expr>,

<expr><literal type="string">"default link Whitespace NonText"</literal></expr>,

<expr><literal type="string">"default link MsgSeparator StatusLine"</literal></expr>,

<expr><literal type="string">"default link NormalFloat Pmenu"</literal></expr>,

<expr><literal type="string">"RedrawDebugNormal cterm=reverse gui=reverse"</literal></expr>,

<expr><literal type="string">"RedrawDebugClear ctermbg=Yellow guibg=Yellow"</literal></expr>,

<expr><literal type="string">"RedrawDebugComposed ctermbg=Green guibg=Green"</literal></expr>,

<expr><literal type="string">"RedrawDebugRecompose ctermbg=Red guibg=Red"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>highlight_init_light</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ColorColumn ctermbg=LightRed guibg=LightRed"</literal></expr>,

<expr><literal type="string">"CursorColumn ctermbg=LightGrey guibg=Grey90"</literal></expr>,

<expr><literal type="string">"CursorLine cterm=underline guibg=Grey90"</literal></expr>,

<expr><literal type="string">"CursorLineNr ctermfg=Brown gui=bold guifg=Brown"</literal></expr>,

<expr><literal type="string">"DiffAdd ctermbg=LightBlue guibg=LightBlue"</literal></expr>,

<expr><literal type="string">"DiffChange ctermbg=LightMagenta guibg=LightMagenta"</literal></expr>,

<expr><literal type="string">"DiffDelete ctermfg=Blue ctermbg=LightCyan gui=bold guifg=Blue guibg=LightCyan"</literal></expr>,

<expr><literal type="string">"Directory ctermfg=DarkBlue guifg=Blue"</literal></expr>,

<expr><literal type="string">"FoldColumn ctermbg=Grey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue"</literal></expr>,

<expr><literal type="string">"Folded ctermbg=Grey ctermfg=DarkBlue guibg=LightGrey guifg=DarkBlue"</literal></expr>,

<expr><literal type="string">"LineNr ctermfg=Brown guifg=Brown"</literal></expr>,

<expr><literal type="string">"MatchParen ctermbg=Cyan guibg=Cyan"</literal></expr>,

<expr><literal type="string">"MoreMsg ctermfg=DarkGreen gui=bold guifg=SeaGreen"</literal></expr>,

<expr><literal type="string">"Pmenu ctermbg=LightMagenta ctermfg=Black guibg=LightMagenta"</literal></expr>,

<expr><literal type="string">"PmenuSel ctermbg=LightGrey ctermfg=Black guibg=Grey"</literal></expr>,

<expr><literal type="string">"PmenuThumb ctermbg=Black guibg=Black"</literal></expr>,

<expr><literal type="string">"Question ctermfg=DarkGreen gui=bold guifg=SeaGreen"</literal></expr>,

<expr><literal type="string">"Search ctermbg=Yellow ctermfg=NONE guibg=Yellow guifg=NONE"</literal></expr>,

<expr><literal type="string">"SignColumn ctermbg=Grey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue"</literal></expr>,

<expr><literal type="string">"SpecialKey ctermfg=DarkBlue guifg=Blue"</literal></expr>,

<expr><literal type="string">"SpellBad ctermbg=LightRed guisp=Red gui=undercurl"</literal></expr>,

<expr><literal type="string">"SpellCap ctermbg=LightBlue guisp=Blue gui=undercurl"</literal></expr>,

<expr><literal type="string">"SpellLocal ctermbg=Cyan guisp=DarkCyan gui=undercurl"</literal></expr>,

<expr><literal type="string">"SpellRare ctermbg=LightMagenta guisp=Magenta gui=undercurl"</literal></expr>,

<expr><literal type="string">"TabLine cterm=underline ctermfg=black ctermbg=LightGrey gui=underline guibg=LightGrey"</literal></expr>,

<expr><literal type="string">"Title ctermfg=DarkMagenta gui=bold guifg=Magenta"</literal></expr>,

<expr><literal type="string">"Visual guibg=LightGrey"</literal></expr>,

<expr><literal type="string">"WarningMsg ctermfg=DarkRed guifg=Red"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>highlight_init_dark</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ColorColumn ctermbg=DarkRed guibg=DarkRed"</literal></expr>,

<expr><literal type="string">"CursorColumn ctermbg=DarkGrey guibg=Grey40"</literal></expr>,

<expr><literal type="string">"CursorLine cterm=underline guibg=Grey40"</literal></expr>,

<expr><literal type="string">"CursorLineNr ctermfg=Yellow gui=bold guifg=Yellow"</literal></expr>,

<expr><literal type="string">"DiffAdd ctermbg=DarkBlue guibg=DarkBlue"</literal></expr>,

<expr><literal type="string">"DiffChange ctermbg=DarkMagenta guibg=DarkMagenta"</literal></expr>,

<expr><literal type="string">"DiffDelete ctermfg=Blue ctermbg=DarkCyan gui=bold guifg=Blue guibg=DarkCyan"</literal></expr>,

<expr><literal type="string">"Directory ctermfg=LightCyan guifg=Cyan"</literal></expr>,

<expr><literal type="string">"FoldColumn ctermbg=DarkGrey ctermfg=Cyan guibg=Grey guifg=Cyan"</literal></expr>,

<expr><literal type="string">"Folded ctermbg=DarkGrey ctermfg=Cyan guibg=DarkGrey guifg=Cyan"</literal></expr>,

<expr><literal type="string">"LineNr ctermfg=Yellow guifg=Yellow"</literal></expr>,

<expr><literal type="string">"MatchParen ctermbg=DarkCyan guibg=DarkCyan"</literal></expr>,

<expr><literal type="string">"MoreMsg ctermfg=LightGreen gui=bold guifg=SeaGreen"</literal></expr>,

<expr><literal type="string">"Pmenu ctermbg=Magenta ctermfg=Black guibg=Magenta"</literal></expr>,

<expr><literal type="string">"PmenuSel ctermbg=Black ctermfg=DarkGrey guibg=DarkGrey"</literal></expr>,

<expr><literal type="string">"PmenuThumb ctermbg=White guibg=White"</literal></expr>,

<expr><literal type="string">"Question ctermfg=LightGreen gui=bold guifg=Green"</literal></expr>,

<expr><literal type="string">"Search ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black"</literal></expr>,

<expr><literal type="string">"SignColumn ctermbg=DarkGrey ctermfg=Cyan guibg=Grey guifg=Cyan"</literal></expr>,

<expr><literal type="string">"SpecialKey ctermfg=LightBlue guifg=Cyan"</literal></expr>,

<expr><literal type="string">"SpellBad ctermbg=Red guisp=Red gui=undercurl"</literal></expr>,

<expr><literal type="string">"SpellCap ctermbg=Blue guisp=Blue gui=undercurl"</literal></expr>,

<expr><literal type="string">"SpellLocal ctermbg=Cyan guisp=Cyan gui=undercurl"</literal></expr>,

<expr><literal type="string">"SpellRare ctermbg=Magenta guisp=Magenta gui=undercurl"</literal></expr>,

<expr><literal type="string">"TabLine cterm=underline ctermfg=white ctermbg=DarkGrey gui=underline guibg=DarkGrey"</literal></expr>,

<expr><literal type="string">"Title ctermfg=LightMagenta gui=bold guifg=Magenta"</literal></expr>,

<expr><literal type="string">"Visual guibg=DarkGrey"</literal></expr>,

<expr><literal type="string">"WarningMsg ctermfg=LightRed guifg=Red"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>highlight_init_cmdline</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"NvimInternalError ctermfg=Red ctermbg=Red guifg=Red guibg=Red"</literal></expr>,

<expr><literal type="string">"default link NvimAssignment Operator"</literal></expr>,

<expr><literal type="string">"default link NvimPlainAssignment NvimAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimAugmentedAssignment NvimAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimAssignmentWithAddition NvimAugmentedAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimAssignmentWithSubtraction NvimAugmentedAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimAssignmentWithConcatenation NvimAugmentedAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimOperator Operator"</literal></expr>,

<expr><literal type="string">"default link NvimUnaryOperator NvimOperator"</literal></expr>,

<expr><literal type="string">"default link NvimUnaryPlus NvimUnaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimUnaryMinus NvimUnaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimNot NvimUnaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimBinaryOperator NvimOperator"</literal></expr>,

<expr><literal type="string">"default link NvimComparison NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimComparisonModifier NvimComparison"</literal></expr>,

<expr><literal type="string">"default link NvimBinaryPlus NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimBinaryMinus NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimConcat NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimConcatOrSubscript NvimConcat"</literal></expr>,

<expr><literal type="string">"default link NvimOr NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimAnd NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimMultiplication NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimDivision NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimMod NvimBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimTernary NvimOperator"</literal></expr>,

<expr><literal type="string">"default link NvimTernaryColon NvimTernary"</literal></expr>,

<expr><literal type="string">"default link NvimParenthesis Delimiter"</literal></expr>,

<expr><literal type="string">"default link NvimLambda NvimParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimNestingParenthesis NvimParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimCallingParenthesis NvimParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimSubscript NvimParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimSubscriptBracket NvimSubscript"</literal></expr>,

<expr><literal type="string">"default link NvimSubscriptColon NvimSubscript"</literal></expr>,

<expr><literal type="string">"default link NvimCurly NvimSubscript"</literal></expr>,

<expr><literal type="string">"default link NvimContainer NvimParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimDict NvimContainer"</literal></expr>,

<expr><literal type="string">"default link NvimList NvimContainer"</literal></expr>,

<expr><literal type="string">"default link NvimIdentifier Identifier"</literal></expr>,

<expr><literal type="string">"default link NvimIdentifierScope NvimIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimIdentifierScopeDelimiter NvimIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimIdentifierName NvimIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimIdentifierKey NvimIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimColon Delimiter"</literal></expr>,

<expr><literal type="string">"default link NvimComma Delimiter"</literal></expr>,

<expr><literal type="string">"default link NvimArrow Delimiter"</literal></expr>,

<expr><literal type="string">"default link NvimRegister SpecialChar"</literal></expr>,

<expr><literal type="string">"default link NvimNumber Number"</literal></expr>,

<expr><literal type="string">"default link NvimFloat NvimNumber"</literal></expr>,

<expr><literal type="string">"default link NvimNumberPrefix Type"</literal></expr>,

<expr><literal type="string">"default link NvimOptionSigil Type"</literal></expr>,

<expr><literal type="string">"default link NvimOptionName NvimIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimOptionScope NvimIdentifierScope"</literal></expr>,

<expr><literal type="string">"default link NvimOptionScopeDelimiter NvimIdentifierScopeDelimiter"</literal></expr>,

<expr><literal type="string">"default link NvimEnvironmentSigil NvimOptionSigil"</literal></expr>,

<expr><literal type="string">"default link NvimEnvironmentName NvimIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimString String"</literal></expr>,

<expr><literal type="string">"default link NvimStringBody NvimString"</literal></expr>,

<expr><literal type="string">"default link NvimStringQuote NvimString"</literal></expr>,

<expr><literal type="string">"default link NvimStringSpecial SpecialChar"</literal></expr>,

<expr><literal type="string">"default link NvimSingleQuote NvimStringQuote"</literal></expr>,

<expr><literal type="string">"default link NvimSingleQuotedBody NvimStringBody"</literal></expr>,

<expr><literal type="string">"default link NvimSingleQuotedQuote NvimStringSpecial"</literal></expr>,

<expr><literal type="string">"default link NvimDoubleQuote NvimStringQuote"</literal></expr>,

<expr><literal type="string">"default link NvimDoubleQuotedBody NvimStringBody"</literal></expr>,

<expr><literal type="string">"default link NvimDoubleQuotedEscape NvimStringSpecial"</literal></expr>,

<expr><literal type="string">"default link NvimFigureBrace NvimInternalError"</literal></expr>,

<expr><literal type="string">"default link NvimSingleQuotedUnknownEscape NvimInternalError"</literal></expr>,

<expr><literal type="string">"default link NvimSpacing Normal"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidSingleQuotedUnknownEscape NvimInternalError"</literal></expr>,

<expr><literal type="string">"default link NvimInvalid Error"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidAssignment NvimInvalid"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidPlainAssignment NvimInvalidAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidAugmentedAssignment NvimInvalidAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidAssignmentWithAddition "</literal>

<literal type="string">"NvimInvalidAugmentedAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidAssignmentWithSubtraction "</literal>

<literal type="string">"NvimInvalidAugmentedAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidAssignmentWithConcatenation "</literal>

<literal type="string">"NvimInvalidAugmentedAssignment"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidOperator NvimInvalid"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidUnaryOperator NvimInvalidOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidUnaryPlus NvimInvalidUnaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidUnaryMinus NvimInvalidUnaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidNot NvimInvalidUnaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidBinaryOperator NvimInvalidOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidComparison NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidComparisonModifier NvimInvalidComparison"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidBinaryPlus NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidBinaryMinus NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidConcat NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidConcatOrSubscript NvimInvalidConcat"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidOr NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidAnd NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidMultiplication NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidDivision NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidMod NvimInvalidBinaryOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidTernary NvimInvalidOperator"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidTernaryColon NvimInvalidTernary"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidDelimiter NvimInvalid"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidParenthesis NvimInvalidDelimiter"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidLambda NvimInvalidParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidNestingParenthesis NvimInvalidParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidCallingParenthesis NvimInvalidParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidSubscript NvimInvalidParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidSubscriptBracket NvimInvalidSubscript"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidSubscriptColon NvimInvalidSubscript"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidCurly NvimInvalidSubscript"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidContainer NvimInvalidParenthesis"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidDict NvimInvalidContainer"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidList NvimInvalidContainer"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidValue NvimInvalid"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidIdentifier NvimInvalidValue"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidIdentifierScope NvimInvalidIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidIdentifierScopeDelimiter NvimInvalidIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidIdentifierName NvimInvalidIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidIdentifierKey NvimInvalidIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidColon NvimInvalidDelimiter"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidComma NvimInvalidDelimiter"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidArrow NvimInvalidDelimiter"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidRegister NvimInvalidValue"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidNumber NvimInvalidValue"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidFloat NvimInvalidNumber"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidNumberPrefix NvimInvalidNumber"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidOptionSigil NvimInvalidIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidOptionName NvimInvalidIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidOptionScope NvimInvalidIdentifierScope"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidOptionScopeDelimiter "</literal>

<literal type="string">"NvimInvalidIdentifierScopeDelimiter"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidEnvironmentSigil NvimInvalidOptionSigil"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidEnvironmentName NvimInvalidIdentifier"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidString NvimInvalidValue"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidStringBody NvimStringBody"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidStringQuote NvimInvalidString"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidStringSpecial NvimStringSpecial"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidSingleQuote NvimInvalidStringQuote"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidSingleQuotedBody NvimInvalidStringBody"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidSingleQuotedQuote NvimInvalidStringSpecial"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidDoubleQuote NvimInvalidStringQuote"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidDoubleQuotedBody NvimInvalidStringBody"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidDoubleQuotedEscape NvimInvalidStringSpecial"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidDoubleQuotedUnknownEscape NvimInvalidValue"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidFigureBrace NvimInvalidDelimiter"</literal></expr>,

<expr><literal type="string">"default link NvimInvalidSpacing ErrorMsg"</literal></expr>,

<expr><literal type="string">"default link NvimDoubleQuotedUnknownEscape NvimInvalidValue"</literal></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>syn_init_cmdline_highlight</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>reset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name><name>highlight_init_cmdline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><name><name>highlight_init_cmdline</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_highlight</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>both</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>had_both</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_var_value</name><argument_list>(<argument><expr><literal type="string">"g:colors_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>copy_p</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>okay</name> <init>= <expr><call><name>load_colors</name><argument_list>(<argument><expr><name>copy_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>copy_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>okay</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>had_both</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>pp</name> <init>= <expr><name>highlight_init_both</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>had_both</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>pp</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal><operator>)</operator></expr>

?</condition><then> <expr><name>highlight_init_light</name></expr>

</then><else>: <expr><name>highlight_init_dark</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_highlight</name><argument_list>(

<argument><expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal></expr>

?</condition><then> <expr><literal type="string">"Visual cterm=NONE ctermbg=LightGrey"</literal></expr>

</then><else>: <expr><literal type="string">"Visual cterm=NONE ctermbg=DarkGrey"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><literal type="string">"Visual cterm=reverse ctermbg=NONE"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><literal type="string">"Search ctermfg=black"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_var_value</name><argument_list>(<argument><expr><literal type="string">"g:syntax_on"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recursive</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E679: recursive loop loading syncolor.vim"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>recursive</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>source_runtime</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"syntax/syncolor.vim"</literal></expr></argument>, <argument><expr><name>DIP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recursive</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>syn_init_cmdline_highlight</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>load_colors</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_COLORSCHEMEPRE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"colors/%s.vim"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>source_runtime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>DIP_START</name> <operator>+</operator> <name>DIP_OPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_COLORSCHEME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>color_names</name><index>[<expr><literal type="number">28</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{

<expr><literal type="string">"Black"</literal></expr>, <expr><literal type="string">"DarkBlue"</literal></expr>, <expr><literal type="string">"DarkGreen"</literal></expr>, <expr><literal type="string">"DarkCyan"</literal></expr>,

<expr><literal type="string">"DarkRed"</literal></expr>, <expr><literal type="string">"DarkMagenta"</literal></expr>, <expr><literal type="string">"Brown"</literal></expr>, <expr><literal type="string">"DarkYellow"</literal></expr>,

<expr><literal type="string">"Gray"</literal></expr>, <expr><literal type="string">"Grey"</literal></expr>, <expr><literal type="string">"LightGray"</literal></expr>, <expr><literal type="string">"LightGrey"</literal></expr>,

<expr><literal type="string">"DarkGray"</literal></expr>, <expr><literal type="string">"DarkGrey"</literal></expr>,

<expr><literal type="string">"Blue"</literal></expr>, <expr><literal type="string">"LightBlue"</literal></expr>, <expr><literal type="string">"Green"</literal></expr>, <expr><literal type="string">"LightGreen"</literal></expr>,

<expr><literal type="string">"Cyan"</literal></expr>, <expr><literal type="string">"LightCyan"</literal></expr>, <expr><literal type="string">"Red"</literal></expr>, <expr><literal type="string">"LightRed"</literal></expr>, <expr><literal type="string">"Magenta"</literal></expr>,

<expr><literal type="string">"LightMagenta"</literal></expr>, <expr><literal type="string">"Yellow"</literal></expr>, <expr><literal type="string">"LightYellow"</literal></expr>, <expr><literal type="string">"White"</literal></expr>, <expr><literal type="string">"NONE"</literal></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>color_numbers_16</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>color_numbers_88</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">72</literal></expr>,

<expr><literal type="number">84</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">82</literal></expr>, <expr><literal type="number">82</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">61</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">13</literal></expr>,

<expr><literal type="number">75</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>color_numbers_256</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">130</literal></expr>,

<expr><literal type="number">248</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">242</literal></expr>, <expr><literal type="number">242</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">121</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">13</literal></expr>,

<expr><literal type="number">225</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>color_numbers_8</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">0</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">8</literal></expr>,

<expr><literal type="number">4</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>,

<expr><literal type="number">6</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal><operator>+</operator><literal type="number">8</literal></expr>,

<expr><literal type="number">5</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>lookup_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>foreground</name></decl></parameter>, <parameter><decl><type><name>TriState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>boldp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><name><name>color_numbers_16</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_8</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>foreground</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>boldp</name> <operator>=</operator> <name>kTrue</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>boldp</name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>&amp;=</operator> <literal type="number">7</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t_colors</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_8</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t_colors</name> <operator>==</operator> <literal type="number">88</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_88</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t_colors</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_256</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>color</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_highlight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>forceit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>init</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hl_group</name></name></type> <name>item_before</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_change</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dodefault</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>doclear</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dolink</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_normal_group</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>did_highlight_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>highlight_list_one</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name_end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>name_end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dodefault</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>linep</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name_end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><name>name_end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>doclear</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>, <argument><expr><name>name_end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dolink</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doclear</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dolink</name> <operator>&amp;&amp;</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>linep</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_namen2id</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>name_end</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E411: highlight group not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>highlight_list_one</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dolink</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from_start</name> <init>= <expr><name>linep</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>from_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>to_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>from_end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>from_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to_start</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>from_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to_end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>to_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>from_start</name><operator>)</operator></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>to_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E412: Not enough arguments: \":highlight link %s\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>from_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>to_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E413: Too many arguments: \":highlight link %s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>from_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>from_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>from_start</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>from_end</name> <operator>-</operator> <name>from_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>to_start</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>to_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>to_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>to_start</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>to_end</name> <operator>-</operator> <name>to_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from_id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>init</name> <operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_set</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>to_id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>forceit</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>init</name>

<operator>&amp;&amp;</operator> <call><name>hl_has_settings</name><argument_list>(<argument><expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dodefault</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dodefault</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E414: group has settings, highlight link ignored"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_link</name> <operator>!=</operator> <name>to_id</name>

<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_sid</name></name>

<operator>!=</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name>

<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cleared</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_LINK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_link</name> <operator>=</operator> <name>to_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_script_ctx</name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cleared</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_highlight_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>doclear</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>linep</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"colors_name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_cterm_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>highlight_clear</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name_end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>name_end</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>dodefault</name> <operator>&amp;&amp;</operator> <call><name>hl_has_settings</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item_before</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>is_normal_group</name> <operator>=</operator> <operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>, <argument><expr><literal type="string">"NORMAL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>doclear</name> <operator>||</operator> <operator>(</operator><name>forceit</name> <operator>&amp;&amp;</operator> <name>init</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>highlight_clear</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doclear</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doclear</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>linep</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key_start</name> <operator>=</operator> <name>linep</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>linep</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E415: unexpected equal sign: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>linep</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>linep</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>linep</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strnsave_up</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>key_start</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>linep</name> <operator>-</operator> <name>key_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_CTERM</name><operator>+</operator><name>SG_GUI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>highlight_clear</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>linep</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E416: missing equal sign: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>linep</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>arg_start</name> <operator>=</operator> <operator>++</operator><name>linep</name></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>linep</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>arg_start</name> <operator>=</operator> <name>linep</name></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>linep</name> <operator>==</operator> <name>arg_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E417: missing argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>arg_start</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>linep</name> <operator>-</operator> <name>arg_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>linep</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CTERM"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GUI"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>arg</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>hl_attr_table</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>hl_name_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>hl_name_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name><name>hl_attr_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E418: Illegal value: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_CTERM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_CTERM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <literal type="char">'G'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_GUI</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_GUI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"FONT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CTERMFG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CTERMBG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_CTERM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_CTERM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>&amp;=</operator> <operator>~</operator><name>HL_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"fg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name>cterm_normal_fg_color</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E419: FG color unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"bg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_bg_color</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name>cterm_normal_bg_color</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E420: BG color unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>color_names</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <name><name>color_names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>color_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E421: Color name or number not recognized: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TriState</name></type> <name>bold</name> <init>= <expr><name>kNone</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>lookup_color</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bold</name> <operator>==</operator> <name>kTrue</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>|=</operator> <name>HL_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bold</name> <operator>==</operator> <name>kFalse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>&amp;=</operator> <operator>~</operator><name>HL_BOLD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_fg</name> <operator>=</operator> <name>color</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_normal_group</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cterm_normal_fg_color</name> <operator>=</operator> <name>color</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bg</name> <operator>=</operator> <name>color</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_normal_group</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cterm_normal_bg_color</name> <operator>=</operator> <name>color</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_rgb_attached</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dark</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dark</name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>color</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dark</name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>||</operator> <name>color</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dark</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>dark</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><literal type="string">"bg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"bg"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>dark</name></expr> ?</condition><then> <expr><literal type="string">"dark"</literal></expr> </then><else>: <expr><literal type="string">"light"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_option_was_set</name><argument_list>(<argument><expr><literal type="string">"bg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GUIFG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>namep</name> <init>= <expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_fg_name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_GUI</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_GUI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>namep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xstrdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_fg</name> <operator>=</operator> <call><name>name_to_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_fg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_normal_group</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>normal_fg</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_fg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GUIBG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>namep</name> <init>= <expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_bg_name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_GUI</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_GUI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>namep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xstrdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_bg</name> <operator>=</operator> <call><name>name_to_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_bg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_normal_group</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>normal_bg</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_bg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GUISP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>namep</name> <init>= <expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_sp_name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_GUI</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_GUI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>namep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xstrdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_sp</name> <operator>=</operator> <call><name>name_to_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_sp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_normal_group</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>normal_sp</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_sp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"START"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"STOP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"BLEND"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_blend</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_blend</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E423: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cleared</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_LINK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>linep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>syn_unadd_group</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>is_normal_group</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>highlight_attr_set_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUILinegrid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>starting</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ui_default_colors_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>did_highlight_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_hl_attr</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_script_ctx</name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>did_change</name>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><operator>&amp;</operator><name>item_before</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item_before</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>did_highlight_changed</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>updating_screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_highlight_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>free_highlight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>highlight_clear</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>highlight_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>restore_cterm_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>normal_fg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>normal_bg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>normal_sp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cterm_normal_fg_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cterm_normal_bg_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hl_has_settings</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_link</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_attr</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_fg</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bg</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_fg_name</name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_bg_name</name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_sp_name</name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name>check_link</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_LINK</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>highlight_clear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cleared</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_fg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_fg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_bg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_sp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_fg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_bg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_rgb_sp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_blend</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_link</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_ATTR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_STRING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_INT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>highlight_list_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hl_group</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>sgp</name> <init>= <expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>didh</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_ATTR</name></expr></argument>,

<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cterm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_INT</name></expr></argument>,

<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_fg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ctermfg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_INT</name></expr></argument>,

<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_bg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ctermbg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_ATTR</name></expr></argument>,

<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"gui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_fg_name</name></name></expr></argument>, <argument><expr><literal type="string">"guifg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_bg_name</name></name></expr></argument>, <argument><expr><literal type="string">"guibg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_sp_name</name></name></expr></argument>, <argument><expr><literal type="string">"guisp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_INT</name></expr></argument>,

<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_blend</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"blend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_link</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_list_header</name><argument_list>(<argument><expr><name>didh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"links to"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_link</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>didh</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cleared"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_script_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>highlight_list_arg</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>didh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iarg</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>sarg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>LIST_STRING</name></expr> ?</condition><then> <expr><operator>(</operator><name>sarg</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>iarg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LIST_INT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>iarg</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>LIST_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <name>sarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>hl_attr_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iarg</name> <operator>&amp;</operator> <name><name>hl_attr_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name><name>hl_name_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iarg</name> <operator>&amp;=</operator> <operator>~</operator><name><name>hl_attr_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_list_header</name><argument_list>(<argument><expr><name>didh</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>vim_strsize</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>id</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>didh</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>highlight_has_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>modec</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cterm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>flag</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>highlight_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>what</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>modec</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>sp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>font</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'o'</literal>

<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'b'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>what</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <call><name>ui_rgb_attached</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_rgb_fg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_rgb_sp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_rgb_bg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xffffff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#%06x"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_rgb_fg_name</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_rgb_sp_name</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_rgb_bg_name</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>||</operator> <name>sp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cterm_fg</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cterm_bg</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>syn_list_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>did_header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>outlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_newline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>endcol</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>newline</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>adjust</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>msg_silent</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_newline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>adjust</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msg_col</name> <operator>+</operator> <name>outlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>Columns</name> <operator>||</operator> <name>force_newline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>endcol</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>adjust</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>endcol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>msg_col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>newline</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_hl_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HlAttrs</name></type> <name>at_en</name> <init>= <expr><name>HLATTRS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hl_group</name></name> <modifier>*</modifier></type><name>sgp</name> <init>= <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>cterm_ae_attr</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_fg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_bg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_fg_name</name></name></expr> ?</condition><then> <expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_fg</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_bg_name</name></name></expr> ?</condition><then> <expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_bg</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_sp_name</name></name></expr> ?</condition><then> <expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_sp</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>hl_blend</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_blend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_attr</name></name> <operator>=</operator> <call><name>hl_get_syn_attr</name><argument_list>(<argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>at_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cursor_mode_uses_syn_id</name><argument_list>(<argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_mode_info_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_name2id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name_u</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strup</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name_u</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>, <argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_name2attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>highlight_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>syn_id2name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_namen2id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>linep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_check_group</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_add_group</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>syn_add_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E669: Unprintable character in group name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_source</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"W18: Invalid character in group name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>highlight_ga</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>hl_group</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_set_growsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>highlight_ga</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;=</operator> <name>MAX_HL_ID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E849: Too many highlight and syntax groups"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hl_group</name></name><modifier>*</modifier></type> <name>hlgp</name> <init>= <expr><call><name>GA_APPEND_VIA_PTR</name><argument_list>(<argument><expr>struct <name>hl_group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>highlight_ga</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hlgp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hlgp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlgp</name><operator>-&gt;</operator><name>sg_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlgp</name><operator>-&gt;</operator><name>sg_rgb_bg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlgp</name><operator>-&gt;</operator><name>sg_rgb_fg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlgp</name><operator>-&gt;</operator><name>sg_rgb_sp</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlgp</name><operator>-&gt;</operator><name>sg_blend</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlgp</name><operator>-&gt;</operator><name>sg_name_u</name></name> <operator>=</operator> <call><name>vim_strsave_up</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syn_unadd_group</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_id2attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hl_group</name></name> <modifier>*</modifier></type><name>sgp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hl_id</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sgp</name> <operator>=</operator> <operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hl_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 

<return>return <expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_attr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>syn_get_final_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hl_group</name></name> <modifier>*</modifier></type><name>sgp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hl_id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>||</operator> <name>hl_id</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">100</literal></expr>;</init> <condition><expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>sgp</name> <operator>=</operator> <operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hl_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_link</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_link</name></name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hl_id</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_link</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>hl_id</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>highlight_attr_set_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hl_group</name></name> <modifier>*</modifier></type><name>sgp</name> <init>= <expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_bg_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_bg</name></name> <operator>=</operator> <call><name>name_to_color</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_bg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_fg_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_fg</name></name> <operator>=</operator> <call><name>name_to_color</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_fg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_sp_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_sp</name></name> <operator>=</operator> <call><name>name_to_color</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_rgb_sp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_hl_attr</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>combine_stl_hlt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id_S</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id_alt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hlcnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hlf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hl_group</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>hlt</name> <init>= <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id_alt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hl_group</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_cterm</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_gui</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hlt</name><index>[<expr><name>id_alt</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hl_group</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_cterm</name> <operator>^=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm</name> <operator>^</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_fg</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_fg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_cterm_fg</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_fg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_bg</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_bg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_cterm_bg</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_bg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_gui</name> <operator>^=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui</name> <operator>^</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_fg</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_fg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_rgb_fg</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_fg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_bg</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_bg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_rgb_bg</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_bg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_sp</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_sp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_rgb_sp</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_rgb_sp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>hlcnt</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_hl_attr</name><argument_list>(<argument><expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name>hlcnt</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>highlight_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>userhl</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>id_S</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id_SNC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hlcnt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>need_highlight_changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>hlf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>hlf</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_COUNT</name></expr>;</condition> <incr><expr><name>hlf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>hlf_names</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>hlf_names</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>final_id</name> <init>= <expr><call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hlf</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_SNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id_SNC</name> <operator>=</operator> <name>final_id</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hlf</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_S</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id_S</name> <operator>=</operator> <name>final_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>=</operator> <call><name>hl_get_ui_attr</name><argument_list>(<argument><expr><name>hlf</name></expr></argument>, <argument><expr><name>final_id</name></expr></argument>,

<argument><expr><name>hlf</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>!=</operator> <name><name>highlight_attr_last</name><index>[<expr><name>hlf</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hlf</name> <operator>==</operator> <name>HLF_MSG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_call_hl_group_set</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>hlf_names</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>highlight_attr_last</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>highlight_ga</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hlcnt</name> <operator>=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id_S</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hlcnt</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hl_group</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_S</name> <operator>=</operator> <name>hlcnt</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>userhl</name></expr></argument>, <argument><expr><literal type="string">"User%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name>userhl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>highlight_user</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>highlight_stlnc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>highlight_user</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>combine_stl_hlt</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>id_S</name></expr></argument>, <argument><expr><name>id_SNC</name></expr></argument>, <argument><expr><name>hlcnt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>HLF_SNC</name></expr></argument>, <argument><expr><name>highlight_stlnc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>hlcnt</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_context_in_highlight_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_HIGHLIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>include_link</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>include_default</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>include_default</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>include_link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>highlight_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>highlight_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">10</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>highlight_list_two</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">40</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>highlight_list_two</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>highlight_list_two</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><literal type="string">"N \bI \b! \b"</literal><index>[<expr><name>cnt</name> <operator>/</operator> <literal type="number">11</literal></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_delay</name><argument_list>(<argument><expr><ternary><condition><expr><name>cnt</name> <operator>==</operator> <literal type="number">99</literal></expr> ?</condition><then> <expr><literal type="number">40L</literal></expr> </then><else>: <expr><operator>(</operator><name>long</name><operator>)</operator><name>cnt</name> <operator>*</operator> <literal type="number">50L</literal></expr></else></ternary></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_highlight_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><call><name>get_highlight_name_ext</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_highlight_name_ext</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip_cleared</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_cleared</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cleared</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <name>include_none</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"none"</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>include_none</name>

<operator>&amp;&amp;</operator> <name>include_default</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"default"</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>include_none</name> <operator>+</operator> <name>include_default</name>

<operator>&amp;&amp;</operator> <name>include_link</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"link"</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>include_none</name> <operator>+</operator> <name>include_default</name> <operator>+</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>include_link</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"clear"</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_name</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>color_name_table_T</name></type> <name><name>color_name_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"AliceBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xf8</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"AntiqueWhite"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xeb</literal></argument>, <argument><literal type="number">0xd7</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"AntiqueWhite1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xef</literal></argument>, <argument><literal type="number">0xdb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"AntiqueWhite2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xdf</literal></argument>, <argument><literal type="number">0xcc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"AntiqueWhite3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc0</literal></argument>, <argument><literal type="number">0xb0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"AntiqueWhite4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x83</literal></argument>, <argument><literal type="number">0x78</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Aqua"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Aquamarine"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xd4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Aquamarine1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xd4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Aquamarine2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x76</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xc6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Aquamarine3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xaa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Aquamarine4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x74</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Azure"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Azure1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Azure2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Azure3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc1</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Azure4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x83</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Beige"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xdc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bisque"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe4</literal></argument>, <argument><literal type="number">0xc4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bisque1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe4</literal></argument>, <argument><literal type="number">0xc4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bisque2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xd5</literal></argument>, <argument><literal type="number">0xb7</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bisque3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xb7</literal></argument>, <argument><literal type="number">0x9e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bisque4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x7d</literal></argument>, <argument><literal type="number">0x6b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Black"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"BlanchedAlmond"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xeb</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Blue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Blue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Blue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Blue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Blue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"BlueViolet"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8a</literal></argument>, <argument><literal type="number">0x2b</literal></argument>, <argument><literal type="number">0xe2</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Brown"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa5</literal></argument>, <argument><literal type="number">0x2a</literal></argument>, <argument><literal type="number">0x2a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Brown1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x40</literal></argument>, <argument><literal type="number">0x40</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Brown2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x3b</literal></argument>, <argument><literal type="number">0x3b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Brown3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x33</literal></argument>, <argument><literal type="number">0x33</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Brown4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x23</literal></argument>, <argument><literal type="number">0x23</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"BurlyWood"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xde</literal></argument>, <argument><literal type="number">0xb8</literal></argument>, <argument><literal type="number">0x87</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Burlywood1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xd3</literal></argument>, <argument><literal type="number">0x9b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Burlywood2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xc5</literal></argument>, <argument><literal type="number">0x91</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Burlywood3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xaa</literal></argument>, <argument><literal type="number">0x7d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Burlywood4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x73</literal></argument>, <argument><literal type="number">0x55</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CadetBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5f</literal></argument>, <argument><literal type="number">0x9e</literal></argument>, <argument><literal type="number">0xa0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CadetBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x98</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CadetBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8e</literal></argument>, <argument><literal type="number">0xe5</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CadetBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0xc5</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CadetBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x53</literal></argument>, <argument><literal type="number">0x86</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ChartReuse"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chartreuse1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chartreuse2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x76</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chartreuse3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chartreuse4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chocolate"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd2</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x1e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chocolate1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0x24</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chocolate2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x76</literal></argument>, <argument><literal type="number">0x21</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chocolate3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x1d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chocolate4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x13</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Coral"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0x50</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Coral1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x72</literal></argument>, <argument><literal type="number">0x56</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Coral2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x6a</literal></argument>, <argument><literal type="number">0x50</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Coral3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x5b</literal></argument>, <argument><literal type="number">0x45</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Coral4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x3e</literal></argument>, <argument><literal type="number">0x2f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CornFlowerBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x64</literal></argument>, <argument><literal type="number">0x95</literal></argument>, <argument><literal type="number">0xed</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cornsilk"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf8</literal></argument>, <argument><literal type="number">0xdc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cornsilk1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf8</literal></argument>, <argument><literal type="number">0xdc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cornsilk2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe8</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cornsilk3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc8</literal></argument>, <argument><literal type="number">0xb1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cornsilk4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x88</literal></argument>, <argument><literal type="number">0x78</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Crimson"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xdc</literal></argument>, <argument><literal type="number">0x14</literal></argument>, <argument><literal type="number">0x3c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cyan"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cyan1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cyan2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cyan3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cyan4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkCyan"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGoldenRod"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb8</literal></argument>, <argument><literal type="number">0x86</literal></argument>, <argument><literal type="number">0x0b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGoldenrod1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xb9</literal></argument>, <argument><literal type="number">0xf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGoldenrod2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xad</literal></argument>, <argument><literal type="number">0xe</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGoldenrod3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x95</literal></argument>, <argument><literal type="number">0xc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGoldenrod4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x65</literal></argument>, <argument><literal type="number">0x8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa9</literal></argument>, <argument><literal type="number">0xa9</literal></argument>, <argument><literal type="number">0xa9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x64</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGrey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa9</literal></argument>, <argument><literal type="number">0xa9</literal></argument>, <argument><literal type="number">0xa9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkKhaki"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbd</literal></argument>, <argument><literal type="number">0xb7</literal></argument>, <argument><literal type="number">0x6b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkMagenta"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOliveGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x55</literal></argument>, <argument><literal type="number">0x6b</literal></argument>, <argument><literal type="number">0x2f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOliveGreen1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xca</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x70</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOliveGreen2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbc</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x68</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOliveGreen3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa2</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x5a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOliveGreen4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6e</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x3d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrange"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x8c</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrange1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrange2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x76</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrange3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrange4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrchid"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x99</literal></argument>, <argument><literal type="number">0x32</literal></argument>, <argument><literal type="number">0xcc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrchid1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0x3e</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrchid2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb2</literal></argument>, <argument><literal type="number">0x3a</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrchid3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9a</literal></argument>, <argument><literal type="number">0x32</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrchid4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x68</literal></argument>, <argument><literal type="number">0x22</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkRed"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSalmon"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe9</literal></argument>, <argument><literal type="number">0x96</literal></argument>, <argument><literal type="number">0x7a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSeaGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8f</literal></argument>, <argument><literal type="number">0xbc</literal></argument>, <argument><literal type="number">0x8f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSeaGreen1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc1</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xc1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSeaGreen2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb4</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xb4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSeaGreen3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9b</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x9b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSeaGreen4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x69</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x48</literal></argument>, <argument><literal type="number">0x3d</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateGray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x2f</literal></argument>, <argument><literal type="number">0x4f</literal></argument>, <argument><literal type="number">0x4f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateGray1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x97</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateGray2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8d</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateGray3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x79</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateGray4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x52</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateGrey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x2f</literal></argument>, <argument><literal type="number">0x4f</literal></argument>, <argument><literal type="number">0x4f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkTurquoise"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xce</literal></argument>, <argument><literal type="number">0xd1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkViolet"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x94</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xd3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkYellow"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbb</literal></argument>, <argument><literal type="number">0xbb</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepPink"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x14</literal></argument>, <argument><literal type="number">0x93</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepPink1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x14</literal></argument>, <argument><literal type="number">0x93</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepPink2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x12</literal></argument>, <argument><literal type="number">0x89</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepPink3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x10</literal></argument>, <argument><literal type="number">0x76</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepPink4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0xa</literal></argument>, <argument><literal type="number">0x50</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepSkyBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepSkyBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepSkyBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xb2</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepSkyBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x9a</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepSkyBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x68</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DimGray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DimGrey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DodgerBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1e</literal></argument>, <argument><literal type="number">0x90</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DodgerBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1e</literal></argument>, <argument><literal type="number">0x90</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DodgerBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1c</literal></argument>, <argument><literal type="number">0x86</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DodgerBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x18</literal></argument>, <argument><literal type="number">0x74</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DodgerBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x10</literal></argument>, <argument><literal type="number">0x4e</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Firebrick"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb2</literal></argument>, <argument><literal type="number">0x22</literal></argument>, <argument><literal type="number">0x22</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Firebrick1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x30</literal></argument>, <argument><literal type="number">0x30</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Firebrick2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x2c</literal></argument>, <argument><literal type="number">0x2c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Firebrick3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x26</literal></argument>, <argument><literal type="number">0x26</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Firebrick4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x1a</literal></argument>, <argument><literal type="number">0x1a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"FloralWhite"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xf0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ForestGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x22</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x22</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Fuchsia"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gainsboro"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xdc</literal></argument>, <argument><literal type="number">0xdc</literal></argument>, <argument><literal type="number">0xdc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"GhostWhite"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf8</literal></argument>, <argument><literal type="number">0xf8</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gold"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xd7</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gold1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xd7</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gold2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xc9</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gold3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xad</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gold4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x75</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"GoldenRod"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xda</literal></argument>, <argument><literal type="number">0xa5</literal></argument>, <argument><literal type="number">0x20</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Goldenrod1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xc1</literal></argument>, <argument><literal type="number">0x25</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Goldenrod2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xb4</literal></argument>, <argument><literal type="number">0x22</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Goldenrod3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x9b</literal></argument>, <argument><literal type="number">0x1d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Goldenrod4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x14</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray0"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x3</literal></argument>, <argument><literal type="number">0x3</literal></argument>, <argument><literal type="number">0x3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray10"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1a</literal></argument>, <argument><literal type="number">0x1a</literal></argument>, <argument><literal type="number">0x1a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray100"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray11"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1c</literal></argument>, <argument><literal type="number">0x1c</literal></argument>, <argument><literal type="number">0x1c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray12"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1f</literal></argument>, <argument><literal type="number">0x1f</literal></argument>, <argument><literal type="number">0x1f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray13"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x21</literal></argument>, <argument><literal type="number">0x21</literal></argument>, <argument><literal type="number">0x21</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray14"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x24</literal></argument>, <argument><literal type="number">0x24</literal></argument>, <argument><literal type="number">0x24</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray15"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x26</literal></argument>, <argument><literal type="number">0x26</literal></argument>, <argument><literal type="number">0x26</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray16"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x29</literal></argument>, <argument><literal type="number">0x29</literal></argument>, <argument><literal type="number">0x29</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray17"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x2b</literal></argument>, <argument><literal type="number">0x2b</literal></argument>, <argument><literal type="number">0x2b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray18"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x2e</literal></argument>, <argument><literal type="number">0x2e</literal></argument>, <argument><literal type="number">0x2e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray19"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x30</literal></argument>, <argument><literal type="number">0x30</literal></argument>, <argument><literal type="number">0x30</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5</literal></argument>, <argument><literal type="number">0x5</literal></argument>, <argument><literal type="number">0x5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray20"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x33</literal></argument>, <argument><literal type="number">0x33</literal></argument>, <argument><literal type="number">0x33</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray21"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x36</literal></argument>, <argument><literal type="number">0x36</literal></argument>, <argument><literal type="number">0x36</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray22"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x38</literal></argument>, <argument><literal type="number">0x38</literal></argument>, <argument><literal type="number">0x38</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray23"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x3b</literal></argument>, <argument><literal type="number">0x3b</literal></argument>, <argument><literal type="number">0x3b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray24"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x3d</literal></argument>, <argument><literal type="number">0x3d</literal></argument>, <argument><literal type="number">0x3d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray25"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x40</literal></argument>, <argument><literal type="number">0x40</literal></argument>, <argument><literal type="number">0x40</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray26"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x42</literal></argument>, <argument><literal type="number">0x42</literal></argument>, <argument><literal type="number">0x42</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray27"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x45</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray28"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x47</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray29"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4a</literal></argument>, <argument><literal type="number">0x4a</literal></argument>, <argument><literal type="number">0x4a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8</literal></argument>, <argument><literal type="number">0x8</literal></argument>, <argument><literal type="number">0x8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray30"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4d</literal></argument>, <argument><literal type="number">0x4d</literal></argument>, <argument><literal type="number">0x4d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray31"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4f</literal></argument>, <argument><literal type="number">0x4f</literal></argument>, <argument><literal type="number">0x4f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray32"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x52</literal></argument>, <argument><literal type="number">0x52</literal></argument>, <argument><literal type="number">0x52</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray33"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x54</literal></argument>, <argument><literal type="number">0x54</literal></argument>, <argument><literal type="number">0x54</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray34"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x57</literal></argument>, <argument><literal type="number">0x57</literal></argument>, <argument><literal type="number">0x57</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray35"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x59</literal></argument>, <argument><literal type="number">0x59</literal></argument>, <argument><literal type="number">0x59</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray36"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5c</literal></argument>, <argument><literal type="number">0x5c</literal></argument>, <argument><literal type="number">0x5c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray37"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5e</literal></argument>, <argument><literal type="number">0x5e</literal></argument>, <argument><literal type="number">0x5e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray38"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x61</literal></argument>, <argument><literal type="number">0x61</literal></argument>, <argument><literal type="number">0x61</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray39"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0x63</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa</literal></argument>, <argument><literal type="number">0xa</literal></argument>, <argument><literal type="number">0xa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray40"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x66</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray41"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray42"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6b</literal></argument>, <argument><literal type="number">0x6b</literal></argument>, <argument><literal type="number">0x6b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray43"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6e</literal></argument>, <argument><literal type="number">0x6e</literal></argument>, <argument><literal type="number">0x6e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray44"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x70</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray45"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x73</literal></argument>, <argument><literal type="number">0x73</literal></argument>, <argument><literal type="number">0x73</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray46"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x75</literal></argument>, <argument><literal type="number">0x75</literal></argument>, <argument><literal type="number">0x75</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray47"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x78</literal></argument>, <argument><literal type="number">0x78</literal></argument>, <argument><literal type="number">0x78</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray48"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0x7a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray49"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7d</literal></argument>, <argument><literal type="number">0x7d</literal></argument>, <argument><literal type="number">0x7d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray5"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd</literal></argument>, <argument><literal type="number">0xd</literal></argument>, <argument><literal type="number">0xd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray50"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0x7f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray51"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0x82</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray52"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x85</literal></argument>, <argument><literal type="number">0x85</literal></argument>, <argument><literal type="number">0x85</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray53"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x87</literal></argument>, <argument><literal type="number">0x87</literal></argument>, <argument><literal type="number">0x87</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray54"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8a</literal></argument>, <argument><literal type="number">0x8a</literal></argument>, <argument><literal type="number">0x8a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray55"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8c</literal></argument>, <argument><literal type="number">0x8c</literal></argument>, <argument><literal type="number">0x8c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray56"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8f</literal></argument>, <argument><literal type="number">0x8f</literal></argument>, <argument><literal type="number">0x8f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray57"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x91</literal></argument>, <argument><literal type="number">0x91</literal></argument>, <argument><literal type="number">0x91</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray58"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x94</literal></argument>, <argument><literal type="number">0x94</literal></argument>, <argument><literal type="number">0x94</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray59"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x96</literal></argument>, <argument><literal type="number">0x96</literal></argument>, <argument><literal type="number">0x96</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray6"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf</literal></argument>, <argument><literal type="number">0xf</literal></argument>, <argument><literal type="number">0xf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray60"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x99</literal></argument>, <argument><literal type="number">0x99</literal></argument>, <argument><literal type="number">0x99</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray61"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9c</literal></argument>, <argument><literal type="number">0x9c</literal></argument>, <argument><literal type="number">0x9c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray62"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9e</literal></argument>, <argument><literal type="number">0x9e</literal></argument>, <argument><literal type="number">0x9e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray63"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa1</literal></argument>, <argument><literal type="number">0xa1</literal></argument>, <argument><literal type="number">0xa1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray64"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa3</literal></argument>, <argument><literal type="number">0xa3</literal></argument>, <argument><literal type="number">0xa3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray65"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa6</literal></argument>, <argument><literal type="number">0xa6</literal></argument>, <argument><literal type="number">0xa6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray66"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa8</literal></argument>, <argument><literal type="number">0xa8</literal></argument>, <argument><literal type="number">0xa8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray67"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xab</literal></argument>, <argument><literal type="number">0xab</literal></argument>, <argument><literal type="number">0xab</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray68"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xad</literal></argument>, <argument><literal type="number">0xad</literal></argument>, <argument><literal type="number">0xad</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray69"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb0</literal></argument>, <argument><literal type="number">0xb0</literal></argument>, <argument><literal type="number">0xb0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray7"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x12</literal></argument>, <argument><literal type="number">0x12</literal></argument>, <argument><literal type="number">0x12</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray70"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb3</literal></argument>, <argument><literal type="number">0xb3</literal></argument>, <argument><literal type="number">0xb3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray71"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb5</literal></argument>, <argument><literal type="number">0xb5</literal></argument>, <argument><literal type="number">0xb5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray72"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb8</literal></argument>, <argument><literal type="number">0xb8</literal></argument>, <argument><literal type="number">0xb8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray73"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xba</literal></argument>, <argument><literal type="number">0xba</literal></argument>, <argument><literal type="number">0xba</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray74"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbd</literal></argument>, <argument><literal type="number">0xbd</literal></argument>, <argument><literal type="number">0xbd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray75"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0xbf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray76"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc2</literal></argument>, <argument><literal type="number">0xc2</literal></argument>, <argument><literal type="number">0xc2</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray77"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc4</literal></argument>, <argument><literal type="number">0xc4</literal></argument>, <argument><literal type="number">0xc4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray78"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc7</literal></argument>, <argument><literal type="number">0xc7</literal></argument>, <argument><literal type="number">0xc7</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray79"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc9</literal></argument>, <argument><literal type="number">0xc9</literal></argument>, <argument><literal type="number">0xc9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray8"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x14</literal></argument>, <argument><literal type="number">0x14</literal></argument>, <argument><literal type="number">0x14</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray80"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcc</literal></argument>, <argument><literal type="number">0xcc</literal></argument>, <argument><literal type="number">0xcc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray81"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcf</literal></argument>, <argument><literal type="number">0xcf</literal></argument>, <argument><literal type="number">0xcf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray82"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd1</literal></argument>, <argument><literal type="number">0xd1</literal></argument>, <argument><literal type="number">0xd1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray83"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd4</literal></argument>, <argument><literal type="number">0xd4</literal></argument>, <argument><literal type="number">0xd4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray84"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd6</literal></argument>, <argument><literal type="number">0xd6</literal></argument>, <argument><literal type="number">0xd6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray85"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd9</literal></argument>, <argument><literal type="number">0xd9</literal></argument>, <argument><literal type="number">0xd9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray86"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xdb</literal></argument>, <argument><literal type="number">0xdb</literal></argument>, <argument><literal type="number">0xdb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray87"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xde</literal></argument>, <argument><literal type="number">0xde</literal></argument>, <argument><literal type="number">0xde</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray88"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xe0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray89"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe3</literal></argument>, <argument><literal type="number">0xe3</literal></argument>, <argument><literal type="number">0xe3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray9"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x17</literal></argument>, <argument><literal type="number">0x17</literal></argument>, <argument><literal type="number">0x17</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray90"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe5</literal></argument>, <argument><literal type="number">0xe5</literal></argument>, <argument><literal type="number">0xe5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray91"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe8</literal></argument>, <argument><literal type="number">0xe8</literal></argument>, <argument><literal type="number">0xe8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray92"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xeb</literal></argument>, <argument><literal type="number">0xeb</literal></argument>, <argument><literal type="number">0xeb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray93"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xed</literal></argument>, <argument><literal type="number">0xed</literal></argument>, <argument><literal type="number">0xed</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray94"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xf0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray95"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf2</literal></argument>, <argument><literal type="number">0xf2</literal></argument>, <argument><literal type="number">0xf2</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray96"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xf5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray97"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf7</literal></argument>, <argument><literal type="number">0xf7</literal></argument>, <argument><literal type="number">0xf7</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray98"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xfa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray99"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfc</literal></argument>, <argument><literal type="number">0xfc</literal></argument>, <argument><literal type="number">0xfc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Green"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Green1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Green2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Green3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Green4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"GreenYellow"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xad</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x2f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey0"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x3</literal></argument>, <argument><literal type="number">0x3</literal></argument>, <argument><literal type="number">0x3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey10"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1a</literal></argument>, <argument><literal type="number">0x1a</literal></argument>, <argument><literal type="number">0x1a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey100"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey11"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1c</literal></argument>, <argument><literal type="number">0x1c</literal></argument>, <argument><literal type="number">0x1c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey12"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x1f</literal></argument>, <argument><literal type="number">0x1f</literal></argument>, <argument><literal type="number">0x1f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey13"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x21</literal></argument>, <argument><literal type="number">0x21</literal></argument>, <argument><literal type="number">0x21</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey14"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x24</literal></argument>, <argument><literal type="number">0x24</literal></argument>, <argument><literal type="number">0x24</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey15"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x26</literal></argument>, <argument><literal type="number">0x26</literal></argument>, <argument><literal type="number">0x26</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey16"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x29</literal></argument>, <argument><literal type="number">0x29</literal></argument>, <argument><literal type="number">0x29</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey17"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x2b</literal></argument>, <argument><literal type="number">0x2b</literal></argument>, <argument><literal type="number">0x2b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey18"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x2e</literal></argument>, <argument><literal type="number">0x2e</literal></argument>, <argument><literal type="number">0x2e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey19"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x30</literal></argument>, <argument><literal type="number">0x30</literal></argument>, <argument><literal type="number">0x30</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5</literal></argument>, <argument><literal type="number">0x5</literal></argument>, <argument><literal type="number">0x5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey20"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x33</literal></argument>, <argument><literal type="number">0x33</literal></argument>, <argument><literal type="number">0x33</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey21"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x36</literal></argument>, <argument><literal type="number">0x36</literal></argument>, <argument><literal type="number">0x36</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey22"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x38</literal></argument>, <argument><literal type="number">0x38</literal></argument>, <argument><literal type="number">0x38</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey23"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x3b</literal></argument>, <argument><literal type="number">0x3b</literal></argument>, <argument><literal type="number">0x3b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey24"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x3d</literal></argument>, <argument><literal type="number">0x3d</literal></argument>, <argument><literal type="number">0x3d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey25"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x40</literal></argument>, <argument><literal type="number">0x40</literal></argument>, <argument><literal type="number">0x40</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey26"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x42</literal></argument>, <argument><literal type="number">0x42</literal></argument>, <argument><literal type="number">0x42</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey27"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x45</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey28"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x47</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey29"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4a</literal></argument>, <argument><literal type="number">0x4a</literal></argument>, <argument><literal type="number">0x4a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8</literal></argument>, <argument><literal type="number">0x8</literal></argument>, <argument><literal type="number">0x8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey30"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4d</literal></argument>, <argument><literal type="number">0x4d</literal></argument>, <argument><literal type="number">0x4d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey31"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4f</literal></argument>, <argument><literal type="number">0x4f</literal></argument>, <argument><literal type="number">0x4f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey32"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x52</literal></argument>, <argument><literal type="number">0x52</literal></argument>, <argument><literal type="number">0x52</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey33"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x54</literal></argument>, <argument><literal type="number">0x54</literal></argument>, <argument><literal type="number">0x54</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey34"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x57</literal></argument>, <argument><literal type="number">0x57</literal></argument>, <argument><literal type="number">0x57</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey35"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x59</literal></argument>, <argument><literal type="number">0x59</literal></argument>, <argument><literal type="number">0x59</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey36"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5c</literal></argument>, <argument><literal type="number">0x5c</literal></argument>, <argument><literal type="number">0x5c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey37"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5e</literal></argument>, <argument><literal type="number">0x5e</literal></argument>, <argument><literal type="number">0x5e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey38"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x61</literal></argument>, <argument><literal type="number">0x61</literal></argument>, <argument><literal type="number">0x61</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey39"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0x63</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa</literal></argument>, <argument><literal type="number">0xa</literal></argument>, <argument><literal type="number">0xa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey40"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x66</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey41"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey42"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6b</literal></argument>, <argument><literal type="number">0x6b</literal></argument>, <argument><literal type="number">0x6b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey43"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6e</literal></argument>, <argument><literal type="number">0x6e</literal></argument>, <argument><literal type="number">0x6e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey44"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x70</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey45"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x73</literal></argument>, <argument><literal type="number">0x73</literal></argument>, <argument><literal type="number">0x73</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey46"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x75</literal></argument>, <argument><literal type="number">0x75</literal></argument>, <argument><literal type="number">0x75</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey47"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x78</literal></argument>, <argument><literal type="number">0x78</literal></argument>, <argument><literal type="number">0x78</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey48"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0x7a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey49"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7d</literal></argument>, <argument><literal type="number">0x7d</literal></argument>, <argument><literal type="number">0x7d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey5"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd</literal></argument>, <argument><literal type="number">0xd</literal></argument>, <argument><literal type="number">0xd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey50"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0x7f</literal></argument>, <argument><literal type="number">0x7f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey51"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0x82</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey52"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x85</literal></argument>, <argument><literal type="number">0x85</literal></argument>, <argument><literal type="number">0x85</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey53"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x87</literal></argument>, <argument><literal type="number">0x87</literal></argument>, <argument><literal type="number">0x87</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey54"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8a</literal></argument>, <argument><literal type="number">0x8a</literal></argument>, <argument><literal type="number">0x8a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey55"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8c</literal></argument>, <argument><literal type="number">0x8c</literal></argument>, <argument><literal type="number">0x8c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey56"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8f</literal></argument>, <argument><literal type="number">0x8f</literal></argument>, <argument><literal type="number">0x8f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey57"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x91</literal></argument>, <argument><literal type="number">0x91</literal></argument>, <argument><literal type="number">0x91</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey58"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x94</literal></argument>, <argument><literal type="number">0x94</literal></argument>, <argument><literal type="number">0x94</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey59"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x96</literal></argument>, <argument><literal type="number">0x96</literal></argument>, <argument><literal type="number">0x96</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey6"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf</literal></argument>, <argument><literal type="number">0xf</literal></argument>, <argument><literal type="number">0xf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey60"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x99</literal></argument>, <argument><literal type="number">0x99</literal></argument>, <argument><literal type="number">0x99</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey61"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9c</literal></argument>, <argument><literal type="number">0x9c</literal></argument>, <argument><literal type="number">0x9c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey62"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9e</literal></argument>, <argument><literal type="number">0x9e</literal></argument>, <argument><literal type="number">0x9e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey63"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa1</literal></argument>, <argument><literal type="number">0xa1</literal></argument>, <argument><literal type="number">0xa1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey64"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa3</literal></argument>, <argument><literal type="number">0xa3</literal></argument>, <argument><literal type="number">0xa3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey65"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa6</literal></argument>, <argument><literal type="number">0xa6</literal></argument>, <argument><literal type="number">0xa6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey66"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa8</literal></argument>, <argument><literal type="number">0xa8</literal></argument>, <argument><literal type="number">0xa8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey67"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xab</literal></argument>, <argument><literal type="number">0xab</literal></argument>, <argument><literal type="number">0xab</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey68"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xad</literal></argument>, <argument><literal type="number">0xad</literal></argument>, <argument><literal type="number">0xad</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey69"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb0</literal></argument>, <argument><literal type="number">0xb0</literal></argument>, <argument><literal type="number">0xb0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey7"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x12</literal></argument>, <argument><literal type="number">0x12</literal></argument>, <argument><literal type="number">0x12</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey70"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb3</literal></argument>, <argument><literal type="number">0xb3</literal></argument>, <argument><literal type="number">0xb3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey71"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb5</literal></argument>, <argument><literal type="number">0xb5</literal></argument>, <argument><literal type="number">0xb5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey72"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb8</literal></argument>, <argument><literal type="number">0xb8</literal></argument>, <argument><literal type="number">0xb8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey73"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xba</literal></argument>, <argument><literal type="number">0xba</literal></argument>, <argument><literal type="number">0xba</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey74"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbd</literal></argument>, <argument><literal type="number">0xbd</literal></argument>, <argument><literal type="number">0xbd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey75"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0xbf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey76"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc2</literal></argument>, <argument><literal type="number">0xc2</literal></argument>, <argument><literal type="number">0xc2</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey77"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc4</literal></argument>, <argument><literal type="number">0xc4</literal></argument>, <argument><literal type="number">0xc4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey78"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc7</literal></argument>, <argument><literal type="number">0xc7</literal></argument>, <argument><literal type="number">0xc7</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey79"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc9</literal></argument>, <argument><literal type="number">0xc9</literal></argument>, <argument><literal type="number">0xc9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey8"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x14</literal></argument>, <argument><literal type="number">0x14</literal></argument>, <argument><literal type="number">0x14</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey80"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcc</literal></argument>, <argument><literal type="number">0xcc</literal></argument>, <argument><literal type="number">0xcc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey81"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcf</literal></argument>, <argument><literal type="number">0xcf</literal></argument>, <argument><literal type="number">0xcf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey82"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd1</literal></argument>, <argument><literal type="number">0xd1</literal></argument>, <argument><literal type="number">0xd1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey83"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd4</literal></argument>, <argument><literal type="number">0xd4</literal></argument>, <argument><literal type="number">0xd4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey84"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd6</literal></argument>, <argument><literal type="number">0xd6</literal></argument>, <argument><literal type="number">0xd6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey85"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd9</literal></argument>, <argument><literal type="number">0xd9</literal></argument>, <argument><literal type="number">0xd9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey86"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xdb</literal></argument>, <argument><literal type="number">0xdb</literal></argument>, <argument><literal type="number">0xdb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey87"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xde</literal></argument>, <argument><literal type="number">0xde</literal></argument>, <argument><literal type="number">0xde</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey88"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xe0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey89"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe3</literal></argument>, <argument><literal type="number">0xe3</literal></argument>, <argument><literal type="number">0xe3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey9"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x17</literal></argument>, <argument><literal type="number">0x17</literal></argument>, <argument><literal type="number">0x17</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey90"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe5</literal></argument>, <argument><literal type="number">0xe5</literal></argument>, <argument><literal type="number">0xe5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey91"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe8</literal></argument>, <argument><literal type="number">0xe8</literal></argument>, <argument><literal type="number">0xe8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey92"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xeb</literal></argument>, <argument><literal type="number">0xeb</literal></argument>, <argument><literal type="number">0xeb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey93"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xed</literal></argument>, <argument><literal type="number">0xed</literal></argument>, <argument><literal type="number">0xed</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey94"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xf0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey95"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf2</literal></argument>, <argument><literal type="number">0xf2</literal></argument>, <argument><literal type="number">0xf2</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey96"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xf5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey97"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf7</literal></argument>, <argument><literal type="number">0xf7</literal></argument>, <argument><literal type="number">0xf7</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey98"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xfa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Grey99"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfc</literal></argument>, <argument><literal type="number">0xfc</literal></argument>, <argument><literal type="number">0xfc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Honeydew"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Honeydew1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Honeydew2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Honeydew3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc1</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Honeydew4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x83</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x83</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"HotPink"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0xb4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"HotPink1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x6e</literal></argument>, <argument><literal type="number">0xb4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"HotPink2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x6a</literal></argument>, <argument><literal type="number">0xa7</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"HotPink3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x60</literal></argument>, <argument><literal type="number">0x90</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"HotPink4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x3a</literal></argument>, <argument><literal type="number">0x62</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"IndianRed"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x5c</literal></argument>, <argument><literal type="number">0x5c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"IndianRed1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x6a</literal></argument>, <argument><literal type="number">0x6a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"IndianRed2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0x63</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"IndianRed3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x55</literal></argument>, <argument><literal type="number">0x55</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"IndianRed4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x3a</literal></argument>, <argument><literal type="number">0x3a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Indigo"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4b</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x82</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ivory"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ivory1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ivory2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ivory3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ivory4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x83</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Khaki"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xe6</literal></argument>, <argument><literal type="number">0x8c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Khaki1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf6</literal></argument>, <argument><literal type="number">0x8f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Khaki2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe6</literal></argument>, <argument><literal type="number">0x85</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Khaki3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc6</literal></argument>, <argument><literal type="number">0x73</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Khaki4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x86</literal></argument>, <argument><literal type="number">0x4e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Lavender"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe6</literal></argument>, <argument><literal type="number">0xe6</literal></argument>, <argument><literal type="number">0xfa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LavenderBlush"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xf5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LavenderBlush1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xf5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LavenderBlush2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xe5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LavenderBlush3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc1</literal></argument>, <argument><literal type="number">0xc5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LavenderBlush4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x83</literal></argument>, <argument><literal type="number">0x86</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LawnGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7c</literal></argument>, <argument><literal type="number">0xfc</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LemonChiffon"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LemonChiffon1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LemonChiffon2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe9</literal></argument>, <argument><literal type="number">0xbf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LemonChiffon3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc9</literal></argument>, <argument><literal type="number">0xa5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LemonChiffon4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x89</literal></argument>, <argument><literal type="number">0x70</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xad</literal></argument>, <argument><literal type="number">0xd8</literal></argument>, <argument><literal type="number">0xe6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0xef</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb2</literal></argument>, <argument><literal type="number">0xdf</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9a</literal></argument>, <argument><literal type="number">0xc0</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x68</literal></argument>, <argument><literal type="number">0x83</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightCoral"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightCyan"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightCyan1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightCyan2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd1</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightCyan3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb4</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightCyan4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGoldenrod"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xdd</literal></argument>, <argument><literal type="number">0x82</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGoldenrod1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xec</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGoldenrod2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xdc</literal></argument>, <argument><literal type="number">0x82</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGoldenrod3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xbe</literal></argument>, <argument><literal type="number">0x70</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGoldenrod4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x81</literal></argument>, <argument><literal type="number">0x4c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGoldenRodYellow"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xd2</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd3</literal></argument>, <argument><literal type="number">0xd3</literal></argument>, <argument><literal type="number">0xd3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x90</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x90</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGrey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd3</literal></argument>, <argument><literal type="number">0xd3</literal></argument>, <argument><literal type="number">0xd3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightMagenta"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xbb</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightPink"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xb6</literal></argument>, <argument><literal type="number">0xc1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightPink1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xae</literal></argument>, <argument><literal type="number">0xb9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightPink2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xa2</literal></argument>, <argument><literal type="number">0xad</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightPink3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x8c</literal></argument>, <argument><literal type="number">0x95</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightPink4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x5f</literal></argument>, <argument><literal type="number">0x65</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightRed"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xbb</literal></argument>, <argument><literal type="number">0xbb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSalmon"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xa0</literal></argument>, <argument><literal type="number">0x7a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSalmon1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xa0</literal></argument>, <argument><literal type="number">0x7a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSalmon2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x95</literal></argument>, <argument><literal type="number">0x72</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSalmon3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x81</literal></argument>, <argument><literal type="number">0x62</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSalmon4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x57</literal></argument>, <argument><literal type="number">0x42</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSeaGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x20</literal></argument>, <argument><literal type="number">0xb2</literal></argument>, <argument><literal type="number">0xaa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSkyBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x87</literal></argument>, <argument><literal type="number">0xce</literal></argument>, <argument><literal type="number">0xfa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSkyBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb0</literal></argument>, <argument><literal type="number">0xe2</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSkyBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa4</literal></argument>, <argument><literal type="number">0xd3</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSkyBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8d</literal></argument>, <argument><literal type="number">0xb6</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSkyBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x60</literal></argument>, <argument><literal type="number">0x7b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSlateBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x84</literal></argument>, <argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSlateGray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x77</literal></argument>, <argument><literal type="number">0x88</literal></argument>, <argument><literal type="number">0x99</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSlateGrey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x77</literal></argument>, <argument><literal type="number">0x88</literal></argument>, <argument><literal type="number">0x99</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSteelBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb0</literal></argument>, <argument><literal type="number">0xc4</literal></argument>, <argument><literal type="number">0xde</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSteelBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xca</literal></argument>, <argument><literal type="number">0xe1</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSteelBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbc</literal></argument>, <argument><literal type="number">0xd2</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSteelBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa2</literal></argument>, <argument><literal type="number">0xb5</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSteelBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6e</literal></argument>, <argument><literal type="number">0x7b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightYellow"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightYellow1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightYellow2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xd1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightYellow3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xb4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightYellow4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x7a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Lime"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LimeGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x32</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x32</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Linen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xf0</literal></argument>, <argument><literal type="number">0xe6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Magenta"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Magenta1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Magenta2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Magenta3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Magenta4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Maroon"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Maroon1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x34</literal></argument>, <argument><literal type="number">0xb3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Maroon2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x30</literal></argument>, <argument><literal type="number">0xa7</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Maroon3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x29</literal></argument>, <argument><literal type="number">0x90</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Maroon4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x1c</literal></argument>, <argument><literal type="number">0x62</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumAquamarine"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xaa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumOrchid"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xba</literal></argument>, <argument><literal type="number">0x55</literal></argument>, <argument><literal type="number">0xd3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumOrchid1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumOrchid2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd1</literal></argument>, <argument><literal type="number">0x5f</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumOrchid3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb4</literal></argument>, <argument><literal type="number">0x52</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumOrchid4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0x37</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumPurple"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x93</literal></argument>, <argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0xdb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumPurple1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xab</literal></argument>, <argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumPurple2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9f</literal></argument>, <argument><literal type="number">0x79</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumPurple3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x89</literal></argument>, <argument><literal type="number">0x68</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumPurple4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5d</literal></argument>, <argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumSeaGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x3c</literal></argument>, <argument><literal type="number">0xb3</literal></argument>, <argument><literal type="number">0x71</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumSlateBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7b</literal></argument>, <argument><literal type="number">0x68</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumSpringGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0x9a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumTurquoise"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x48</literal></argument>, <argument><literal type="number">0xd1</literal></argument>, <argument><literal type="number">0xcc</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumVioletRed"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc7</literal></argument>, <argument><literal type="number">0x15</literal></argument>, <argument><literal type="number">0x85</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MidnightBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x19</literal></argument>, <argument><literal type="number">0x19</literal></argument>, <argument><literal type="number">0x70</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MintCream"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xfa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MistyRose"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe4</literal></argument>, <argument><literal type="number">0xe1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MistyRose1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe4</literal></argument>, <argument><literal type="number">0xe1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MistyRose2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xd5</literal></argument>, <argument><literal type="number">0xd2</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MistyRose3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xb7</literal></argument>, <argument><literal type="number">0xb5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MistyRose4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x7d</literal></argument>, <argument><literal type="number">0x7b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Moccasin"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe4</literal></argument>, <argument><literal type="number">0xb5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NavajoWhite"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xde</literal></argument>, <argument><literal type="number">0xad</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NavajoWhite1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xde</literal></argument>, <argument><literal type="number">0xad</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NavajoWhite2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xcf</literal></argument>, <argument><literal type="number">0xa1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NavajoWhite3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xb3</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NavajoWhite4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x79</literal></argument>, <argument><literal type="number">0x5e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Navy"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NavyBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OldLace"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfd</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xe6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Olive"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OliveDrab"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6b</literal></argument>, <argument><literal type="number">0x8e</literal></argument>, <argument><literal type="number">0x23</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OliveDrab1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x3e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OliveDrab2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb3</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x3a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OliveDrab3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9a</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x32</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OliveDrab4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x22</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orange"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xa5</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orange1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xa5</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orange2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x9a</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orange3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x85</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orange4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x5a</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OrangeRed"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OrangeRed1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OrangeRed2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x40</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OrangeRed3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x37</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OrangeRed4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x25</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orchid"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xda</literal></argument>, <argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0xd6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orchid1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x83</literal></argument>, <argument><literal type="number">0xfa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orchid2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0xe9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orchid3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0xc9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orchid4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x89</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleGoldenRod"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe8</literal></argument>, <argument><literal type="number">0xaa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x98</literal></argument>, <argument><literal type="number">0xfb</literal></argument>, <argument><literal type="number">0x98</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleGreen1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9a</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x9a</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleGreen2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x90</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x90</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleGreen3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7c</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x7c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleGreen4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x54</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x54</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleTurquoise"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xaf</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleTurquoise1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbb</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleTurquoise2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xae</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleTurquoise3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x96</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleTurquoise4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleVioletRed"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xdb</literal></argument>, <argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x93</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleVioletRed1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0xab</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleVioletRed2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x79</literal></argument>, <argument><literal type="number">0x9f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleVioletRed3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x68</literal></argument>, <argument><literal type="number">0x89</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleVioletRed4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x5d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PapayaWhip"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xef</literal></argument>, <argument><literal type="number">0xd5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PeachPuff"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xda</literal></argument>, <argument><literal type="number">0xb9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PeachPuff1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xda</literal></argument>, <argument><literal type="number">0xb9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PeachPuff2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xcb</literal></argument>, <argument><literal type="number">0xad</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PeachPuff3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xaf</literal></argument>, <argument><literal type="number">0x95</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PeachPuff4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x77</literal></argument>, <argument><literal type="number">0x65</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Peru"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x85</literal></argument>, <argument><literal type="number">0x3f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Pink"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xc0</literal></argument>, <argument><literal type="number">0xcb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Pink1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xb5</literal></argument>, <argument><literal type="number">0xc5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Pink2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xa9</literal></argument>, <argument><literal type="number">0xb8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Pink3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x91</literal></argument>, <argument><literal type="number">0x9e</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Pink4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0x6c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Plum"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xdd</literal></argument>, <argument><literal type="number">0xa0</literal></argument>, <argument><literal type="number">0xdd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Plum1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xbb</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Plum2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xae</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Plum3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x96</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Plum4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PowderBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb0</literal></argument>, <argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xe6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Purple"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Purple1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9b</literal></argument>, <argument><literal type="number">0x30</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Purple2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x91</literal></argument>, <argument><literal type="number">0x2c</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Purple3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7d</literal></argument>, <argument><literal type="number">0x26</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Purple4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x55</literal></argument>, <argument><literal type="number">0x1a</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RebeccaPurple"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x33</literal></argument>, <argument><literal type="number">0x99</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Red"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Red1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Red2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Red3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Red4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RosyBrown"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbc</literal></argument>, <argument><literal type="number">0x8f</literal></argument>, <argument><literal type="number">0x8f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RosyBrown1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xc1</literal></argument>, <argument><literal type="number">0xc1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RosyBrown2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xb4</literal></argument>, <argument><literal type="number">0xb4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RosyBrown3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x9b</literal></argument>, <argument><literal type="number">0x9b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RosyBrown4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x69</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RoyalBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x41</literal></argument>, <argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0xe1</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RoyalBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x48</literal></argument>, <argument><literal type="number">0x76</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RoyalBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x43</literal></argument>, <argument><literal type="number">0x6e</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RoyalBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x3a</literal></argument>, <argument><literal type="number">0x5f</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RoyalBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x27</literal></argument>, <argument><literal type="number">0x40</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SaddleBrown"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x45</literal></argument>, <argument><literal type="number">0x13</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Salmon"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x72</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Salmon1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x8c</literal></argument>, <argument><literal type="number">0x69</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Salmon2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0x62</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Salmon3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x54</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Salmon4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x4c</literal></argument>, <argument><literal type="number">0x39</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SandyBrown"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf4</literal></argument>, <argument><literal type="number">0xa4</literal></argument>, <argument><literal type="number">0x60</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SeaGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x2e</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x57</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SeaGreen1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x54</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x9f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SeaGreen2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4e</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x94</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SeaGreen3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x43</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SeaGreen4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x2e</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x57</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SeaShell"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Seashell1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Seashell2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe5</literal></argument>, <argument><literal type="number">0xde</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Seashell3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc5</literal></argument>, <argument><literal type="number">0xbf</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Seashell4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x86</literal></argument>, <argument><literal type="number">0x82</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sienna"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa0</literal></argument>, <argument><literal type="number">0x52</literal></argument>, <argument><literal type="number">0x2d</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sienna1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0x47</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sienna2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x79</literal></argument>, <argument><literal type="number">0x42</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sienna3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x68</literal></argument>, <argument><literal type="number">0x39</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sienna4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x26</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Silver"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc0</literal></argument>, <argument><literal type="number">0xc0</literal></argument>, <argument><literal type="number">0xc0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SkyBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x87</literal></argument>, <argument><literal type="number">0xce</literal></argument>, <argument><literal type="number">0xeb</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SkyBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x87</literal></argument>, <argument><literal type="number">0xce</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SkyBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7e</literal></argument>, <argument><literal type="number">0xc0</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SkyBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6c</literal></argument>, <argument><literal type="number">0xa6</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SkyBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4a</literal></argument>, <argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6a</literal></argument>, <argument><literal type="number">0x5a</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x83</literal></argument>, <argument><literal type="number">0x6f</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x7a</literal></argument>, <argument><literal type="number">0x67</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x69</literal></argument>, <argument><literal type="number">0x59</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x47</literal></argument>, <argument><literal type="number">0x3c</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateGray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x90</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateGray1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xc6</literal></argument>, <argument><literal type="number">0xe2</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateGray2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb9</literal></argument>, <argument><literal type="number">0xd3</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateGray3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9f</literal></argument>, <argument><literal type="number">0xb6</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateGray4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x6c</literal></argument>, <argument><literal type="number">0x7b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateGrey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x70</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x90</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Snow"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xfa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Snow1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xfa</literal></argument>, <argument><literal type="number">0xfa</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Snow2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xe9</literal></argument>, <argument><literal type="number">0xe9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Snow3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xc9</literal></argument>, <argument><literal type="number">0xc9</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Snow4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x89</literal></argument>, <argument><literal type="number">0x89</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SpringGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x7f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SpringGreen1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x7f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SpringGreen2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x76</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SpringGreen3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x66</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SpringGreen4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x45</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SteelBlue"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x46</literal></argument>, <argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0xb4</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SteelBlue1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0xb8</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SteelBlue2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x5c</literal></argument>, <argument><literal type="number">0xac</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SteelBlue3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x4f</literal></argument>, <argument><literal type="number">0x94</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SteelBlue4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x36</literal></argument>, <argument><literal type="number">0x64</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tan"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd2</literal></argument>, <argument><literal type="number">0xb4</literal></argument>, <argument><literal type="number">0x8c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tan1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xa5</literal></argument>, <argument><literal type="number">0x4f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tan2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x9a</literal></argument>, <argument><literal type="number">0x49</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tan3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x85</literal></argument>, <argument><literal type="number">0x3f</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tan4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x5a</literal></argument>, <argument><literal type="number">0x2b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Teal"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Thistle"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd8</literal></argument>, <argument><literal type="number">0xbf</literal></argument>, <argument><literal type="number">0xd8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Thistle1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe1</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Thistle2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xd2</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Thistle3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xb5</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Thistle4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x7b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tomato"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0x47</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tomato1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x63</literal></argument>, <argument><literal type="number">0x47</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tomato2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x5c</literal></argument>, <argument><literal type="number">0x42</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tomato3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x4f</literal></argument>, <argument><literal type="number">0x39</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tomato4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x36</literal></argument>, <argument><literal type="number">0x26</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Turquoise"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x40</literal></argument>, <argument><literal type="number">0xe0</literal></argument>, <argument><literal type="number">0xd0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Turquoise1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Turquoise2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xe5</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Turquoise3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xc5</literal></argument>, <argument><literal type="number">0xcd</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Turquoise4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x86</literal></argument>, <argument><literal type="number">0x8b</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Violet"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x82</literal></argument>, <argument><literal type="number">0xee</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"VioletRed"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xd0</literal></argument>, <argument><literal type="number">0x20</literal></argument>, <argument><literal type="number">0x90</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"VioletRed1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x3e</literal></argument>, <argument><literal type="number">0x96</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"VioletRed2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x3a</literal></argument>, <argument><literal type="number">0x8c</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"VioletRed3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x32</literal></argument>, <argument><literal type="number">0x78</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"VioletRed4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x22</literal></argument>, <argument><literal type="number">0x52</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"WebGray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"WebGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"WebGrey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"WebMaroon"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"WebPurple"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x80</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0x80</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Wheat"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xde</literal></argument>, <argument><literal type="number">0xb3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Wheat1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xe7</literal></argument>, <argument><literal type="number">0xba</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Wheat2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xd8</literal></argument>, <argument><literal type="number">0xae</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Wheat3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xba</literal></argument>, <argument><literal type="number">0x96</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Wheat4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x7e</literal></argument>, <argument><literal type="number">0x66</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"White"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"WhiteSmoke"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xf5</literal></argument>, <argument><literal type="number">0xf5</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"X11Gray"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbe</literal></argument>, <argument><literal type="number">0xbe</literal></argument>, <argument><literal type="number">0xbe</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"X11Green"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x0</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"X11Grey"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xbe</literal></argument>, <argument><literal type="number">0xbe</literal></argument>, <argument><literal type="number">0xbe</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"X11Maroon"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xb0</literal></argument>, <argument><literal type="number">0x30</literal></argument>, <argument><literal type="number">0x60</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"X11Purple"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xa0</literal></argument>, <argument><literal type="number">0x20</literal></argument>, <argument><literal type="number">0xf0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Yellow"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Yellow1"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0xff</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Yellow2"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0xee</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Yellow3"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Yellow4"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x8b</literal></argument>, <argument><literal type="number">0x0</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"YellowGreen"</literal></expr>, <macro><name>RGB_</name><argument_list>(<argument><literal type="number">0x9a</literal></argument>, <argument><literal type="number">0xcd</literal></argument>, <argument><literal type="number">0x32</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>RgbValue</name></type> <name>name_to_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>name</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bg"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"background"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>normal_bg</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fg"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"foreground"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>normal_fg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>color_name_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>color_name_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>color_name_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
