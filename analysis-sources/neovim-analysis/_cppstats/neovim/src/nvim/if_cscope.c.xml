<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\if_cscope.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/if_cscope.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/quickfix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/tag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/stream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/if_cscope_defs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"if_cscope.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>csinfo_T</name> <modifier>*</modifier></type> <name>csinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>csinfo_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>eap_arg_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>cscmd_T</name></type> <name><name>cs_cmds</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><name>cs_add</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Add a new database"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"add file|dir [pre-path] [flags]"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"find"</literal></expr>, <expr><name>cs_find</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Query for a pattern"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"find a|c|d|e|f|g|i|s|t name"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><name>cs_help</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show this message"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"help"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"kill"</literal></expr>, <expr><name>cs_kill</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Kill a connection"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"kill #"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reset"</literal></expr>, <expr><name>cs_reset</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Reinit all connections"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"reset"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"show"</literal></expr>, <expr><name>cs_show</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show connections"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"show"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cs_usage_msg</name><parameter_list>(<parameter><decl><type><name>csid_e</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E560: Usage: cs[cope] %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cs_cmds</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>]</index></name><operator>.</operator><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<enum><specifier>static</specifier> enum <block>{

<decl><name>EXP_CSCOPE_SUBCMD</name></decl>, 

<decl><name>EXP_SCSCOPE_SUBCMD</name></decl>, 

<decl><name>EXP_CSCOPE_FIND</name></decl>, 

<decl><name>EXP_CSCOPE_KILL</name></decl> 

}</block> <decl><name>expand_what</name></decl>;</enum>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_cscope_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>current_idx</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>expand_what</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXP_CSCOPE_SUBCMD</name></expr>:</case>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>cs_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

<case>case <expr><name>EXP_SCSCOPE_SUBCMD</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>current_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cs_cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>cs_cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cansplit</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>current_idx</name><operator>++</operator> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>cs_cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>EXP_CSCOPE_FIND</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>query_type</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"t"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>query_type</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>EXP_CSCOPE_KILL</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>connection</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>current_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_idx</name><operator>++</operator> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%zu"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>connection</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>current_idx</name> <operator>==</operator> <name>idx</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"-1"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_context_in_cscope_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>cmdidx_T</name></type> <name>cmdidx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_CSCOPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>cmdidx</name> <operator>==</operator> <name>CMD_scscope</name><operator>)</operator></expr>

?</condition><then> <expr><name>EXP_SCSCOPE_SUBCMD</name></expr> </then><else>: <expr><name>EXP_CSCOPE_SUBCMD</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_FILES</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"kill"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_CSCOPE_KILL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"find"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_CSCOPE_FIND</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>do_cscope_general</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>make_split</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cscmd_T</name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdp</name> <operator>=</operator> <call><name>cs_lookup_cmd</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_help</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>make_split</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdp</name><operator>-&gt;</operator><name>cansplit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"This cscope command does not support splitting the window.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>postponed_split</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>postponed_split_flags</name> <operator>=</operator> <name><name>cmdmod</name><operator>.</operator><name>split</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>postponed_split_tab</name> <operator>=</operator> <name><name>cmdmod</name><operator>.</operator><name>tab</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>cmdp</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postponed_split_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>postponed_split_tab</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_cscope</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_cscope_general</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_scscope</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_cscope_general</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_cstag</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E562: Usage: cstag &lt;ident&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>p_csto</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>cs_check_for_connections</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_find_common</name><argument_list>(<argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_free_tags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_check_for_tags</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_tag</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>DT_JUMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_check_for_tags</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_tag</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>DT_JUMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>cs_check_for_tags</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_tag</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>DT_JUMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_check_for_connections</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_find_common</name><argument_list>(<argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cs_free_tags</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_check_for_connections</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_find_common</name><argument_list>(<argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cs_free_tags</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E257: cstag: tag not found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cs_fgets</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>cs_manage_matches</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Get</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function> 

<function><type><name>void</name></type> <name>cs_free_tags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>cs_manage_matches</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cs_print_tags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>cs_manage_matches</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cs_connection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dbpath</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ppath</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>num</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>num</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>dbpath</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dbpath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dbpath</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dbpath</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>ppath</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>ppath</name>

<operator>&amp;&amp;</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name>

<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ppath</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dbpath</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>ppath</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>ppath</name>

<operator>&amp;&amp;</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ppath</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_add</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ppath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fname</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_usage_msg</name><argument_list>(<argument><expr><name>Add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ppath</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>cs_add_common</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>ppath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cs_stat_emsg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stat_emsg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E563: stat(%s) error: %d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>stat_emsg</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>MAXPATHL</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stat_emsg</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>cs_add_common</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ppath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>usedlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg1</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fbuf</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>modify_fname</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":p"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedlen</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>add_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FileInfo</name></type> <name>file_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>file_info_ok</name> <init>= <expr><call><name>os_fileinfo</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_info_ok</name></expr>)</condition> <block>{<block_content>

<label><name>staterr</name>:</label>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cs_stat_emsg</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>add_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ppath</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>arg2</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>ppath</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_path_exists</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>ppath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>staterr</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>file_info</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>==</operator> <name>S_IFDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fname2</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>CSCOPE_DBFILE</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>fname</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fname</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>, <argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><name>CSCOPE_DBFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>CSCOPE_DBFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>file_info_ok</name> <operator>=</operator> <call><name>os_fileinfo</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_info_ok</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cs_stat_emsg</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>add_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cs_insert_filelist</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>, <argument><expr><name>ppath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>file_info</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>file_info</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cs_insert_filelist</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>ppath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG2</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E564: %s is not a directory or a valid cscope database"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>add_err</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_create_connection</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CSCOPE_FAILURE</name>

<operator>||</operator> <call><name>cs_read_prompt</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CSCOPE_FAILURE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_release_csp</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>add_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>smsg_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Added cscope database %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_SUCCESS</name></expr>;</return>

<label><name>add_err</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_check_for_connections</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>cs_cnt_connections</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_check_for_tags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tags</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>cs_cnt_connections</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>cnt</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>cs_reading_emsg</name><parameter_list>(

<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EMSGU</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E262: error reading cscope connection %"</literal> <name>PRIu64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSREAD_BUFSIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_cnt_matches</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>CSREAD_BUFSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>CSREAD_BUFSIZE</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cs_reading_emsg</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Unable to search database"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stok</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>stok</name></expr></argument>, <argument><expr><literal type="string">"cscope:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stok</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nlines</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>stok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nlines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nlines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stok</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>stok</name></expr></argument>, <argument><expr><literal type="string">"lines"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nlines</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cs_create_cmd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>csoption</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>search</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>csoption</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'9'</literal></expr>:</case> <case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E561: unknown cscope search type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cs_usage_msg</name><argument_list>(<argument><expr><name>Find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>search</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>search</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>pat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>pat</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"%d%s"</literal></expr></argument>, <argument><expr><name>search</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cmd</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_create_connection</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name><name>to_cs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>from_cs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ppath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>to_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>to_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>from_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>from_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>to_cs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>pipe</name><argument_list>(<argument><expr><name>from_cs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E566: Could not create cscope pipes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err_closing</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>to_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>to_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>to_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>to_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>from_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>from_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>from_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>from_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E622: Could not fork for cscope"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err_closing</name>;</goto>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>to_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>from_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>from_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>to_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>from_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>pipe_stdin</name> <init>= <expr><name>FALSE</name></expr></init></decl>, <decl><type ref="prev"/><name>pipe_stdout</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>stdin_rd</name></decl>, <decl><type ref="prev"/><name>stdout_rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>stdout_wr</name></decl>, <decl><type ref="prev"/><name>stdin_wr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>created</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pipe_stdin</name> <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stdin_rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stdin_wr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>pipe_stdout</name> <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stdout_rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stdout_wr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E566: Could not create cscope pipes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err_closing</name>:</label>

<if_stmt><if>if <condition>(<expr><name>pipe_stdin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>stdin_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>stdin_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pipe_stdout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>stdout_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>stdout_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name>p_csprg</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>prog</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ppath</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>ppath</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"exec %s -dl -f %s"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"%s -dl -f %s"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">" -P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETSID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETPGID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETSID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>setpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection setpgid failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>execl</name><argument_list>(<argument><expr><literal type="string">"/bin/sh"</literal></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection exec failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name><name>to_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection: fdopen for to_fp failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name><name>from_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection: fdopen for fr_fp failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>to_cs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>from_cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>GetStartupInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>STARTF_USESTDHANDLES</name> <operator>|</operator> <name>STARTF_USESHOWWINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>wShowWindow</name></name> <operator>=</operator> <name>SW_HIDE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <name>stdout_wr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <name>stdout_wr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <name>stdin_rd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>created</name> <operator>=</operator> <call><name>CreateProcess</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>CREATE_NEW_CONSOLE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>created</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection exec failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E623: Could not spawn cscope process"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err_closing</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hProc</name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>stdin_wr</name></expr></argument>, <argument><expr><name>_O_TEXT</name><operator>|</operator><name>_O_APPEND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name> <operator>=</operator> <call><name>_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection: fdopen for to_fp failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>stdout_rd</name></expr></argument>, <argument><expr><name>_O_TEXT</name><operator>|</operator><name>_O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name> <operator>=</operator> <call><name>_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cs_create_connection: fdopen for fr_fp failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>stdin_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>stdout_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>CSCOPE_SUCCESS</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_find</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_check_for_connections</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E567: no cscope connections"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_usage_msg</name><argument_list>(<argument><expr><name>Find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>opt</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>&gt;=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <name>eap_arg_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_usage_msg</name><argument_list>(<argument><expr><name>Find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>eap_arg_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>NUL</name> <operator>==</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><call><name>cs_find_common</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_lcscope</name></expr></argument>, <argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_find_common</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>use_ll</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nummatches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>totmatches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>cmdletter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qfpos</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'7'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'8'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>cmdletter</name> <operator>=</operator> <name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>qfpos</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_csqf</name></expr></argument>, <argument><expr><name>cmdletter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qfpos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qfpos</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>CSQF_FLAGS</name></expr></argument>, <argument><expr><operator>*</operator><name>qfpos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nf</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E469: invalid cscopequickfix flag %c for %c"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nf</name></expr></argument>, <argument><expr><operator>*</operator><name>qfpos</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>qfpos</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>qfpos</name> <operator>!=</operator> <literal type="char">'0'</literal>

<operator>&amp;&amp;</operator> <call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_QUICKFIXCMDPRE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cscope"</literal></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>cs_create_cmd</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nummatches</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>csinfo_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nummatches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>totmatches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nummatches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cs_cnt_matches</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nummatches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>totmatches</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>nummatches</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nummatches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cs_read_prompt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>totmatches</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nf</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E259: no matches found for cscope query %s of %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>nummatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nf</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>nummatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qfpos</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>qfpos</name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>vim_tempname</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>qf_info_T</name> <modifier>*</modifier></type><name>qi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cs_file_results</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>nummatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_ll</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>qf_init</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"%f%*\\t%l%*\\t%m"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>qfpos</name> <operator>==</operator> <literal type="char">'-'</literal></expr></argument>, <argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>postponed_split</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_split</name><argument_list>(<argument><expr><ternary><condition><expr><name>postponed_split</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>postponed_split</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>postponed_split_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postponed_split</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_QUICKFIXCMDPOST</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cscope"</literal></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_ll</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qi</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_llist_ref</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_llist_ref</name></name></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_llist</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>qf_jump</name><argument_list>(<argument><expr><name>qi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>os_remove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>nummatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>contexts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cs_fill_results</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pat</name></expr></argument>, <argument><expr><name>totmatches</name></expr></argument>, <argument><expr><name>nummatches</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>contexts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>nummatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cs_manage_matches</name><argument_list>(<argument><expr><name>matches</name></expr></argument>, <argument><expr><name>contexts</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>, <argument><expr><name>Store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>do_tag</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>pat</name></expr></argument>, <argument><expr><name>DT_CSCOPE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>forceit</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_help</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cscmd_T</name> <modifier>*</modifier></type><name>cmdp</name> <init>= <expr><name>cs_cmds</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cscope commands:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>space_cnt</name> <init>= <expr><literal type="number">30</literal> <operator>-</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>help</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>space_cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>space_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%-5s: %s%*s (Usage: %s)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name>help</name></expr></argument>, <argument><expr><name>space_cnt</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>,

<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>usage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"find"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>

<literal type="string">" a: Find assignments to this symbol\n"</literal>

<literal type="string">" c: Find functions calling this function\n"</literal>

<literal type="string">" d: Find functions called by this function\n"</literal>

<literal type="string">" e: Find this egrep pattern\n"</literal>

<literal type="string">" f: Find this file\n"</literal>

<literal type="string">" g: Find this definition\n"</literal>

<literal type="string">" i: Find files #including this file\n"</literal>

<literal type="string">" s: Find this C symbol\n"</literal>

<literal type="string">" t: Find this text string\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmdp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_SUCCESS</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_csinfo</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>file_id</name> <operator>=</operator> <name>FILE_ID_EMPTY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_insert_filelist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ppath</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>,

<parameter><decl><type><name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>empty_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>os_fileid_equal_fileinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>csinfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>file_id</name><operator>)</operator></expr></argument>, <argument><expr><name>file_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E568: duplicate cscope database not added"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>empty_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>empty_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>csinfo_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>csinfo_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>csinfo_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>csinfo</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>csinfo_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>csinfo_size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>csinfo</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>csinfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>csinfo_T</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>csinfo_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>csinfo_size</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_csinfo</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ppath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ppath</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>os_fileinfo_id</name><argument_list>(<argument><expr><name>file_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>file_id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>cscmd_T</name> <modifier>*</modifier></type> <name>cs_lookup_cmd</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cscmd_T</name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eap_arg_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stok</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>stok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cmdp</name> <operator>=</operator> <name>cs_cmds</name></expr>;</init> <condition><expr><name><name>cmdp</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>cmdp</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>stok</name><operator>)</operator></expr></argument>, <argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cmdp</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_kill</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>killall</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stok</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_usage_msg</name><argument_list>(<argument><expr><name>Kill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>stok</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>stok</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>stok</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>stok</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>stok</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>stok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>killall</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E261: cscope connection %s not found"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><name>stok</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>killall</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>csinfo_size</name> <operator>||</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E261: cscope connection %s not found"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>killall</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cs_kill_execute</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cs_kill_execute</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name>stok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CSCOPE_SUCCESS</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>cs_kill_execute</name><parameter_list>(

<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>smsg_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>MSG_HIST</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cscope connection %s closed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cs_release_csp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cs_make_vim_style_matches</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>slno</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>search</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tagstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>amt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>search</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>amt</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>slno</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tagstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>search</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\t%s\t%s;\"\t%s"</literal></expr></argument>, <argument><expr><name>tagstr</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>slno</name></expr></argument>, <argument><expr><name>search</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>amt</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>slno</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tagstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\t%s\t%s;\""</literal></expr></argument>, <argument><expr><name>tagstr</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>slno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cs_manage_matches</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>contexts</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>totmatches</name></decl></parameter>, <parameter><decl><type><name>mcmd_e</name></type> <name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>mp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>Store</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>matches</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>totmatches</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cs_manage_matches</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>matches</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>contexts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>totmatches</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Get</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;=</operator> <name>cnt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mp</name><index>[<expr><name>next</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Free</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>cnt</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mp</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Print</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cs_print_tags_priv</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>IEMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E570: fatal error in cs_manage_matches"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cs_parse_results</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>cnumber</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>linenumber</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>search</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<label><name>retry</name>:</label>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>cnumber</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>cnumber</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cs_reading_emsg</name><argument_list>(<argument><expr><name>cnumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>cnumber</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>context</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>linenumber</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>search</name> <operator>=</operator> <operator>*</operator><name>linenumber</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>linenumber</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>search</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>search</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>cs_resolve_file</name><argument_list>(<argument><expr><name>cnumber</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cs_file_results</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nummatches_a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>search</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cntx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>CSREAD_BUFSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nummatches_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>nummatches_a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fullname</name> <operator>=</operator> <call><name>cs_parse_results</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>CSREAD_BUFSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cntx</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>slno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>search</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cntx</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cntx</name></expr></argument>, <argument><expr><literal type="string">"&lt;global&gt;"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;global&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;%s&gt;&gt;"</literal></expr></argument>, <argument><expr><name>cntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>search</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s\t%s\t%s\n"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>slno</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s\t%s\t%s %s\n"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>slno</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>search</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cs_read_prompt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cs_fill_results</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tagstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totmatches</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nummatches_a</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>matches_p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>cntxts_p</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>matched</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>search</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>totsofar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cntxts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cntx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>totmatches</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>CSREAD_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>totmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cntxts</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>totmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nummatches_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>nummatches_a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fullname</name> <operator>=</operator> <call><name>cs_parse_results</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>CSREAD_BUFSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cntx</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>slno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>search</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>matches</name><index>[<expr><name>totsofar</name></expr>]</index></name> <operator>=</operator> <call><name>cs_make_vim_style_matches</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>slno</name></expr></argument>, <argument><expr><name>search</name></expr></argument>,

<argument><expr><name>tagstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cntx</name></expr></argument>, <argument><expr><literal type="string">"&lt;global&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cntxts</name><index>[<expr><name>totsofar</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>cntxts</name><index>[<expr><name>totsofar</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>cntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>totsofar</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cs_read_prompt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name>totsofar</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>cntxts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>matched</name> <operator>=</operator> <name>totsofar</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>matches_p</name> <operator>=</operator> <name>matches</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cntxts_p</name> <operator>=</operator> <name>cntxts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cs_pathcomponents</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_cspc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_cspc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>--</operator><name>s</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></while>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&gt;</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cs_print_tags_priv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cntxts</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>num_matches</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>globalcntx</name> <init>= <expr><literal type="string">"GLOBAL"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cstag_msg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cscope tag: %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_matches</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcnt</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptag</name> <init>= <expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptag_end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>ptag</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptag_end</name> <operator>&gt;=</operator> <name>ptag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptag_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cstag_msg</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ptag_end</name> <operator>-</operator> <name>ptag</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr><name>newsize</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>cstag_msg</name></expr></argument>, <argument><expr><name>ptag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptag_end</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n #line"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><name>msg_col</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"filename / context / line\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_matches</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcnt</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname_end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>fname_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lno</name> <init>= <expr><name>fname_end</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><call><name>xstrchrnul</name><argument_list>(<argument><expr><name>lno</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lno_end</name> <init>= <expr><name>extra</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>lno_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>extra</name></expr> ?</condition><then> <expr><name>extra</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>csfmt_str</name> <init>= <expr><literal type="string">"%4zu %6s "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>csfmt_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>lno_end</name> <operator>-</operator> <name>lno</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <name>newsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>csfmt_str</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_LONG_ATTR</name><argument_list>(<argument><expr><call><name>cs_pathcomponents</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><ternary><condition><expr><name><name>cntxts</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>cntxts</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name>globalcntx</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cntxformat</name> <init>= <expr><literal type="string">" &lt;&lt;%s&gt;&gt;"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cntxformat</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <name>newsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>cntxformat</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>+</operator> <name>buf_len</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_LONG</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_LONG</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fname_end</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lno_end</name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_read_prompt</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>bufpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cs_emsg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E609: Cscope error: %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cs_emsg_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cs_emsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>eprompt</name> <init>= <expr><literal type="string">"Press the RETURN key to continue:"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>epromptlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>eprompt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>IOSIZE</name> <operator>&gt;=</operator> <name>cs_emsg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name> <init>= <expr><name>IOSIZE</name> <operator>-</operator> <name>cs_emsg_len</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOF</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <name><name>CSCOPE_PROMPT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bufpos</name> <operator>&lt;</operator> <name>maxlen</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bufpos</name> <operator>&gt;=</operator> <name>epromptlen</name>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>bufpos</name> <operator>-</operator> <name>epromptlen</name></expr>]</index></name></expr></argument>, <argument><expr><name>eprompt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufpos</name> <operator>-</operator> <name>epromptlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG2</name><argument_list>(<argument><expr><name>cs_emsg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufpos</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>CSCOPE_PROMPT</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><literal type="string">"cs_read_prompt EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EMSG2</name><argument_list>(<argument><expr><name>cs_emsg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>p_csverbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cs_reading_emsg</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>cs_release_csp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name><name>CSCOPE_PROMPT</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<break>break;</break> 

</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sig_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cs_release_csp</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freefnpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"q\n"</literal></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>waitpid_errno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pstat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>, <decl><type ref="prev"/><name>old</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sig_handler</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SA_NODEFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_NODEFER</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>waitpid_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>waited</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>waited</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>waited</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><operator>++</operator><name>waited</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstat</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>waitpid_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>os_delay</name><argument_list>(<argument><expr><literal type="number">50L</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>alive</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>waitpid_errno</name> <operator>==</operator> <name>ECHILD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>waited</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>waited</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>waited</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><operator>++</operator><name>waited</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_delay</name><argument_list>(<argument><expr><literal type="number">50L</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alive</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>waitpid</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hProc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hProc</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TerminateProcess</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hProc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freefnpp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_csinfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_reset</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dblist</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pplist</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>fllist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>csinfo_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CSCOPE_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dblist</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>csinfo_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pplist</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>csinfo_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fllist</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>csinfo_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dblist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pplist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fllist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cs_release_csp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dblist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_add_common</name><argument_list>(<argument><expr><name><name>dblist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pplist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fllist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" (#%zu)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>dblist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>pplist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>fllist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dblist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fllist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_csverbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"All cscope databases reset"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CSCOPE_SUCCESS</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cs_resolve_file</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>csdir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>p_csre</name> <operator>&amp;&amp;</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>csdir</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>csdir</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>,

<argument><expr><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call>

<operator>-</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>csdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>fullname</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>csdir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>csdir</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fullname</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>csdir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fullname</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>csdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fullname</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_show</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cs_cnt_connections</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no cscope connections\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" #pid database name prepend path\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%2zu %-5"</literal> <name>PRId64</name> <literal type="string">" %-34s %-32s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%2zu %-5"</literal> <name>PRId64</name> <literal type="string">" %-34s &lt;none&gt;"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name><name>csinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CSCOPE_SUCCESS</name></expr>;</return>

</block_content>}</block></function> 

<function><type><name>void</name></type> <name>cs_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csinfo_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cs_release_csp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>csinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>csinfo_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
