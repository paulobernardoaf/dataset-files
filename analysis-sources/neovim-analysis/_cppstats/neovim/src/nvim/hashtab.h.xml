<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\hashtab.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>hash_removed</name></decl>;</decl_stmt>

<typedef>typedef <type><name>size_t</name></type> <name>hash_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_KEY_REMOVED</name></cpp:macro> <cpp:value>((char_u *)&amp;hash_removed)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHITEM_EMPTY</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((hi)-&gt;hi_key == NULL || (hi)-&gt;hi_key == (char_u *)&amp;hash_removed)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>hashitem_S</name> <block>{

<decl_stmt><decl><type><name>hash_T</name></type> <name>hi_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>hi_key</name></decl>;</decl_stmt>

}</block></struct></type> <name>hashitem_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_INIT_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>hashtable_S</name> <block>{

<decl_stmt><decl><type><name>hash_T</name></type> <name>ht_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>ht_used</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>ht_filled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ht_locked</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>ht_array</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>hashitem_T</name></type> <name><name>ht_smallarray</name><index>[<expr><name>HT_INIT_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>hashtab_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHTAB_ITER</name><parameter_list>(<parameter><type><name>ht</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { hashtab_T *const hi##ht_ = (ht); size_t hi##todo_ = hi##ht_-&gt;ht_used; for (hashitem_T *hi = hi##ht_-&gt;ht_array; hi##todo_; hi++) { if (!HASHITEM_EMPTY(hi)) { hi##todo_--; { code } } } } while (0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashtab.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
