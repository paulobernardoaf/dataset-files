<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\ui_compositor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_compositor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ugrid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui_compositor.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>UI</name> <modifier>*</modifier></type><name>compositor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>composed_uis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>kvec_t</name><argument_list>(<argument>ScreenGrid *</argument>)</argument_list></macro> <expr_stmt><expr><name>layers</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>bufsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>schar_T</name> <modifier>*</modifier></type><name>linebuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>sattr_T</name> <modifier>*</modifier></type><name>attrbuf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>chk_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>chk_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScreenGrid</name> <modifier>*</modifier></type><name>curgrid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>valid_screen</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msg_current_row</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>msg_was_scrolled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msg_sep_row</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>schar_T</name></type> <name>msg_sep_char</name> <init>= <expr><block>{ <expr><literal type="char">' '</literal></expr>, <expr><name>NUL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dbghl_normal</name></decl>, <decl><type ref="prev"/><name>dbghl_clear</name></decl>, <decl><type ref="prev"/><name>dbghl_composed</name></decl>, <decl><type ref="prev"/><name>dbghl_recompose</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ui_comp_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compositor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compositor</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UI</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>grid_resize</name></name> <operator>=</operator> <name>ui_comp_grid_resize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>grid_scroll</name></name> <operator>=</operator> <name>ui_comp_grid_scroll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>grid_cursor_goto</name></name> <operator>=</operator> <name>ui_comp_grid_cursor_goto</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>raw_line</name></name> <operator>=</operator> <name>ui_comp_raw_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>msg_set_pos</name></name> <operator>=</operator> <name>ui_comp_msg_set_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>UIExtension</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name>kUIExtCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>compositor</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIHlState</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curgrid</name> <operator>=</operator> <operator>&amp;</operator><name>default_grid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_attach_impl</name><argument_list>(<argument><expr><name>compositor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_comp_syn_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>dbghl_normal</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"RedrawDebugNormal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbghl_clear</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"RedrawDebugClear"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbghl_composed</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"RedrawDebugComposed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbghl_recompose</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"RedrawDebugRecompose"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_comp_attach</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>composed_uis</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>composed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_comp_detach</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>composed_uis</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>composed_uis</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>attrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>composed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ui_comp_should_draw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>composed_uis</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>valid_screen</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ui_comp_put_grid</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>on_top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>moved</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>comp_index</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>moved</name> <operator>=</operator> <operator>(</operator><name>row</name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>col</name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_comp_should_draw</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_disabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>,

<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name> <operator>+</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name> <operator>&lt;</operator> <name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><name>height</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name><operator>+</operator><name>width</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><name>height</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>col</name><operator>+</operator><name>width</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><name>height</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>,

<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name> <operator>+</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_disabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>grid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>insert_at</name> <init>= <expr><call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cmd_completion</name> <init>= <expr><operator>(</operator><name>grid</name> <operator>==</operator> <operator>&amp;</operator><name>pum_grid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>wop_flags</name> <operator>&amp;</operator> <name>WOP_PUM</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>insert_at</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>msg_grid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_completion</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>insert_at</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>insert_at</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>pum_grid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>grid</name> <operator>!=</operator> <operator>&amp;</operator><name>msg_grid</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>insert_at</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_at</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>on_top</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>insert_at</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_at</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>insert_at</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>comp_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>insert_at</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>grid</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_index</name></name> <operator>=</operator> <name>insert_at</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moved</name> <operator>&amp;&amp;</operator> <name>valid</name> <operator>&amp;&amp;</operator> <call><name>ui_comp_should_draw</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>,

<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>moved</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_comp_remove_grid</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grid</name> <operator>!=</operator> <operator>&amp;</operator><name>default_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>comp_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curgrid</name> <operator>==</operator> <name>grid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curgrid</name> <operator>=</operator> <operator>&amp;</operator><name>default_grid</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>comp_index</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>comp_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_comp_compose_grid</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ui_comp_set_grid</name><parameter_list>(<parameter><decl><type><name>handle_T</name></type> <name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curgrid</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>handle</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>handle</name> <operator>==</operator> <name>handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>grid</name> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>grid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curgrid</name> <operator>=</operator> <name>grid</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_comp_raise_grid</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>old_index</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>comp_index</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>old_index</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>comp_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>new_index</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>grid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_index</name></name> <operator>=</operator> <name>new_index</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>old_index</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid2</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startcol</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name></expr></argument>, <argument><expr><name><name>grid2</name><operator>-&gt;</operator><name>comp_col</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endcol</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>,

<argument><expr><name><name>grid2</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>grid2</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name></expr></argument>, <argument><expr><name><name>grid2</name><operator>-&gt;</operator><name>comp_row</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>, <argument><expr><name><name>grid2</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><name><name>grid2</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_comp_grid_cursor_goto</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid_handle</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_comp_should_draw</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ui_comp_set_grid</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>grid_handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_row</name> <init>= <expr><name><name>curgrid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_col</name> <init>= <expr><name><name>curgrid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curgrid</name> <operator>!=</operator> <operator>&amp;</operator><name>default_grid</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_index</name> <init>= <expr><call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>new_index</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>pum_grid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_index</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curgrid</name><operator>-&gt;</operator><name>comp_index</name></name> <operator>&lt;</operator> <name>new_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_comp_raise_grid</name><argument_list>(<argument><expr><name>curgrid</name></expr></argument>, <argument><expr><name>new_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor_col</name> <operator>&gt;=</operator> <name><name>default_grid</name><operator>.</operator><name>Columns</name></name> <operator>||</operator> <name>cursor_row</name> <operator>&gt;=</operator> <name><name>default_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_composed_call_grid_cursor_goto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cursor_row</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>ui_comp_mouse_focus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>focusable</name></name>

<operator>&amp;&amp;</operator> <name>row</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>grid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compose_line</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endcol</name></decl></parameter>,

<parameter><decl><type><name>LineFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>skipstart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skipend</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>kLineFlagInvalid</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>startcol</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>skipstart</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>&lt;</operator> <name><name>default_grid</name><operator>.</operator><name>Columns</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>kLineFlagInvalid</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endcol</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>skipend</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>startcol</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>schar_T</name> <modifier>*</modifier></type><name>bg_line</name> <init>= <expr><operator>&amp;</operator><name><name>default_grid</name><operator>.</operator><name>chars</name><index>[<expr><name><name>default_grid</name><operator>.</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name>

<operator>+</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>startcol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sattr_T</name> <modifier>*</modifier></type><name>bg_attrs</name> <init>= <expr><operator>&amp;</operator><name><name>default_grid</name><operator>.</operator><name>attrs</name><index>[<expr><name><name>default_grid</name><operator>.</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name>

<operator>+</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>startcol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>endcol</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>until</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>comp_row</name></name> <operator>&gt;</operator> <name>row</name> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>comp_row</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>Rows</name></name>

<operator>||</operator> <name><name>g</name><operator>-&gt;</operator><name>comp_disabled</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>comp_col</name></name> <operator>&lt;=</operator> <name>col</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>g</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>grid</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>until</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>g</name><operator>-&gt;</operator><name>Columns</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>comp_col</name></name> <operator>&gt;</operator> <name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>until</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>until</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>comp_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>until</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>until</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grid</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>until</name> <operator>&gt;</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>until</name> <operator>&lt;=</operator> <name><name>default_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>until</name><operator>-</operator><name>col</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>msg_sep_row</name> <operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_index</name></name> <operator>&lt;=</operator> <name><name>msg_grid</name><operator>.</operator><name>comp_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>grid</name> <operator>=</operator> <operator>&amp;</operator><name>msg_grid</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>sattr_T</name></type> <name>msg_sep_attr</name> <init>= <expr><operator>(</operator><name>sattr_T</name><operator>)</operator><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSGSEP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>col</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>until</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>linebuf</name><index>[<expr><name>i</name><operator>-</operator><name>startcol</name></expr>]</index></name></expr></argument>, <argument><expr><name>msg_sep_char</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>linebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrbuf</name><index>[<expr><name>i</name><operator>-</operator><name>startcol</name></expr>]</index></name> <operator>=</operator> <name>msg_sep_attr</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name><operator>-</operator><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name></expr>]</index></name>

<operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>col</name><operator>-</operator><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>linebuf</name><operator>+</operator><operator>(</operator><name>col</name><operator>-</operator><name>startcol</name><operator>)</operator></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>linebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>attrbuf</name><operator>+</operator><operator>(</operator><name>col</name><operator>-</operator><name>startcol</name><operator>)</operator></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>attrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>&gt;</operator> <name>until</name>

<operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name><operator>+</operator><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>linebuf</name><index>[<expr><name>until</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>startcol</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebuf</name><index>[<expr><name>until</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>startcol</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <name>startcol</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skipstart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>blending</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>col</name><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>startcol</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>until</name><operator>-</operator><name>startcol</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>width</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>thru</name> <init>= <expr><call><name>strequal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>linebuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>bg_line</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>endcol</name><operator>-</operator><name>startcol</name> <operator>&amp;&amp;</operator> <name><name>bg_line</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>thru</name> <operator>&amp;=</operator> <call><name>strequal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>linebuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>attrbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sattr_T</name><operator>)</operator><call><name>hl_blend_attrs</name><argument_list>(<argument><expr><name><name>bg_attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>attrbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attrbuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sattr_T</name><operator>)</operator><call><name>hl_blend_attrs</name><argument_list>(<argument><expr><name><name>bg_attrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>attrbuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thru</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>linebuf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>bg_line</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>linebuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>linebuf</name><index>[<expr><name>col</name><operator>-</operator><name>startcol</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>linebuf</name><index>[<expr><name>col</name><operator>-</operator><name>startcol</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebuf</name><index>[<expr><name>col</name><operator>-</operator><name>startcol</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <name>endcol</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skipend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>linebuf</name><index>[<expr><name>col</name><operator>-</operator><name>startcol</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skipstart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>until</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>linebuf</name><index>[<expr><name>endcol</name><operator>-</operator><name>startcol</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skipend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>endcol</name> <operator>&lt;=</operator> <name>chk_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>row</name> <operator>&lt;</operator> <name>chk_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>grid</name> <operator>&amp;&amp;</operator> <name>grid</name> <operator>==</operator> <operator>&amp;</operator><name>default_grid</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>kLineFlagWrap</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>skipstart</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>endcol</name><operator>-</operator><name>skipend</name><operator>)</operator><operator>-</operator><name>startcol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>attrbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rdb_flags</name> <operator>&amp;</operator> <name>RDB_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>attrbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ui_composed_call_raw_line</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>startcol</name><operator>+</operator><name>skipstart</name></expr></argument>,

<argument><expr><name>endcol</name><operator>-</operator><name>skipend</name></expr></argument>, <argument><expr><name>endcol</name><operator>-</operator><name>skipend</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>schar_T</name> <operator>*</operator><operator>)</operator><name>linebuf</name><operator>+</operator><name>skipstart</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>sattr_T</name> <operator>*</operator><operator>)</operator><name>attrbuf</name><operator>+</operator><name>skipstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compose_debug</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>startrow</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endrow</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>startcol</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>endcol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syn_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rdb_flags</name> <operator>&amp;</operator> <name>RDB_COMPOSITOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>endrow</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>endrow</name></expr></argument>, <argument><expr><name><name>default_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>, <argument><expr><name><name>default_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>startrow</name></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>endrow</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ui_composed_call_raw_line</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>endcol</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>schar_T</name> <operator>*</operator><operator>)</operator><name>linebuf</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>sattr_T</name> <operator>*</operator><operator>)</operator><name>attrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>delay</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug_delay</name><argument_list>(<argument><expr><name>endrow</name><operator>-</operator><name>startrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_delay</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_call_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>wd</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>labs</name><argument_list>(<argument><expr><name>p_wd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>factor</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>MAX</name><argument_list>(<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_microdelay</name><argument_list>(<argument><expr><name>factor</name> <operator>*</operator> <name>wd</name> <operator>*</operator> <literal type="number">1000u</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compose_area</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>startrow</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endrow</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endcol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>compose_debug</name><argument_list>(<argument><expr><name>startrow</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>endcol</name></expr></argument>, <argument><expr><name>dbghl_recompose</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endrow</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>endrow</name></expr></argument>, <argument><expr><name><name>default_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>, <argument><expr><name><name>default_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>&lt;=</operator> <name>startcol</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>startrow</name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>endrow</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>compose_line</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>endcol</name></expr></argument>, <argument><expr><name>kLineFlagInvalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_comp_compose_grid</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ui_comp_should_draw</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>,

<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name><operator>+</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_comp_raw_line</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endcol</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>clearcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>clearattr</name></decl></parameter>,

<parameter><decl><type><name>LineFlags</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>schar_T</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>sattr_T</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_comp_should_draw</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ui_comp_set_grid</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>grid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>+=</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>startcol</name> <operator>+=</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endcol</name> <operator>+=</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>clearcol</name> <operator>+=</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curgrid</name> <operator>!=</operator> <operator>&amp;</operator><name>default_grid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>kLineFlagWrap</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>endcol</name> <operator>&lt;=</operator> <name>clearcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>default_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"compositor: invalid row %"</literal><name>PRId64</name><literal type="string">" on grid %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clearcol</name> <operator>&gt;</operator> <name><name>default_grid</name><operator>.</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"compositor: invalid last column %"</literal><name>PRId64</name><literal type="string">" on grid %"</literal><name>PRId64</name></expr></argument>,

<argument><expr><name>clearcol</name></expr></argument>, <argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;=</operator> <name><name>default_grid</name><operator>.</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clearcol</name> <operator>=</operator> <name><name>default_grid</name><operator>.</operator><name>Columns</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>, <argument><expr><name>clearcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>covered</name> <init>= <expr><call><name>curgrid_covered_above</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kLineFlagInvalid</name> <operator>||</operator> <name>covered</name> <operator>||</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>blending</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_debug</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>clearcol</name></expr></argument>, <argument><expr><name>dbghl_composed</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compose_line</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>clearcol</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>compose_debug</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>endcol</name></expr></argument>, <argument><expr><name>dbghl_normal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compose_debug</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>endcol</name></expr></argument>, <argument><expr><name>clearcol</name></expr></argument>, <argument><expr><name>dbghl_clear</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endcol</name><operator>-</operator><name>startcol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ui_composed_call_raw_line</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>endcol</name></expr></argument>, <argument><expr><name>clearcol</name></expr></argument>, <argument><expr><name>clearattr</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_comp_set_screen_valid</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>valid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>valid_screen</name> <operator>=</operator> <name>valid</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_sep_row</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_comp_msg_set_pos</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name></type> <name>scrolled</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sep_char</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>comp_row</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>row</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scrolled</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_sep_row</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>row</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sep_char</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>msg_sep_char</name></expr></argument>, <argument><expr><name><name>sep_char</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_sep_char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>msg_sep_row</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name>msg_current_row</name> <operator>&amp;&amp;</operator> <call><name>ui_comp_should_draw</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>msg_current_row</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>default_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>row</name> <operator>&lt;</operator> <name>msg_current_row</name> <operator>&amp;&amp;</operator> <call><name>ui_comp_should_draw</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name>msg_current_row</name> <operator>&lt;</operator> <name>Rows</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name>msg_current_row</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>row</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>blending</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first_row</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>row</name><operator>-</operator><operator>(</operator><ternary><condition><expr><name>scrolled</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><name>first_row</name></expr></argument>, <argument><expr><name>Rows</name><operator>-</operator><name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first_row</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>row</name><operator>-</operator><operator>(</operator><ternary><condition><expr><name>msg_was_scrolled</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ui_composed_call_grid_scroll</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>first_row</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scrolled</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>msg_was_scrolled</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_area</name><argument_list>(<argument><expr><name>row</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>msg_current_row</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_was_scrolled</name> <operator>=</operator> <name>scrolled</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>curgrid_covered_above</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>above_msg</name> <init>= <expr><operator>(</operator><call><name>kv_A</name><argument_list>(<argument><expr><name>layers</name></expr></argument>, <argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>msg_grid</name>

<operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>msg_current_row</name><operator>-</operator><operator>(</operator><ternary><condition><expr><name>msg_was_scrolled</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>kv_size</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call><operator>-</operator><operator>(</operator><ternary><condition><expr><name>above_msg</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&gt;</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_index</name></name><operator>+</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_comp_grid_scroll</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>top</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>bot</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>right</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>cols</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_comp_should_draw</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ui_comp_set_grid</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>grid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>top</name> <operator>+=</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>+=</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>comp_col</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>covered</name> <init>= <expr><call><name>curgrid_covered_above</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>bot</name> <operator>-</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>covered</name> <operator>||</operator> <name><name>curgrid</name><operator>-&gt;</operator><name>blending</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_debug</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>dbghl_recompose</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>top</name> <operator>+</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>-</operator><name>rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>bot</name> <operator>-</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curgrid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>curgrid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>r</name><operator>-</operator><name><name>curgrid</name><operator>-&gt;</operator><name>comp_row</name></name></expr>]</index></name>

<operator>+</operator><name>left</name><operator>-</operator><name><name>curgrid</name><operator>-&gt;</operator><name>comp_col</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>compose_line</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ui_composed_call_grid_scroll</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rdb_flags</name> <operator>&amp;</operator> <name>RDB_COMPOSITOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug_delay</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_comp_grid_resize</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>grid</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_composed_call_grid_resize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>chk_width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chk_height</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_bufsize</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>!=</operator> <name>new_bufsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>attrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linebuf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>new_bufsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>linebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>attrbuf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>new_bufsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>attrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <name>new_bufsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
