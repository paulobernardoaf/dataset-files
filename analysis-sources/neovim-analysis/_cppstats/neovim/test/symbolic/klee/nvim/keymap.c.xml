<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\test\symbolic\klee\nvim\keymap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_KEYS_ENTRY_SIZE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>modifier_keys_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'1'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'2'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'4'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'5'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'6'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'D'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'L'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,

<expr><name>MOD_MASK_CTRL</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_C_END</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'9'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'0'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'1'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'h'</literal></expr>,

<expr><name>MOD_MASK_CTRL</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_C_HOME</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'h'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'I'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>,

<expr><name>MOD_MASK_CTRL</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_C_LEFT</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'3'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'4'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'5'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'8'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'9'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'0'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'3'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>,

<expr><name>MOD_MASK_CTRL</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_C_RIGHT</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'j'</literal></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'5'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'!'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'6'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'!'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'!'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'8'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_UP</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_DOWN</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_XF1</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_XF1</name></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_XF2</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_XF2</name></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_XF3</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_XF3</name></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_XF4</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_XF4</name></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F1</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'1'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F2</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'2'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F3</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'3'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F4</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'4'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F5</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'5'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F6</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'6'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F7</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F8</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'8'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F9</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'9'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F10</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">';'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F11</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'1'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F12</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'2'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F13</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'3'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F14</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'4'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F15</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'5'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F16</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'6'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F17</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F18</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'8'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F19</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'9'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F20</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'A'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F21</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'B'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F22</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'C'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F23</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'D'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F24</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'E'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F25</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'F'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F26</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F27</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'H'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F28</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'I'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F29</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'J'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F30</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'K'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F31</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'L'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F32</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'M'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F33</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'N'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F34</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'O'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F35</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'P'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F36</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_S_F37</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'R'</literal></expr>,

<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_TAB</name></expr>,

<expr><name>NUL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>simplify_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>modifiers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>modifiers</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name> <operator>|</operator> <name>MOD_MASK_ALT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt>

<return>return <expr><name>K_S_TAB</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>key0</name> <init>= <expr><call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>key1</name> <init>= <expr><call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>modifier_keys_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>MOD_KEYS_ENTRY_SIZE</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key0</name> <operator>==</operator> <name><name>modifier_keys_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name>key1</name> <operator>==</operator> <name><name>modifier_keys_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>modifiers</name> <operator>&amp;</operator> <name><name>modifier_keys_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name><name>modifier_keys_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><name><name>modifier_keys_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>modifier_keys_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>key</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>handle_x_keys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

FUNC_ATTR_CONST FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>K_XUP</name></expr>:</case> <return>return <expr><name>K_UP</name></expr>;</return>

<case>case <expr><name>K_XDOWN</name></expr>:</case> <return>return <expr><name>K_DOWN</name></expr>;</return>

<case>case <expr><name>K_XLEFT</name></expr>:</case> <return>return <expr><name>K_LEFT</name></expr>;</return>

<case>case <expr><name>K_XRIGHT</name></expr>:</case> <return>return <expr><name>K_RIGHT</name></expr>;</return>

<case>case <expr><name>K_XHOME</name></expr>:</case> <return>return <expr><name>K_HOME</name></expr>;</return>

<case>case <expr><name>K_ZHOME</name></expr>:</case> <return>return <expr><name>K_HOME</name></expr>;</return>

<case>case <expr><name>K_XEND</name></expr>:</case> <return>return <expr><name>K_END</name></expr>;</return>

<case>case <expr><name>K_ZEND</name></expr>:</case> <return>return <expr><name>K_END</name></expr>;</return>

<case>case <expr><name>K_XF1</name></expr>:</case> <return>return <expr><name>K_F1</name></expr>;</return>

<case>case <expr><name>K_XF2</name></expr>:</case> <return>return <expr><name>K_F2</name></expr>;</return>

<case>case <expr><name>K_XF3</name></expr>:</case> <return>return <expr><name>K_F3</name></expr>;</return>

<case>case <expr><name>K_XF4</name></expr>:</case> <return>return <expr><name>K_F4</name></expr>;</return>

<case>case <expr><name>K_S_XF1</name></expr>:</case> <return>return <expr><name>K_S_F1</name></expr>;</return>

<case>case <expr><name>K_S_XF2</name></expr>:</case> <return>return <expr><name>K_S_F2</name></expr>;</return>

<case>case <expr><name>K_S_XF3</name></expr>:</case> <return>return <expr><name>K_S_F3</name></expr>;</return>

<case>case <expr><name>K_S_XF4</name></expr>:</case> <return>return <expr><name>K_S_F4</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>key</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>key_name_entry</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

}</block> <decl><name><name>key_names_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="char">' '</literal></expr>, <expr><literal type="string">"Space"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>TAB</name></expr>, <expr><literal type="string">"Tab"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_TAB</name></expr>, <expr><literal type="string">"Tab"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NL</name></expr>, <expr><literal type="string">"NL"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NL</name></expr>, <expr><literal type="string">"NewLine"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>NL</name></expr>, <expr><literal type="string">"LineFeed"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>NL</name></expr>, <expr><literal type="string">"LF"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>CAR</name></expr>, <expr><literal type="string">"CR"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CAR</name></expr>, <expr><literal type="string">"Return"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>CAR</name></expr>, <expr><literal type="string">"Enter"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>K_BS</name></expr>, <expr><literal type="string">"BS"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_BS</name></expr>, <expr><literal type="string">"BackSpace"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>ESC</name></expr>, <expr><literal type="string">"Esc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CSI</name></expr>, <expr><literal type="string">"CSI"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_CSI</name></expr>, <expr><literal type="string">"xCSI"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="char">'|'</literal></expr>, <expr><literal type="string">"Bar"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="string">"Bslash"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_DEL</name></expr>, <expr><literal type="string">"Del"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_DEL</name></expr>, <expr><literal type="string">"Delete"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>K_KDEL</name></expr>, <expr><literal type="string">"kDel"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KDEL</name></expr>, <expr><literal type="string">"KPPeriod"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>K_UP</name></expr>, <expr><literal type="string">"Up"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_DOWN</name></expr>, <expr><literal type="string">"Down"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_LEFT</name></expr>, <expr><literal type="string">"Left"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_RIGHT</name></expr>, <expr><literal type="string">"Right"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XUP</name></expr>, <expr><literal type="string">"xUp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XDOWN</name></expr>, <expr><literal type="string">"xDown"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XLEFT</name></expr>, <expr><literal type="string">"xLeft"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XRIGHT</name></expr>, <expr><literal type="string">"xRight"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KUP</name></expr>, <expr><literal type="string">"kUp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KUP</name></expr>, <expr><literal type="string">"KP8"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KDOWN</name></expr>, <expr><literal type="string">"kDown"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KDOWN</name></expr>, <expr><literal type="string">"KP2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KLEFT</name></expr>, <expr><literal type="string">"kLeft"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KLEFT</name></expr>, <expr><literal type="string">"KP4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KRIGHT</name></expr>, <expr><literal type="string">"kRight"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KRIGHT</name></expr>, <expr><literal type="string">"KP6"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F1</name></expr>, <expr><literal type="string">"F1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F2</name></expr>, <expr><literal type="string">"F2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F3</name></expr>, <expr><literal type="string">"F3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F4</name></expr>, <expr><literal type="string">"F4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F5</name></expr>, <expr><literal type="string">"F5"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F6</name></expr>, <expr><literal type="string">"F6"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F7</name></expr>, <expr><literal type="string">"F7"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F8</name></expr>, <expr><literal type="string">"F8"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F9</name></expr>, <expr><literal type="string">"F9"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F10</name></expr>, <expr><literal type="string">"F10"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F11</name></expr>, <expr><literal type="string">"F11"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F12</name></expr>, <expr><literal type="string">"F12"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F13</name></expr>, <expr><literal type="string">"F13"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F14</name></expr>, <expr><literal type="string">"F14"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F15</name></expr>, <expr><literal type="string">"F15"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F16</name></expr>, <expr><literal type="string">"F16"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F17</name></expr>, <expr><literal type="string">"F17"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F18</name></expr>, <expr><literal type="string">"F18"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F19</name></expr>, <expr><literal type="string">"F19"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F20</name></expr>, <expr><literal type="string">"F20"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F21</name></expr>, <expr><literal type="string">"F21"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F22</name></expr>, <expr><literal type="string">"F22"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F23</name></expr>, <expr><literal type="string">"F23"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F24</name></expr>, <expr><literal type="string">"F24"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F25</name></expr>, <expr><literal type="string">"F25"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F26</name></expr>, <expr><literal type="string">"F26"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F27</name></expr>, <expr><literal type="string">"F27"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F28</name></expr>, <expr><literal type="string">"F28"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F29</name></expr>, <expr><literal type="string">"F29"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F30</name></expr>, <expr><literal type="string">"F30"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F31</name></expr>, <expr><literal type="string">"F31"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F32</name></expr>, <expr><literal type="string">"F32"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F33</name></expr>, <expr><literal type="string">"F33"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F34</name></expr>, <expr><literal type="string">"F34"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F35</name></expr>, <expr><literal type="string">"F35"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F36</name></expr>, <expr><literal type="string">"F36"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_F37</name></expr>, <expr><literal type="string">"F37"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XF1</name></expr>, <expr><literal type="string">"xF1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XF2</name></expr>, <expr><literal type="string">"xF2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XF3</name></expr>, <expr><literal type="string">"xF3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XF4</name></expr>, <expr><literal type="string">"xF4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_HELP</name></expr>, <expr><literal type="string">"Help"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_UNDO</name></expr>, <expr><literal type="string">"Undo"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_INS</name></expr>, <expr><literal type="string">"Insert"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_INS</name></expr>, <expr><literal type="string">"Ins"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>K_KINS</name></expr>, <expr><literal type="string">"kInsert"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KINS</name></expr>, <expr><literal type="string">"KP0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_HOME</name></expr>, <expr><literal type="string">"Home"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KHOME</name></expr>, <expr><literal type="string">"kHome"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KHOME</name></expr>, <expr><literal type="string">"KP7"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XHOME</name></expr>, <expr><literal type="string">"xHome"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_ZHOME</name></expr>, <expr><literal type="string">"zHome"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_END</name></expr>, <expr><literal type="string">"End"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KEND</name></expr>, <expr><literal type="string">"kEnd"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_XEND</name></expr>, <expr><literal type="string">"xEnd"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_ZEND</name></expr>, <expr><literal type="string">"zEnd"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_PAGEUP</name></expr>, <expr><literal type="string">"PageUp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_PAGEDOWN</name></expr>, <expr><literal type="string">"PageDown"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KPAGEUP</name></expr>, <expr><literal type="string">"kPageUp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KPAGEUP</name></expr>, <expr><literal type="string">"KP9"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KPAGEDOWN</name></expr>, <expr><literal type="string">"kPageDown"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KPAGEDOWN</name></expr>, <expr><literal type="string">"KP3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KORIGIN</name></expr>, <expr><literal type="string">"kOrigin"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KORIGIN</name></expr>, <expr><literal type="string">"KP5"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KPLUS</name></expr>, <expr><literal type="string">"kPlus"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KPLUS</name></expr>, <expr><literal type="string">"KPPlus"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KMINUS</name></expr>, <expr><literal type="string">"kMinus"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KMINUS</name></expr>, <expr><literal type="string">"KPMinus"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KDIVIDE</name></expr>, <expr><literal type="string">"kDivide"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KDIVIDE</name></expr>, <expr><literal type="string">"KPDiv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KMULTIPLY</name></expr>, <expr><literal type="string">"kMultiply"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KMULTIPLY</name></expr>, <expr><literal type="string">"KPMult"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KENTER</name></expr>, <expr><literal type="string">"kEnter"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KENTER</name></expr>, <expr><literal type="string">"KPEnter"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_KPOINT</name></expr>, <expr><literal type="string">"kPoint"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K0</name></expr>, <expr><literal type="string">"k0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K1</name></expr>, <expr><literal type="string">"k1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K2</name></expr>, <expr><literal type="string">"k2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K3</name></expr>, <expr><literal type="string">"k3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K4</name></expr>, <expr><literal type="string">"k4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K5</name></expr>, <expr><literal type="string">"k5"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K6</name></expr>, <expr><literal type="string">"k6"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K7</name></expr>, <expr><literal type="string">"k7"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K8</name></expr>, <expr><literal type="string">"k8"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_K9</name></expr>, <expr><literal type="string">"k9"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="char">'&lt;'</literal></expr>, <expr><literal type="string">"lt"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MOUSE</name></expr>, <expr><literal type="string">"Mouse"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_LEFTMOUSE</name></expr>, <expr><literal type="string">"LeftMouse"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_LEFTMOUSE_NM</name></expr>, <expr><literal type="string">"LeftMouseNM"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_LEFTDRAG</name></expr>, <expr><literal type="string">"LeftDrag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_LEFTRELEASE</name></expr>, <expr><literal type="string">"LeftRelease"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_LEFTRELEASE_NM</name></expr>, <expr><literal type="string">"LeftReleaseNM"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MIDDLEMOUSE</name></expr>, <expr><literal type="string">"MiddleMouse"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MIDDLEDRAG</name></expr>, <expr><literal type="string">"MiddleDrag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MIDDLERELEASE</name></expr>, <expr><literal type="string">"MiddleRelease"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_RIGHTMOUSE</name></expr>, <expr><literal type="string">"RightMouse"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_RIGHTDRAG</name></expr>, <expr><literal type="string">"RightDrag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_RIGHTRELEASE</name></expr>, <expr><literal type="string">"RightRelease"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MOUSEDOWN</name></expr>, <expr><literal type="string">"ScrollWheelUp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MOUSEUP</name></expr>, <expr><literal type="string">"ScrollWheelDown"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MOUSELEFT</name></expr>, <expr><literal type="string">"ScrollWheelRight"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MOUSERIGHT</name></expr>, <expr><literal type="string">"ScrollWheelLeft"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_MOUSEDOWN</name></expr>, <expr><literal type="string">"MouseDown"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>K_MOUSEUP</name></expr>, <expr><literal type="string">"MouseUp"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>K_X1MOUSE</name></expr>, <expr><literal type="string">"X1Mouse"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_X1DRAG</name></expr>, <expr><literal type="string">"X1Drag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_X1RELEASE</name></expr>, <expr><literal type="string">"X1Release"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_X2MOUSE</name></expr>, <expr><literal type="string">"X2Mouse"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_X2DRAG</name></expr>, <expr><literal type="string">"X2Drag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_X2RELEASE</name></expr>, <expr><literal type="string">"X2Release"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_DROP</name></expr>, <expr><literal type="string">"Drop"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_ZERO</name></expr>, <expr><literal type="string">"Nul"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_SNR</name></expr>, <expr><literal type="string">"SNR"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_PLUG</name></expr>, <expr><literal type="string">"Plug"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>K_PASTE</name></expr>, <expr><literal type="string">"Paste"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>get_special_key_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>key_names_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>table_name</name> <init>= <expr><name><name>key_names_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ascii_isident</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>table_name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>table_name</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isident</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>table_name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>key_names_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>modmasktable</name> <block>{

<decl_stmt><decl><type><name>short</name></type> <name>mod_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>mod_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name>name</name></decl>;</decl_stmt> 

}</block> <decl><name><name>mod_mask_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>MOD_MASK_ALT</name></expr>, <expr><name>MOD_MASK_ALT</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'M'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>MOD_MASK_META</name></expr>, <expr><name>MOD_MASK_META</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'T'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>MOD_MASK_CTRL</name></expr>, <expr><name>MOD_MASK_CTRL</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'C'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>MOD_MASK_SHIFT</name></expr>, <expr><name>MOD_MASK_SHIFT</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'S'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>MOD_MASK_MULTI_CLICK</name></expr>, <expr><name>MOD_MASK_2CLICK</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>MOD_MASK_MULTI_CLICK</name></expr>, <expr><name>MOD_MASK_3CLICK</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>MOD_MASK_MULTI_CLICK</name></expr>, <expr><name>MOD_MASK_4CLICK</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>MOD_MASK_CMD</name></expr>, <expr><name>MOD_MASK_CMD</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>MOD_MASK_ALT</name></expr>, <expr><name>MOD_MASK_ALT</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><literal type="char">'A'</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NUL</name></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>name_to_mod_mask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>mod_mask_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mod_mask</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>mod_mask_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>mod_mask_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mod_flag</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>extract_modifiers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>modp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><operator>*</operator><name>modp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_CMD</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <literal type="char">'_'</literal><operator>)</operator> <operator>||</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>Ctrl_chr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_CTRL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>K_ZERO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>modp</name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

<return>return <expr><name>key</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>find_special_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>srcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>src_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>modp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>keycode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>keep_x_key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>in_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>last_dash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>end_of_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>end</name> <init>= <expr><operator>*</operator><name>srcp</name> <operator>+</operator> <name>src_len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>*</operator><name>srcp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_dash</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>src</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>bp</name> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>bp</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name>ascii_isident</name><argument_list>(<argument><expr><operator>*</operator><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>bp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bp</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_dash</name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>bp</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>bp</name> <operator>&gt;</operator> <name>l</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>in_string</name> <operator>&amp;&amp;</operator> <name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>-</operator> <name>bp</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>in_string</name> <operator>&amp;&amp;</operator> <name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>

<operator>&amp;&amp;</operator> <name><name>bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>bp</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>-</operator> <name>bp</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"char-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>STR2NR_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>bp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>end_of_name</name> <operator>=</operator> <name>bp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>src</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>bp</name> <operator>&lt;</operator> <name>last_dash</name></expr>;</condition> <incr><expr><name>bp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bp</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>name_to_mod_mask</name><argument_list>(<argument><expr><operator>*</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>bit</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>&gt;=</operator> <name>last_dash</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>last_dash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"char-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>last_dash</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><name>last_dash</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>STR2NR_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_string</name> <operator>&amp;&amp;</operator> <name><name>last_dash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>last_dash</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>last_dash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>last_dash</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>last_dash</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>get_special_key_code</name><argument_list>(<argument><expr><name>last_dash</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep_x_key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>handle_x_keys</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keycode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>K_BS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>BS</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>DEL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>extract_modifiers</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>modp</name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>srcp</name> <operator>=</operator> <name>end_of_name</name></expr>;</expr_stmt>

<return>return <expr><name>key</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>add_char2buf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>temp</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>KS_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>trans_special</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>srcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>src_len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>keycode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>in_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>find_special_key</name><argument_list>(<argument><expr><name>srcp</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>in_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>modifiers</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keycode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keycode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>after</name> <init>= <expr><call><name>add_char2buf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>after</name> <operator>&gt;=</operator> <name>dst</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><operator>(</operator><name>after</name> <operator>-</operator> <name>dst</name><operator>)</operator> <operator>&lt;=</operator> <name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>after</name> <operator>-</operator> <name>dst</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>key</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>dlen</name></expr>;</return>

</block_content>}</block></function>

</unit>
