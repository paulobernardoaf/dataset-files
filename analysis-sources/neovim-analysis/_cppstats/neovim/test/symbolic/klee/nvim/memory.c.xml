<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\test\symbolic\klee\nvim\memory.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/ringbuf.h"</cpp:file></cpp:include>

<enum>enum <block>{ <decl><name>RB_SIZE</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>AllocRecord</name>;</typedef>

<macro><name>RINGBUF_TYPEDEF</name><argument_list>(<argument>AllocRecords</argument>, <argument>AllocRecord</argument>)</argument_list></macro>

<macro><name>RINGBUF_INIT</name><argument_list>(<argument>AllocRecords</argument>, <argument>arecs</argument>, <argument>AllocRecord</argument>, <argument>RINGBUF_DUMMY_FREE</argument>)</argument_list></macro>

<macro><name>RINGBUF_STATIC</name><argument_list>(<argument>static</argument>, <argument>AllocRecords</argument>, <argument>AllocRecord</argument>, <argument>arecs</argument>, <argument>RB_SIZE</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>size_t</name></type> <name>allocated_memory</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ever_allocated_memory</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>allocated_memory_limit</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type><name>xmalloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>allocated_memory</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ever_allocated_memory</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>allocated_memory</name> <operator>&lt;=</operator> <name>allocated_memory_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>arecs_rb_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arecs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>RB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>arecs_rb_push</name><argument_list>(<argument>&amp;arecs</argument>, <argument>(AllocRecord) {

.ptr = ret</argument>,

<argument>.size = size</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>xfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<macro><name>RINGBUF_FORALL</name><argument_list>(<argument>&amp;arecs</argument>, <argument>AllocRecord</argument>, <argument>arec</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arec</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allocated_memory</name> <operator>-=</operator> <name><name>arec</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arecs_rb_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arecs</name></expr></argument>, <argument><expr><call><name>arecs_rb_find_idx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arecs</name></expr></argument>, <argument><expr><name>arec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>xrealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>RINGBUF_FORALL</name><argument_list>(<argument>&amp;arecs</argument>, <argument>AllocRecord</argument>, <argument>arec</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arec</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allocated_memory</name> <operator>-=</operator> <name><name>arec</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>allocated_memory</name> <operator>+=</operator> <name>new_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name><name>arec</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ever_allocated_memory</name> <operator>+=</operator> <operator>(</operator><name>new_size</name> <operator>-</operator> <name><name>arec</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arec</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arec</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>xstrdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

FUNC_ATTR_MALLOC FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_RET

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<return>return <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>xmallocz</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_RET FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_size</name> <init>= <expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>total_size</name> <operator>&gt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ret</name><operator>)</operator><index>[<expr><name>size</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>xstpcpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>src</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_RET FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>xmemdupz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_RET FUNC_ATTR_WARN_UNUSED_RESULT

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<return>return <expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>xmallocz</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
