<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\test\symbolic\klee\viml_expressions_parser.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KLEE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;klee/klee.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/viml/parser/expressions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/viml/parser/parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/gettext.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/viml/parser/expressions.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_SIZE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>avoid_optimizing_out</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>simple_get_line</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><name>ParserLine</name> <modifier>*</modifier></type><name>ret_pline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ParserLine</name> <modifier>*</modifier><modifier>*</modifier></type><name>plines_p</name> <init>= <expr><operator>(</operator><name>ParserLine</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_pline</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>plines_p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>plines_p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>argv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>environ</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>input</name><index>[<expr><name>INPUT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>peek</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>avoid_optimizing_out</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_KLEE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KLEE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>klee_make_symbolic</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>klee_make_symbolic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shift</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shift</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"shift"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>klee_make_symbolic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>klee_assume</name><argument_list>(<argument><expr><name>shift</name> <operator>&lt;</operator> <name>INPUT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>klee_assume</name><argument_list>(

<argument><expr><name>flags</name> <operator>&lt;=</operator> <operator>(</operator><name>kExprFlagsMulti</name><operator>|</operator><name>kExprFlagsDisallowEOC</name><operator>|</operator><name>kExprFlagsParseLet</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ParserLine</name></type> <name><name>plines</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KLEE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name><name>input</name><index>[<expr><name>shift</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>shift</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name>allocated</name> <operator>=</operator> <name>false</name></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>allocated</name> <operator>=</operator> <name>false</name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KLEE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>plines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;=</operator> <name>INPUT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>plines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>plines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>argc</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ParserLine</name> <modifier>*</modifier></type><name>cur_pline</name> <init>= <expr><operator>&amp;</operator><name><name>plines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParserHighlight</name></type> <name>colors</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kvi_init</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ParserState</name></type> <name>pstate</name> <init>= <expr><block>{

<expr><operator>.</operator><name>reader</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>get_line</name> <operator>=</operator> <name>simple_get_line</name></expr>,

<expr><operator>.</operator><name>cookie</name> <operator>=</operator> <operator>&amp;</operator><name>cur_pline</name></expr>,

<expr><operator>.</operator><name>lines</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>,

<expr><operator>.</operator><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>pos</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>colors</name> <operator>=</operator> <operator>&amp;</operator><name>colors</name></expr>,

<expr><operator>.</operator><name>can_continuate</name> <operator>=</operator> <name>false</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kvi_init</name><argument_list>(<argument><expr><name><name>pstate</name><operator>.</operator><name>reader</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ExprAST</name></type> <name>ast</name> <init>= <expr><call><name>viml_pexpr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstate</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ast</name><operator>.</operator><name>root</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>ast</name><operator>.</operator><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kExprFlagsParseLet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ast</name><operator>.</operator><name>err</name><operator>.</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeAssignment</name>

<operator>||</operator> <operator>(</operator><name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeListLiteral</name>

<operator>&amp;&amp;</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeComplexIdentifier</name>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeCurlyBracesIdentifier</name>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodePlainIdentifier</name>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeRegister</name>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeEnvironment</name>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeOption</name>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeSubscript</name>

<operator>||</operator> <name><name>ast</name><operator>.</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeConcatOrSubscript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>INPUT_SIZE</name> <operator>-</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kvi_destroy</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>viml_pexpr_free_ast</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>allocated_memory</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
